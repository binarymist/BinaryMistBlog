<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on BinaryMist</title>
    <link>https://binarymist.io/post/</link>
    <description>Recent content in Posts on BinaryMist</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018 BinaryMist Ltd &lt;/br&gt;Following images are used under Creative Commons: [1](https://www.flickr.com/photos/ravefinity/12180959354/in/photostream/) &lt;/br&gt;[Privacy](/publication/privacy/)</copyright>
    <lastBuildDate>Wed, 17 Feb 2021 17:17:11 +1300</lastBuildDate>
    
	<atom:link href="https://binarymist.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Purpleteam at Alpha</title>
      <link>https://binarymist.io/blog/2021/02/17/purpleteam-at-alpha/</link>
      <pubDate>Wed, 17 Feb 2021 17:17:11 +1300</pubDate>
      
      <guid>https://binarymist.io/blog/2021/02/17/purpleteam-at-alpha/</guid>
      <description>Where has Kim been for the last couple of years? This post explains why he&amp;rsquo;s been so quiet and what he has been working on.</description>
    </item>
    
    <item>
      <title>Who Devs Wins</title>
      <link>https://binarymist.io/blog/2019/08/31/who-devs-wins/</link>
      <pubDate>Sat, 31 Aug 2019 00:00:00 +1200</pubDate>
      
      <guid>https://binarymist.io/blog/2019/08/31/who-devs-wins/</guid>
      <description>Twelve Jade Development Teams go head-to-head in the Jade Secure Coding Tournament</description>
    </item>
    
    <item>
      <title>Cloud Security</title>
      <link>https://binarymist.io/blog/2018/04/28/cloud-security/</link>
      <pubDate>Sat, 28 Apr 2018 00:00:00 +1200</pubDate>
      
      <guid>https://binarymist.io/blog/2018/04/28/cloud-security/</guid>
      <description>Discussion about Kim&amp;rsquo;s new book on Cloud Security, some of the content, and links to other useful resources around securing your Cloud environments.</description>
    </item>
    
    <item>
      <title>Docker Security</title>
      <link>https://binarymist.io/blog/2018/03/31/docker-security/</link>
      <pubDate>Sat, 31 Mar 2018 00:00:00 +1300</pubDate>
      
      <guid>https://binarymist.io/blog/2018/03/31/docker-security/</guid>
      <description>Discussion about Kim&amp;rsquo;s new &lt;a href=&#34;https://binarymist.io/publication/docker-security/&#34;&gt;book on Docker Security&lt;/a&gt;, some of the content, and links to other useful resources around securing your Docker deployments.</description>
    </item>
    
    <item>
      <title>Hugo with Staticman Commenting and Subscriptions</title>
      <link>https://binarymist.io/blog/2018/02/24/hugo-with-staticman-commenting-and-subscriptions/</link>
      <pubDate>Sat, 24 Feb 2018 00:00:00 +1300</pubDate>
      
      <guid>https://binarymist.io/blog/2018/02/24/hugo-with-staticman-commenting-and-subscriptions/</guid>
      <description>Adding Staticman commenting system to BinaryMist blog and Hugo Academic</description>
    </item>
    
    <item>
      <title>BinaryMist Web Migration</title>
      <link>https://binarymist.io/blog/2018/01/27/binarymist-web-migration/</link>
      <pubDate>Sat, 27 Jan 2018 00:00:00 +1300</pubDate>
      
      <guid>https://binarymist.io/blog/2018/01/27/binarymist-web-migration/</guid>
      <description>In this post we discuss the move from the legacy BinaryMist blog on Wordpress.com, along with the BinaryMist website, to a single static site on the Hugo platform hosted on Github Pages.</description>
    </item>
    
    <item>
      <title>The Cloud Shared Responsibility Model</title>
      <link>https://binarymist.io/blog/2017/10/02/the-cloud-shared-responsibility-model/</link>
      <pubDate>Mon, 02 Oct 2017 00:00:00 +1300</pubDate>
      
      <guid>https://binarymist.io/blog/2017/10/02/the-cloud-shared-responsibility-model/</guid>
      <description>The shared responsibility model is one that many have not grasped or understood well. Let’s look at the responsibilities of the parties.</description>
    </item>
    
    <item>
      <title>Captcha Considerations</title>
      <link>https://binarymist.io/blog/2015/12/31/captcha-considerations/</link>
      <pubDate>Thu, 31 Dec 2015 00:00:00 +1300</pubDate>
      
      <guid>https://binarymist.io/blog/2015/12/31/captcha-considerations/</guid>
      <description>Lack of captchas are a risk, but so are captchas themselves&amp;hellip;</description>
    </item>
    
    <item>
      <title>Lack of Visibility in Web Applications</title>
      <link>https://binarymist.io/blog/2015/11/26/lack-of-visibility-in-web-applications/</link>
      <pubDate>Thu, 26 Nov 2015 00:00:00 +1300</pubDate>
      
      <guid>https://binarymist.io/blog/2015/11/26/lack-of-visibility-in-web-applications/</guid>
      <description>Not being able to introspect your application at any given time or being able to know how the health status is, is not a comfortable place to be in and there is no reason you should be there.</description>
    </item>
    
    <item>
      <title>Consuming Free and Open Source</title>
      <link>https://binarymist.io/blog/2015/10/29/consuming-free-and-open-source/</link>
      <pubDate>Thu, 29 Oct 2015 00:00:00 +1300</pubDate>
      
      <guid>https://binarymist.io/blog/2015/10/29/consuming-free-and-open-source/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;This is where A9 (Using Components with Known Vulnerabilities) of the 2013 OWASP Top 10 comes in. We are consuming far more free and open source libraries than we have ever before. Much of the code we are pulling into our projects is never intentionally used, but is still adding surface area for attack. In this post we address the risks and countermeasures.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Risks and Countermeasures to the Management of Application Secrets</title>
      <link>https://binarymist.io/blog/2015/09/17/risks-and-countermeasures-to-the-management-of-application-secrets/</link>
      <pubDate>Thu, 17 Sep 2015 00:00:00 +1200</pubDate>
      
      <guid>https://binarymist.io/blog/2015/09/17/risks-and-countermeasures-to-the-management-of-application-secrets/</guid>
      <description>Redirects to legacy blog post.</description>
    </item>
    
    <item>
      <title>TL-WN722N on Kali VM on Linux Host</title>
      <link>https://binarymist.io/blog/2015/09/03/tl-wn722n-on-kali-vm-on-linux-host/</link>
      <pubDate>Thu, 03 Sep 2015 00:00:00 +1200</pubDate>
      
      <guid>https://binarymist.io/blog/2015/09/03/tl-wn722n-on-kali-vm-on-linux-host/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;The following is the process I found to set-up the pass-through of the very common USB TP-LINK TL-WN722N Wifi adapter (which is known to work well with Linux) to a Virtual Host Kali Linux 1.1.0 (same process for 2.0) guest, by-passing the Linux Mint 17.1 (Rebecca) Host.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Keeping Your NodeJS Web App Running on Production Linux</title>
      <link>https://binarymist.io/blog/2015/06/26/keeping-your-nodejs-web-app-running-on-production-linux/</link>
      <pubDate>Fri, 26 Jun 2015 00:00:00 +1200</pubDate>
      
      <guid>https://binarymist.io/blog/2015/06/26/keeping-your-nodejs-web-app-running-on-production-linux/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;All the following offerings that I’ve evaluated target different scenarios. I’ve listed the pros and cons for each of them and where I think they fit into a potential solution to monitor your web applications (I’m leaning toward NodeJS) and make sure they keep running.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Evaluation of Host Intrusion Detection Systems (HIDS)</title>
      <link>https://binarymist.io/blog/2015/05/30/evaluation-of-host-intrusion-detection-systems-hids/</link>
      <pubDate>Sat, 30 May 2015 00:00:00 +1200</pubDate>
      
      <guid>https://binarymist.io/blog/2015/05/30/evaluation-of-host-intrusion-detection-systems-hids/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;The best time to install a HIDS is on a fresh install before you open the host up to the internet or even your LAN if it’s corporate. Of course if you don’t have that luxury, there are a bunch of tools that can help you determine if you’re already owned. Be sure to run one or more over your target system before your HIDS bench-marks it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Web Server Log Management</title>
      <link>https://binarymist.io/blog/2015/04/25/web-server-log-management/</link>
      <pubDate>Sat, 25 Apr 2015 00:00:00 +1200</pubDate>
      
      <guid>https://binarymist.io/blog/2015/04/25/web-server-log-management/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;As part of the ongoing work around preparing a Debian web server to host applications accessible from the WWW I performed some research, analysis, made decisions along the way and implemented a first stage logging strategy. I’ve done similar set-ups many times before, but thought it worth sharing my experience for all to learn something from it and/or provide input, recommendations, corrections to the process so we all get to improve.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Keeping Your Linux Server/s In Time With Your Router</title>
      <link>https://binarymist.io/blog/2015/03/28/keeping-your-linux-server/s-in-time-with-your-router/</link>
      <pubDate>Sat, 28 Mar 2015 00:00:00 +1300</pubDate>
      
      <guid>https://binarymist.io/blog/2015/03/28/keeping-your-linux-server/s-in-time-with-your-router/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;With this set-up, we’ve got one-to-many Linux servers in a network that all want to be synced with the same up-stream Network Time Protocol (NTP) server/s that your router (or what ever server you choose to be your NTP authority) uses.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GnuPG Key-Pair with Sub-Keys</title>
      <link>https://binarymist.io/blog/2015/01/31/gnupg-key-pair-with-sub-keys/</link>
      <pubDate>Sat, 31 Jan 2015 00:00:00 +1300</pubDate>
      
      <guid>https://binarymist.io/blog/2015/01/31/gnupg-key-pair-with-sub-keys/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;There are quite a few other posts on this topic, but my set-up hasn’t been exactly the same as any I found, so I found myself using quite a few resources to achieve exactly what I wanted.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Installation and Hardening of Debian Web Server</title>
      <link>https://binarymist.io/blog/2014/12/27/installation-and-hardening-of-debian-web-server/</link>
      <pubDate>Sat, 27 Dec 2014 00:00:00 +1300</pubDate>
      
      <guid>https://binarymist.io/blog/2014/12/27/installation-and-hardening-of-debian-web-server/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;These are the steps I took to set-up and harden a Debian web server before being placed into a DMZ and undergoing additional hardening before opening the port from the WWW to it. Most of the steps below are fairly simple to do, and in doing so, remove a good portion of the low hanging fruit for nasty entities wanting to gain a foot-hold on your server-&amp;gt;network.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Node.js Asynchronicity and Callback Nesting</title>
      <link>https://binarymist.io/blog/2014/07/26/node.js-asynchronicity-and-callback-nesting/</link>
      <pubDate>Sat, 26 Jul 2014 00:00:00 +1200</pubDate>
      
      <guid>https://binarymist.io/blog/2014/07/26/node.js-asynchronicity-and-callback-nesting/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;AKA callback hell, temple of doom, often the functions that are nested are anonymous and often they are implicit closures. When it comes to asynchronicity in JavaScript, callbacks are our bread and butter. In saying that, often the best way to use them is by abstracting them behind more elegant APIs.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Exploring JavaScript Prototypes</title>
      <link>https://binarymist.io/blog/2014/06/28/exploring-javascript-prototypes/</link>
      <pubDate>Sat, 28 Jun 2014 00:00:00 +1200</pubDate>
      
      <guid>https://binarymist.io/blog/2014/06/28/exploring-javascript-prototypes/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;My intention with this post is to arm our developers with enough information around JavaScript prototypes to know when they are the right tool for the job as opposed to other constructs when considering how to create polymorphic JavaScript that’s performant and easy to maintain.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Exploring JavaScript Closures</title>
      <link>https://binarymist.io/blog/2014/05/31/exploring-javascript-closures/</link>
      <pubDate>Sat, 31 May 2014 00:00:00 +1200</pubDate>
      
      <guid>https://binarymist.io/blog/2014/05/31/exploring-javascript-closures/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;Now establishing the formal definition has been quite an interesting journey, with quite a few sources not quite getting it right. Although the ES3 spec talks about closure, there is no formal definition of what it actually is. The ES5 spec on the other hand does discuss what closure is in two distinct locations.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Up and Running with Kali Linux and Friends</title>
      <link>https://binarymist.io/blog/2014/03/29/up-and-running-with-kali-linux-and-friends/</link>
      <pubDate>Sat, 29 Mar 2014 00:00:00 +1300</pubDate>
      
      <guid>https://binarymist.io/blog/2014/03/29/up-and-running-with-kali-linux-and-friends/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;In this article I’ll go over getting Kali Linux installed and set-up. I’ll go over a few of the packages in a low level of detail (due to the share number of them) that come out of the box. On top of that I’ll also go over a few programmes I like to install separately. In a subsequent article I’d like to continue with additional programmes that come with Kali Linux as there are just to many to cover in one go.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Automating Specification by Example for .NET Web Applications</title>
      <link>https://binarymist.io/blog/2014/02/22/automating-specification-by-example-for-.net-web-applications/</link>
      <pubDate>Sat, 22 Feb 2014 00:00:00 +1300</pubDate>
      
      <guid>https://binarymist.io/blog/2014/02/22/automating-specification-by-example-for-.net-web-applications/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;It’s my intention that the following details will help you create a system that automates “Specification by Example”.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Essentials for Creating and Maintaining a High Performance Development Team</title>
      <link>https://binarymist.io/blog/2014/01/25/essentials-for-creating-and-maintaining-a-high-performance-development-team/</link>
      <pubDate>Sat, 25 Jan 2014 00:00:00 +1300</pubDate>
      
      <guid>https://binarymist.io/blog/2014/01/25/essentials-for-creating-and-maintaining-a-high-performance-development-team/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;What I see a lot of, is organisations hiring code monkeys rather than professionals.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Evaluation of AngularJS, EmberJS, BackboneJS &#43; MarionetteJS</title>
      <link>https://binarymist.io/blog/2013/12/28/evaluation-of-angularjs-emberjs-backbonejs-marionettejs/</link>
      <pubDate>Sat, 28 Dec 2013 00:00:00 +1300</pubDate>
      
      <guid>https://binarymist.io/blog/2013/12/28/evaluation-of-angularjs-emberjs-backbonejs-marionettejs/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;Recently I’ve undertaken the task of reviewing some JavaScript MV* frameworks to help organise/structure the client side code within an application I’m currently working on. This is about the third time I’ve done this. Each time has been for a different type of application with completely different requirements, frameworks and libraries to consider. Unlike Angular and Ember, Backbone is a small library. Marionette adds quite a lot of extra functionality and provides some nice abstractions on top . All mentioned frameworks/libraries are free and open source.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Evaluation of dot Net Mocking libraries</title>
      <link>https://binarymist.io/blog/2013/12/14/evaluation-of-dot-net-mocking-libraries/</link>
      <pubDate>Sat, 14 Dec 2013 00:00:00 +1300</pubDate>
      
      <guid>https://binarymist.io/blog/2013/12/14/evaluation-of-dot-net-mocking-libraries/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;I’ve recently undertaken another round of evaluating .NET mocking (fake/substitute/dummy/stub/ or what ever you want to call them now) libraries. Interestingly the landscape has changed quite a bit since last time I went through this exercise, which was about two years ago. The outcome of the previous investigation is at the bottom of this post.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Up and Running with Sass (scss) and Less in Visual Studio</title>
      <link>https://binarymist.io/blog/2013/11/26/up-and-running-with-sass-scss-and-less-in-visual-studio/</link>
      <pubDate>Tue, 26 Nov 2013 00:00:00 +1300</pubDate>
      
      <guid>https://binarymist.io/blog/2013/11/26/up-and-running-with-sass-scss-and-less-in-visual-studio/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;I recently evaluated the support for the top two CSS preprocessors (Sass and Less) for the environment my client team and myself are currently constrained to (Visual Studio 2012).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Up and Running with Express on Node.js, and friends</title>
      <link>https://binarymist.io/blog/2013/07/27/up-and-running-with-express-on-node.js-and-friends/</link>
      <pubDate>Sat, 27 Jul 2013 00:00:00 +1200</pubDate>
      
      <guid>https://binarymist.io/blog/2013/07/27/up-and-running-with-express-on-node.js-and-friends/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;This is a result of a lot of trial and error, reading, notes taken, advice from more knowledgeable people than myself over a period of a few months in my spare time. This is the basis of a web site I’m writing for a new business endeavour.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>JavaScript Object Creation Patterns</title>
      <link>https://binarymist.io/blog/2013/07/06/javascript-object-creation-patterns/</link>
      <pubDate>Sat, 06 Jul 2013 00:00:00 +1200</pubDate>
      
      <guid>https://binarymist.io/blog/2013/07/06/javascript-object-creation-patterns/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;What are the differences in creating an object by way of simple function invocation, vs using a constructor vs creating an object using the object literal notation vs function application?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Reassembly of the Eee PC 901</title>
      <link>https://binarymist.io/blog/2013/06/08/reassembly-of-the-eee-pc-901/</link>
      <pubDate>Sat, 08 Jun 2013 00:00:00 +1200</pubDate>
      
      <guid>https://binarymist.io/blog/2013/06/08/reassembly-of-the-eee-pc-901/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;This is a follow on from “Upgrade Linux Eee PC 901 4GB SSD“&lt;/p&gt;

&lt;p&gt;As usual, this is just the previous section but in reverse. Hopefully you won’t have any screws left when it’s back together.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Upgrade Linux Eee PC 901 4GB SSD</title>
      <link>https://binarymist.io/blog/2013/05/25/upgrade-linux-eee-pc-901-4gb-ssd/</link>
      <pubDate>Sat, 25 May 2013 00:00:00 +1200</pubDate>
      
      <guid>https://binarymist.io/blog/2013/05/25/upgrade-linux-eee-pc-901-4gb-ssd/</guid>
      <description>Redirects to legacy blog post.</description>
    </item>
    
    <item>
      <title>Software Engineer Interview Quick Question Set</title>
      <link>https://binarymist.io/blog/2013/05/11/software-engineer-interview-quick-question-set/</link>
      <pubDate>Sat, 11 May 2013 00:00:00 +1200</pubDate>
      
      <guid>https://binarymist.io/blog/2013/05/11/software-engineer-interview-quick-question-set/</guid>
      <description>Redirects to legacy blog post.</description>
    </item>
    
    <item>
      <title>Software Engineer Interview Process and Questions</title>
      <link>https://binarymist.io/blog/2013/04/27/software-engineer-interview-process-and-questions/</link>
      <pubDate>Sat, 27 Apr 2013 00:00:00 +1200</pubDate>
      
      <guid>https://binarymist.io/blog/2013/04/27/software-engineer-interview-process-and-questions/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;A short time ago, I was tasked with finding the right software engineer/s for the organisation I was working for. I settled on a process, a set of background questions,  a set of practical programming exercises and a set of verbal questions. Later on I cut the set of verbal questions down to a quicker set. In this post, I’ll be going over the process and the full set of verbal questions. In a subsequent post I’ll go over the quicker set.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Running Wireshark as non-root user</title>
      <link>https://binarymist.io/blog/2013/04/13/running-wireshark-as-non-root-user/</link>
      <pubDate>Sat, 13 Apr 2013 00:00:00 +1200</pubDate>
      
      <guid>https://binarymist.io/blog/2013/04/13/running-wireshark-as-non-root-user/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;This post is targeted at getting Wireshark running on Linux. If you’re a windows user, you can check out the Windows notes here.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Setup of Chromium, Burp Suite, Node.js to view HTTP on the wire</title>
      <link>https://binarymist.io/blog/2013/03/30/setup-of-chromium-burp-suite-node.js-to-view-http-on-the-wire/</link>
      <pubDate>Sat, 30 Mar 2013 00:00:00 +1300</pubDate>
      
      <guid>https://binarymist.io/blog/2013/03/30/setup-of-chromium-burp-suite-node.js-to-view-http-on-the-wire/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;As part of my Node.js development I really wanted to see what was going over the wire from chromium-browser to my Node.js web apps.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Erasing data from your drives</title>
      <link>https://binarymist.io/blog/2013/03/17/erasing-data-from-your-drives/</link>
      <pubDate>Sun, 17 Mar 2013 00:00:00 +1300</pubDate>
      
      <guid>https://binarymist.io/blog/2013/03/17/erasing-data-from-your-drives/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;In this post Kim discusses some tools and techniques to use when preparing your drives for decommissioning.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to Increase Software Developer Productivity</title>
      <link>https://binarymist.io/blog/2013/03/02/how-to-increase-software-developer-productivity/</link>
      <pubDate>Sat, 02 Mar 2013 00:00:00 +1300</pubDate>
      
      <guid>https://binarymist.io/blog/2013/03/02/how-to-increase-software-developer-productivity/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;Is your organisation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Wanting to get more out of your Software Developers?&lt;/li&gt;
&lt;li&gt;Wanting to increase RoI?&lt;/li&gt;
&lt;li&gt;Spending too much money fixing bugs?&lt;/li&gt;
&lt;li&gt;Development team not releasing business value fast enough?&lt;/li&gt;
&lt;li&gt;Maybe your a software developer and you want to lift your game to the next level?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If any of these points are of concern to you… read on.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Establishing your SSH Server’s Key Fingerprint</title>
      <link>https://binarymist.io/blog/2013/02/16/establishing-your-ssh-servers-key-fingerprint/</link>
      <pubDate>Sat, 16 Feb 2013 00:00:00 +1300</pubDate>
      
      <guid>https://binarymist.io/blog/2013/02/16/establishing-your-ssh-servers-key-fingerprint/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;When you connect to a remote host via SSH that you haven’t established a trust relationship with before, you’re going to be told that the authenticity of the host your attempting to connect to can’t be established.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Decent Console for Windows</title>
      <link>https://binarymist.io/blog/2013/01/19/a-decent-console-for-windows/</link>
      <pubDate>Sat, 19 Jan 2013 00:00:00 +1300</pubDate>
      
      <guid>https://binarymist.io/blog/2013/01/19/a-decent-console-for-windows/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;On *nix we’re kind of spoilt when it comes to the CLI experience. The console I use most in a GUI environment is the great terminator.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Generic Coding Standards and Guidelines</title>
      <link>https://binarymist.io/blog/2013/01/05/generic-coding-standards-and-guidelines/</link>
      <pubDate>Sat, 05 Jan 2013 00:00:00 +1300</pubDate>
      
      <guid>https://binarymist.io/blog/2013/01/05/generic-coding-standards-and-guidelines/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;When programming in a mixed-language environment, the naming conventions, formatting conventions, documentation conventions, and other conventions, can be optimised for overall consistency and readability. This may mean going against convention for one or more of the languages that’s part of the mix.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>JavaScript Coding Standards and Guidelines</title>
      <link>https://binarymist.io/blog/2012/12/19/javascript-coding-standards-and-guidelines/</link>
      <pubDate>Wed, 19 Dec 2012 00:00:00 +1300</pubDate>
      
      <guid>https://binarymist.io/blog/2012/12/19/javascript-coding-standards-and-guidelines/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;This is the current set of coding standards and guidelines I use when I’m coding in the JavaScript language. I thought it would be good to share so others could get use out of them also, and maybe start a discussion as to amendments / changes they see that could be useful?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Moving to TDD</title>
      <link>https://binarymist.io/blog/2012/12/01/moving-to-tdd/</link>
      <pubDate>Sat, 01 Dec 2012 00:00:00 +1300</pubDate>
      
      <guid>https://binarymist.io/blog/2012/12/01/moving-to-tdd/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;The first thing to clear up is that TDD is not primarily about testing, but rather it forces the developer to write code that is testable (the fact the code has tests written for it and running regularly is a side effect, albeit a very positive one).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sanitising User Input from Browser part 2</title>
      <link>https://binarymist.io/blog/2012/11/16/sanitising-user-input-from-browser-part-2/</link>
      <pubDate>Fri, 16 Nov 2012 00:00:00 +1300</pubDate>
      
      <guid>https://binarymist.io/blog/2012/11/16/sanitising-user-input-from-browser-part-2/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;Untrusted data (data entered by a user), should always be treated as though it contains attack code. This data should not be sent anywhere without taking the necessary steps to detect and neutralise the malicious code.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sanitising User Input from Browser part 1</title>
      <link>https://binarymist.io/blog/2012/11/04/sanitising-user-input-from-browser-part-1/</link>
      <pubDate>Sun, 04 Nov 2012 00:00:00 +1300</pubDate>
      
      <guid>https://binarymist.io/blog/2012/11/04/sanitising-user-input-from-browser-part-1/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;I was working on a web based project recently where there was no security thought about when designing, developing it. The following outlines my experience with retrofitting security. It’s my hope that someone will find it useful for their own implementation.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>JavaScript Properties</title>
      <link>https://binarymist.io/blog/2012/10/02/javascript-properties/</link>
      <pubDate>Tue, 02 Oct 2012 00:00:00 +1300</pubDate>
      
      <guid>https://binarymist.io/blog/2012/10/02/javascript-properties/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;In ECMAScript 5 we now have two distinct kinds of properties.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Data properties&lt;/li&gt;
&lt;li&gt;Accessor properties&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>C Sharp Dot NET Coding Standards and Guidelines</title>
      <link>https://binarymist.io/blog/2012/08/12/c-sharp-dot-net-coding-standards-and-guidelines/</link>
      <pubDate>Sun, 12 Aug 2012 00:00:00 +1200</pubDate>
      
      <guid>https://binarymist.io/blog/2012/08/12/c-sharp-dot-net-coding-standards-and-guidelines/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;This is the current set of coding standards and guidelines I use when I’m coding in the C#.NET language. I thought it would be good to share so others could get use out of them also, and maybe start a discussion as to amendments / changes they see that could be useful?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Guidance on Running Retrospectives</title>
      <link>https://binarymist.io/blog/2012/07/28/guidance-on-running-retrospectives/</link>
      <pubDate>Sat, 28 Jul 2012 00:00:00 +1200</pubDate>
      
      <guid>https://binarymist.io/blog/2012/07/28/guidance-on-running-retrospectives/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;Following is the five steps we use to run our Retrospectives. I’ve purposely made these as terse as possible, so it can be used as a check list as the retrospective progresses. Below the five steps I’ve added some extra info and tips.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Handful of Singletons in C Sharp</title>
      <link>https://binarymist.io/blog/2012/07/14/a-handful-of-singletons-in-c-sharp/</link>
      <pubDate>Sat, 14 Jul 2012 00:00:00 +1200</pubDate>
      
      <guid>https://binarymist.io/blog/2012/07/14/a-handful-of-singletons-in-c-sharp/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;Recently I was involved in an interview where I was queried on the Singleton Creational design pattern. I thought I’d share what I came up with. In order of preference from most to least used.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Extending, Currying and Monkey Patching part 3</title>
      <link>https://binarymist.io/blog/2012/05/27/extending-currying-and-monkey-patching-part-3/</link>
      <pubDate>Sun, 27 May 2012 00:00:00 +1200</pubDate>
      
      <guid>https://binarymist.io/blog/2012/05/27/extending-currying-and-monkey-patching-part-3/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;Monkey Patching, or sometimes known as Duck Punching.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Extending, Currying and Monkey Patching part 2</title>
      <link>https://binarymist.io/blog/2012/05/14/extending-currying-and-monkey-patching-part-2/</link>
      <pubDate>Mon, 14 May 2012 00:00:00 +1200</pubDate>
      
      <guid>https://binarymist.io/blog/2012/05/14/extending-currying-and-monkey-patching-part-2/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;Currying got it’s name from Haskell Curry, originally discovered by Moses Schönfinkel. The programming language Haskell named after Haskell Curry is a purely functional language. So the concept of Currying has it’s roots in functional programming. It seems that the concepts of Currying and Partial Function Application are often used interchangeably, although they are different. Lets try and shed some light on the confusion.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Extending, Currying and Monkey Patching part 1</title>
      <link>https://binarymist.io/blog/2012/04/29/extending-currying-and-monkey-patching-part-1/</link>
      <pubDate>Sun, 29 Apr 2012 00:00:00 +1200</pubDate>
      
      <guid>https://binarymist.io/blog/2012/04/29/extending-currying-and-monkey-patching-part-1/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;Extending: The JavaScript Function.prototype.call and Function.prototype.apply methods allow us to extend an object with additional functionality&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Supporting multiple sites with a single SSL Certificate</title>
      <link>https://binarymist.io/blog/2012/04/09/supporting-multiple-sites-with-a-single-ssl-certificate/</link>
      <pubDate>Mon, 09 Apr 2012 00:00:00 +1200</pubDate>
      
      <guid>https://binarymist.io/blog/2012/04/09/supporting-multiple-sites-with-a-single-ssl-certificate/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;There are a couple of ways I’m aware of you can support multiple web sites with a single SSL certificate using the same port&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to optimise your testing effort</title>
      <link>https://binarymist.io/blog/2012/03/24/how-to-optimise-your-testing-effort/</link>
      <pubDate>Sat, 24 Mar 2012 00:00:00 +1300</pubDate>
      
      <guid>https://binarymist.io/blog/2012/03/24/how-to-optimise-your-testing-effort/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;I recently wrote a post for the company I currently work for around the joys of doing TDD. What is your current approach to testing? How can you spend the little time you have on the most important areas? I thought I’d share some thoughts around where I see the optimal areas to invest your test effort.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Keeping your events thread safe</title>
      <link>https://binarymist.io/blog/2012/03/11/keeping-your-events-thread-safe/</link>
      <pubDate>Sun, 11 Mar 2012 00:00:00 +1300</pubDate>
      
      <guid>https://binarymist.io/blog/2012/03/11/keeping-your-events-thread-safe/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;An area I’ve noticed where engineers often forget to think about synchronization is when firing events. It seems to be a common misconception, that all that is needed to keep synchronisation, is to check the delegate (technically a &lt;code&gt;MulticastDelegate&lt;/code&gt;, or in architectural terms the publisher of the publish-subscribe pattern (more commonly known as the observer pattern)) for null.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Bare-metal Hypervisor Setup Evaluation</title>
      <link>https://binarymist.io/blog/2012/01/23/bare-metal-hypervisor-setup-evaluation/</link>
      <pubDate>Mon, 23 Jan 2012 00:00:00 +1300</pubDate>
      
      <guid>https://binarymist.io/blog/2012/01/23/bare-metal-hypervisor-setup-evaluation/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;Recently I had the opportunity for work, to carry out some research on what’s in the market in regards to bare-metal hypervisors. The following is the result of an in depth research and deployment project of the following bare-metal hyper-visors. This will enable us to trial the hypervisors out for performance, ease of setup, ease of administration, and ease of use.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>OpenSSH from Linux to Windows 7 via tunneled RDP</title>
      <link>https://binarymist.io/blog/2011/12/27/openssh-from-linux-to-windows-7-via-tunneled-rdp/</link>
      <pubDate>Tue, 27 Dec 2011 00:00:00 +1300</pubDate>
      
      <guid>https://binarymist.io/blog/2011/12/27/openssh-from-linux-to-windows-7-via-tunneled-rdp/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;In this article I’ll go over getting Kali Linux installed and set-up. I’ll go over a few of the packages in a low level of detail (due to the share number of them) that come out of the box. On top of that I’ll also go over a few programmes I like to install separately. In a subsequent article I’d like to continue with additional programmes that come with Kali Linux as there are just to many to cover in one go.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>JavaScript Reserved Words</title>
      <link>https://binarymist.io/blog/2011/12/19/javascript-reserved-words/</link>
      <pubDate>Mon, 19 Dec 2011 00:00:00 +1300</pubDate>
      
      <guid>https://binarymist.io/blog/2011/12/19/javascript-reserved-words/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;Funnily enough, most of these are not used in the language. They cannot be used to name variables or parameters. In saying that, I did some testing below and that statement’s not entirely accurate.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Centerim, Irssi, Alpine on Screen</title>
      <link>https://binarymist.io/blog/2011/11/27/centerim-irssi-alpine-on-screen/</link>
      <pubDate>Sun, 27 Nov 2011 00:00:00 +1300</pubDate>
      
      <guid>https://binarymist.io/blog/2011/11/27/centerim-irssi-alpine-on-screen/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;Detailing the setup/configuration of Centerim, Irssi, Alpine on the Linux shell session manager Screen.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Scoping and Hoisting in JavaScript</title>
      <link>https://binarymist.io/blog/2011/11/14/scoping-and-hoisting-in-javascript/</link>
      <pubDate>Mon, 14 Nov 2011 00:00:00 +1300</pubDate>
      
      <guid>https://binarymist.io/blog/2011/11/14/scoping-and-hoisting-in-javascript/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;In this article I’ll go over getting Kali Linux installed and set-up. I’ll go over a few of the packages in a low level of detail (due to the share number of them) that come out of the box. On top of that I’ll also go over a few programmes I like to install separately. In a subsequent article I’d like to continue with additional programmes that come with Kali Linux as there are just to many to cover in one go.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Employing Scrum</title>
      <link>https://binarymist.io/blog/2011/08/29/employing-scrum/</link>
      <pubDate>Mon, 29 Aug 2011 00:00:00 +1200</pubDate>
      
      <guid>https://binarymist.io/blog/2011/08/29/employing-scrum/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;In this post, it’s my intention to bring some clarity to the following question. Why does a business decide to employ Scrum as the chosen framework that their development team/s use for managing the business’s projects / work items?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Function Declarations vs Function Expressions</title>
      <link>https://binarymist.io/blog/2011/08/17/function-declarations-vs-function-expressions/</link>
      <pubDate>Wed, 17 Aug 2011 00:00:00 +1200</pubDate>
      
      <guid>https://binarymist.io/blog/2011/08/17/function-declarations-vs-function-expressions/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;This short post is in reaction to another post on JavaScript Function Declarations and Function Expressions. My concern was with the littering of the global object.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Quick walk through, of my UPS library</title>
      <link>https://binarymist.io/blog/2011/08/04/quick-walk-through-of-my-ups-library/</link>
      <pubDate>Thu, 04 Aug 2011 00:00:00 +1200</pubDate>
      
      <guid>https://binarymist.io/blog/2011/08/04/quick-walk-through-of-my-ups-library/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;Part three of a three part series.&lt;/p&gt;

&lt;p&gt;On setting up a UPS solution, to enable clean shutdown of vital network components. In this post, we’ll be reviewing the library that performs the shutting down of our servers.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Preparing APC Smart-UPS 1500 clients</title>
      <link>https://binarymist.io/blog/2011/07/26/preparing-apc-smart-ups-1500-clients/</link>
      <pubDate>Tue, 26 Jul 2011 00:00:00 +1200</pubDate>
      
      <guid>https://binarymist.io/blog/2011/07/26/preparing-apc-smart-ups-1500-clients/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;Part two of a three part series.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Preparing APC Smart-UPS 1500 for Critical Servers</title>
      <link>https://binarymist.io/blog/2011/06/16/preparing-apc-smart-ups-1500-for-critical-servers/</link>
      <pubDate>Thu, 16 Jun 2011 00:00:00 +1200</pubDate>
      
      <guid>https://binarymist.io/blog/2011/06/16/preparing-apc-smart-ups-1500-for-critical-servers/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;Part one of a three part series on Setting up a UPS solution, to enable clean shutdown of vital network components. This post is essentially about setting up a Smart-UPS and it’s NMC (Network Management Card),
as the project I embarked upon was a little large for a single post.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using PSCredentials</title>
      <link>https://binarymist.io/blog/2011/06/02/using-pscredentials/</link>
      <pubDate>Thu, 02 Jun 2011 00:00:00 +1200</pubDate>
      
      <guid>https://binarymist.io/blog/2011/06/02/using-pscredentials/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;I’ve been working on a small project that shuts down machines attached by network and of course power feed to an APC Smart-UPS. The code that was shutting down the guests required authentication to be passed to the receiving services.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>rsync over SSH from Linux workstation to FreeNAS</title>
      <link>https://binarymist.io/blog/2011/03/06/rsync-over-ssh-from-linux-workstation-to-freenas/</link>
      <pubDate>Sun, 06 Mar 2011 00:00:00 +1300</pubDate>
      
      <guid>https://binarymist.io/blog/2011/03/06/rsync-over-ssh-from-linux-workstation-to-freenas/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;I’ve been intending for quite some time to setup an automated or at least a thoughtless one click backup procedure from my family members PC’s to a file server. Now if you put files directories in the place where we are going to rsync to, and run the command we’re going to setup, those new files directories will be deleted.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Quick technology mash-up</title>
      <link>https://binarymist.io/blog/2011/01/30/quick-technology-mash-up/</link>
      <pubDate>Sun, 30 Jan 2011 00:00:00 +1300</pubDate>
      
      <guid>https://binarymist.io/blog/2011/01/30/quick-technology-mash-up/</guid>
      <description>Redirects to legacy blog post.</description>
    </item>
    
    <item>
      <title>Garbage Collection in dot NET 4.0</title>
      <link>https://binarymist.io/blog/2010/10/17/garbage-collection-in-dot-net-4.0/</link>
      <pubDate>Sun, 17 Oct 2010 00:00:00 +1300</pubDate>
      
      <guid>https://binarymist.io/blog/2010/10/17/garbage-collection-in-dot-net-4.0/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;Coverage on what&amp;rsquo;s new in the .NET 4.0 garbage collector.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LSP, DbC and dot NET’s support part 2</title>
      <link>https://binarymist.io/blog/2010/10/12/lsp-dbc-and-dot-nets-support-part-2/</link>
      <pubDate>Tue, 12 Oct 2010 00:00:00 +1300</pubDate>
      
      <guid>https://binarymist.io/blog/2010/10/12/lsp-dbc-and-dot-nets-support-part-2/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;Part two.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LSP, DbC and dot NET’s support, part 1</title>
      <link>https://binarymist.io/blog/2010/10/11/lsp-dbc-and-dot-nets-support-part-1/</link>
      <pubDate>Mon, 11 Oct 2010 00:00:00 +1300</pubDate>
      
      <guid>https://binarymist.io/blog/2010/10/11/lsp-dbc-and-dot-nets-support-part-1/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;Part one.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Discussion on Class Construction Techniques</title>
      <link>https://binarymist.io/blog/2010/10/10/discussion-on-class-construction-techniques/</link>
      <pubDate>Sun, 10 Oct 2010 00:00:00 +1300</pubDate>
      
      <guid>https://binarymist.io/blog/2010/10/10/discussion-on-class-construction-techniques/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;I had a discussion with some work colleges a short while ago, around a couple of different techniques of constructing a class object. The two approaches involved in the discussion where&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Metadata Exchange options for WCF</title>
      <link>https://binarymist.io/blog/2010/09/05/metadata-exchange-options-for-wcf/</link>
      <pubDate>Sun, 05 Sep 2010 00:00:00 +1200</pubDate>
      
      <guid>https://binarymist.io/blog/2010/09/05/metadata-exchange-options-for-wcf/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;There are two options for publishing metadata from a WCF service. By default, the services metadata is not published. In order to make the services information about itself public, you must do either of the following.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Installation of SSH on 64bit Windows 7 to tunnel RDP</title>
      <link>https://binarymist.io/blog/2010/08/26/installation-of-ssh-on-64bit-windows-7-to-tunnel-rdp/</link>
      <pubDate>Thu, 26 Aug 2010 00:00:00 +1200</pubDate>
      
      <guid>https://binarymist.io/blog/2010/08/26/installation-of-ssh-on-64bit-windows-7-to-tunnel-rdp/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;This post covers two scenarios.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Message Inspection in WCF</title>
      <link>https://binarymist.io/blog/2010/06/14/message-inspection-in-wcf/</link>
      <pubDate>Mon, 14 Jun 2010 00:00:00 +1200</pubDate>
      
      <guid>https://binarymist.io/blog/2010/06/14/message-inspection-in-wcf/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;Message Inspectors can be a very usefull tool in diagnosing problems between WCF services and clients. The messages that are transferred between clients/services can be intercepted and operations performed on them. We’ve used this at work in conjunction with a tool called SaopUI to capture the SOAP messages and fire them at our service. This can be usefull for load testing, concurrency testing scenarios amongst others.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Duplex communication and callbacks in WCF</title>
      <link>https://binarymist.io/blog/2010/05/23/duplex-communication-and-callbacks-in-wcf/</link>
      <pubDate>Sun, 23 May 2010 00:00:00 +1200</pubDate>
      
      <guid>https://binarymist.io/blog/2010/05/23/duplex-communication-and-callbacks-in-wcf/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;I was reading in the book Enterprise Integration Patterns that my dev manager bought for the team, on the Message Endpoint pattern on the way home from work a few days ago.&lt;/p&gt;

&lt;p&gt;“A Message Endpoint can be used to send messages or receive them, but one instance does not do both” From my experience, this wasn’t necessarily true. So I decided to confirm my suspicion.
The following is a mix of what I read and tested out.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Setting up a NFS share in FreeNAS</title>
      <link>https://binarymist.io/blog/2010/05/16/setting-up-a-nfs-share-in-freenas/</link>
      <pubDate>Sun, 16 May 2010 00:00:00 +1200</pubDate>
      
      <guid>https://binarymist.io/blog/2010/05/16/setting-up-a-nfs-share-in-freenas/</guid>
      <description>Redirects to legacy blog post.</description>
    </item>
    
    <item>
      <title>Logical vs Physical Addresses in WCF</title>
      <link>https://binarymist.io/blog/2010/04/18/logical-vs-physical-addresses-in-wcf/</link>
      <pubDate>Sun, 18 Apr 2010 00:00:00 +1200</pubDate>
      
      <guid>https://binarymist.io/blog/2010/04/18/logical-vs-physical-addresses-in-wcf/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;In this example, I share a listenUri between two endpoints.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A few steps to secure a FreeNAS server</title>
      <link>https://binarymist.io/blog/2010/04/06/a-few-steps-to-secure-a-freenas-server/</link>
      <pubDate>Tue, 06 Apr 2010 00:00:00 +1200</pubDate>
      
      <guid>https://binarymist.io/blog/2010/04/06/a-few-steps-to-secure-a-freenas-server/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;Change the default password in System|General|Password.&lt;/p&gt;

&lt;p&gt;Setup key pair authentication for SSH and secure FreeNAS.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Built-in MSMQ Bindings</title>
      <link>https://binarymist.io/blog/2010/04/05/built-in-msmq-bindings/</link>
      <pubDate>Mon, 05 Apr 2010 00:00:00 +1200</pubDate>
      
      <guid>https://binarymist.io/blog/2010/04/05/built-in-msmq-bindings/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;NetMsmqBinding&lt;/code&gt; only works if you have WCF on both sides of the Queue-to-Queue transfer. &lt;code&gt;MsmqIntegrationBinding&lt;/code&gt; is targeted toward existing MSMQ applications that use COM, native C++ APIs or the types defined in the &lt;code&gt;System.Messaging&lt;/code&gt; namespace (as stated by MSDN).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Adding disks, CIFS/SMB shares to FreeNAS</title>
      <link>https://binarymist.io/blog/2010/03/27/adding-disks-cifs/smb-shares-to-freenas/</link>
      <pubDate>Sat, 27 Mar 2010 00:00:00 +1300</pubDate>
      
      <guid>https://binarymist.io/blog/2010/03/27/adding-disks-cifs/smb-shares-to-freenas/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;What I did, was add a disk at a time (one each week, and stressed it for the entire week). This way the wear on the disk should be staggered and we are less likely to have all drives fail at the same time. Once I’d physically added all disks (ended up adding 4 x WD7500AACS for now).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Keeping Encapsulation on ones mind</title>
      <link>https://binarymist.io/blog/2009/12/24/keeping-encapsulation-on-ones-mind/</link>
      <pubDate>Thu, 24 Dec 2009 00:00:00 +1300</pubDate>
      
      <guid>https://binarymist.io/blog/2009/12/24/keeping-encapsulation-on-ones-mind/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;Anytime you find yourself looking at a class’s implementation to figure out how to use the class, you’re not programming to the interface; you’re programming through the interface to the implementation&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>