<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on BinaryMist</title>
    <link>https://binarymist.io/post/</link>
    <description>Recent content in Posts on BinaryMist</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017 BinaryMist Ltd &lt;/br&gt;Following images are used under Creative Commons: [1](https://www.flickr.com/photos/ravefinity/12180959354/in/photostream/) &lt;/br&gt;[Privacy](/publication/privacy/)</copyright>
    <lastBuildDate>Sun, 01 Jan 2017 00:00:00 +1300</lastBuildDate>
    <atom:link href="/post/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>The Cloud Shared Responsibility Model</title>
      <link>https://binarymist.io/blog/2017/10/02/the-cloud-shared-responsibility-model/</link>
      <pubDate>Mon, 02 Oct 2017 00:00:00 +1300</pubDate>
      
      <guid>https://binarymist.io/blog/2017/10/02/the-cloud-shared-responsibility-model/</guid>
      <description>

&lt;h2 id=&#34;risks&#34;&gt;Risks&lt;/h2&gt;

&lt;p&gt;The shared responsibility model is one that many have not grasped or understood well. Let’s look at the responsibilities of the parties.&lt;/p&gt;

&lt;h4 id=&#34;csp-responsibility&#34;&gt;CSP Responsibility&lt;/h4&gt;

&lt;p&gt;The CSP takes care of the infrastructure, not the customer specific configuration of it, and Due to the shear scale of what they are building, are able to build in good security controls, in contrast to the average system administrator, which just does not have the resources or ability to focus on security to the same degree.&lt;/p&gt;

&lt;p&gt;Due to the share scale, the average CSP has a concentrated group of good security professionals vs a business who’s core business is often not closely related to security. So CSPs do provide good security mechanisms, but the customer has to know and care enough to use them.&lt;/p&gt;

&lt;p&gt;CSPs creating the infrastructural architecture, building the components, frameworks, hardware, platform software in most cases are taking security seriously and doing a reasonable job.&lt;/p&gt;

&lt;h4 id=&#34;csp-customer-responsibility&#34;&gt;CSP Customer Responsibility&lt;/h4&gt;

&lt;p&gt;CSP customers are expected to take care of their own security in terms of:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Their people working with the technology&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://f1.holisticinfosecforwebdevelopers.com/chap06.html#web-applications&#34; target=&#34;_blank&#34;&gt;Application security&lt;/a&gt;, ultimately leading back to shortcomings in people: Lack of skills, experience, engagement, etc.&lt;/li&gt;
&lt;li&gt;Configuring the infrastructure and/or platform components: Again leading back to people defects&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;but all to often the customers responsibility is neglected, which renders The Cloud no better for the customer in terms of security.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The primary problem with The Cloud is: Customers have the misconception that someone else is taking care of all their security. That is not how the shared responsibility model works though. Yes the CSP is probably taking care of the infrastructure security, but other forms of security such as I just listed above, are even more important than before the shift to The Cloud, this is because these items are now the lowest hanging fruit for the attacker.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The following are a set of questions (verbatim) I have been asked recently, and that I hear similar versions of frequently:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;As a software engineer, do I really care about physical network security and network logging?&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Surely “as a software engineer”, I can just use TLS and that is the end of it?&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Well if the machine is compromised, then we give up on security, we aren’t responsible for the network&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;What is the difference between application security and network security? Aren’t they just two aspects of the same thing?&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;If I have implemented TLS for communication, have I fixed all of the network security problems?&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;countermeasures&#34;&gt;Countermeasures&lt;/h2&gt;

&lt;p&gt;The following responsibilities are those that you need to have a good understanding of in order to establish a good level of security when operating in The Cloud.&lt;/p&gt;

&lt;h4 id=&#34;csp-responsibility-1&#34;&gt;CSP Responsibility&lt;/h4&gt;

&lt;p&gt;There is not a lot you can do about this, just be aware of what you are buying into before you do so. &lt;a href=&#34;https://aws.amazon.com/compliance/shared-responsibility-model/&#34; target=&#34;_blank&#34;&gt;AWS for example&lt;/a&gt; states: &amp;ldquo;&lt;em&gt;Customers retain control of what security they choose to implement to protect their own content, platform, applications, systems and networks, &lt;strong&gt;no differently than they would for applications in an on-site&lt;/strong&gt; datacenter.&lt;/em&gt;&amp;ldquo;&lt;/p&gt;

&lt;h4 id=&#34;csp-customer-responsibility-1&#34;&gt;CSP Customer Responsibility&lt;/h4&gt;

&lt;p&gt;If you leverage The Cloud, Make sure the following aspects of security are all at an excellent level:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;People security: Discussed in Fascicle 0 under the People chapter&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://f1.holisticinfosecforwebdevelopers.com/chap06.html#web-applications&#34; target=&#34;_blank&#34;&gt;Application security&lt;/a&gt;: Discussed in the Web Applications chapter. The move to application security was also &lt;a href=&#34;http://f1.holisticinfosecforwebdevelopers.com/chap03.html#vps-countermeasures-docker-application-security&#34; target=&#34;_blank&#34;&gt;discussed&lt;/a&gt; in the VPS chapter as a response of using Docker containers&lt;/li&gt;
&lt;li&gt;Configuring the infrastructure and/or platform components: Usually CSP specific, but I cover some aspects in this chapter&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The following is in response to the set of frequently asked questions under the &lt;a href=&#34;#shared-responsibility-model-risks&#34;&gt;risks subsection&lt;/a&gt; of CSP Customer Responsibility:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;(Q)&lt;/strong&gt;: &lt;em&gt;As a software engineer, do I really care about physical network security and network logging?&lt;/em&gt;&lt;br /&gt;
&lt;strong&gt;(A)&lt;/strong&gt;: In the past, many aspects of &lt;a href=&#34;http://f1.holisticinfosecforwebdevelopers.com/chap04.html#network&#34; target=&#34;_blank&#34;&gt;network security&lt;/a&gt; were the responsibility of the Network Administrators, with the move to The Cloud, this has to large degree changed. The networks established (intentionally or not) between the components we are leveraging and creating in The Cloud are a result of Infrastructure and Configuration Management, often (and rightly so) exp3ressed as code. Infrastructure as Code (IaC). As discussed in the &lt;a href=&#34;http://f1.holisticinfosecforwebdevelopers.com/chap04.html#leanpub-auto-ssm-identify-risks-1&#34; target=&#34;_blank&#34;&gt;Network Security&lt;/a&gt; subsection, this is now the responsibility of the Software Engineer&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;(Q)&lt;/strong&gt;: &lt;em&gt;Surely “as a software engineer”, I can just use TLS and that is the end of it?&lt;/em&gt;&lt;br /&gt;
&lt;strong&gt;(A)&lt;/strong&gt;: TLS is one very small area of network security. Its implementation as HTTPS and the PKI model is effectively &lt;a href=&#34;http://f1.holisticinfosecforwebdevelopers.com/chap04.html#network-identify-risks-tls-downgrade&#34; target=&#34;_blank&#34;&gt;broken&lt;/a&gt;. If TLS is your only saviour, putting it bluntly, you are without hope. The &lt;a href=&#34;http://f1.holisticinfosecforwebdevelopers.com/chap04.html#network&#34; target=&#34;_blank&#34;&gt;Network Chapter&lt;/a&gt; covers the tip of the network security ice berg, network security is a huge topic, and one that has many books written along with other resources that provide more in-depth coverage than I can provide as part of a holistic view of security for Software Engineers. Software Engineers must come to grips with the fact that they need to implement defence in depth&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;(Q)&lt;/strong&gt;: &lt;em&gt;Well if the machine is compromised, then we give up on security, we aren’t responsible for the network&lt;/em&gt;&lt;br /&gt;
&lt;strong&gt;(A)&lt;/strong&gt;: For this statement, please refer to the &lt;a href=&#34;http://f1.holisticinfosecforwebdevelopers.com/chap03.html#vps&#34; target=&#34;_blank&#34;&gt;VPS&lt;/a&gt; chapter for your responsibilities as a Software Engineer in regards to “the machine”. In regards to “the network”, please refer to the &lt;a href=&#34;http://f1.holisticinfosecforwebdevelopers.com/chap04.html#leanpub-auto-ssm-identify-risks-1&#34; target=&#34;_blank&#34;&gt;Network Security&lt;/a&gt; subsection&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;(Q)&lt;/strong&gt;: &lt;em&gt;What is the difference between application security and network security? Aren’t they just two aspects of the same thing?&lt;/em&gt;&lt;br /&gt;
&lt;strong&gt;(A)&lt;/strong&gt;: No, for application security, see the &lt;a href=&#34;http://f1.holisticinfosecforwebdevelopers.com/chap06.html#web-applications&#34; target=&#34;_blank&#34;&gt;Web Applications&lt;/a&gt; chapter. For network security, see the &lt;a href=&#34;http://f1.holisticinfosecforwebdevelopers.com/chap04.html#network&#34; target=&#34;_blank&#34;&gt;Network&lt;/a&gt; chapter. Again, as Software Engineers, you are now responsible for all aspects of information security&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;(Q)&lt;/strong&gt;: &lt;em&gt;If I have implemented TLS for communication, have I fixed all of the network security problems?&lt;/em&gt;&lt;br /&gt;
&lt;strong&gt;(A)&lt;/strong&gt;: If you are still reading this, I’m pretty sure you know the answer, please share it with other Developers, Engineers as you receive the same questions&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Captcha Considerations</title>
      <link>https://binarymist.io/blog/2015/12/31/captcha-considerations/</link>
      <pubDate>Thu, 31 Dec 2015 00:00:00 +1300</pubDate>
      
      <guid>https://binarymist.io/blog/2015/12/31/captcha-considerations/</guid>
      <description>

&lt;h2 id=&#34;risks&#34;&gt;Risks&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://binarymist.io/img/post/2015/12/easy-verywidespread-easy-low.png&#34; alt=&#34;Exploiting Captcha&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Lack of captchas are a risk, but so are captchas themselves&amp;hellip;&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s look at the problem here? What are we trying to stop with captchas?&lt;/p&gt;

&lt;p&gt;Bots submitting. What ever it is, whether:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Advertising&lt;/li&gt;
&lt;li&gt;Creating an unfair advantage over real humans&lt;/li&gt;
&lt;li&gt;Link creation in attempt to increase SEO&lt;/li&gt;
&lt;li&gt;Malicious code insertion&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You are more than likely not interested in accepting it.&lt;/p&gt;

&lt;p&gt;What do we not want to block?&lt;/p&gt;

&lt;p&gt;People submitting genuinely innocent input. If a person is prepared to fill out a form manually, even if it is spam, then a person can view the submission and very quickly delete the validated, filtered and possibly sanitised message.&lt;/p&gt;

&lt;h2 id=&#34;countermeasures&#34;&gt;Countermeasures&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://binarymist.io/img/post/2015/12/preventionveryeasy.png&#34; alt=&#34;PreventionVERYEASY&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;types&#34;&gt;Types&lt;/h3&gt;

&lt;h4 id=&#34;text-recognition&#34;&gt;Text Recognition&lt;/h4&gt;

&lt;p&gt;recaptcha uses this technique. See below for details.&lt;/p&gt;

&lt;h4 id=&#34;image-recognition&#34;&gt;Image Recognition&lt;/h4&gt;

&lt;p&gt;Uses images which users have to perform certain operations on, like dragging them to another image. For example: &amp;ldquo;Please drag all cat images to the cat mat.&amp;rdquo;, or &amp;ldquo;Please select all images of things that dogs eat.&amp;rdquo; sweetcaptcha is an example of this type of captcha. This type completely rules out the visually impaired users.&lt;/p&gt;

&lt;h4 id=&#34;friend-recognition&#34;&gt;Friend Recognition&lt;/h4&gt;

&lt;p&gt;Pioneered by&amp;hellip; you guessed it. Facebook. This type of captcha focusses on human hackers, the idea being that they will not know who your friends are.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;&lt;em&gt;Instead of showing you a traditional captcha on Facebook, one of the ways we may help verify your identity is through&lt;/em&gt; &lt;a href=&#34;https://m.facebook.com/story.php?story_fbid=191422450875446&amp;amp;id=121897834504447&#34; target=&#34;_blank&#34;&gt;&lt;em&gt;social authentication&lt;/em&gt;&lt;/a&gt;. &lt;em&gt;We will show you a few pictures of your friends and ask you to name the person in those photos. Hackers halfway across the world might know your password, but they don&amp;rsquo;t know who your friends are.&lt;/em&gt;&amp;ldquo;&lt;/p&gt;

&lt;p&gt;I disagree with that statement. A determined hacker will usually be able to find out who your friends are. There is another problem, do you know who all of your friends are? Every acquaintance? I am terrible with names and so are many people. This is supposed to be used to authenticate you. So you have to be able to answer the questions before you can log in.&lt;/p&gt;

&lt;h4 id=&#34;logic-questions&#34;&gt;Logic Questions&lt;/h4&gt;

&lt;p&gt;This is what textcaptcha uses. Simple logic questions designed for the intelligence of a seven year old child. These are more accessible than image and textual image recognition, but they can take longer than image recognition to answer, unless the user is visually impared. The questions are usually language specific also, usually targeting the English language.&lt;/p&gt;

&lt;h4 id=&#34;user-interaction&#34;&gt;User Interaction&lt;/h4&gt;

&lt;p&gt;This is a little like image recognition. Users have to perform actions that virtual intelligence can not work out&amp;hellip; yet. Like dragging a slider a certain number of notches. If an offering gets popular, creating some code to perform the action may not be that hard and would definitely be worth the effort for bot creators. This is obviously not going to work for the visually impaired or for people with handicapped motor skills.&lt;/p&gt;

&lt;p&gt;In NPM land, as usual there are many options to choose from. The following were the offerings I evaluated. None of which really felt like a good fit:&lt;/p&gt;

&lt;h3 id=&#34;offerings&#34;&gt;Offerings&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;total-captcha. Depends on node-canvas. Have to install cairo first, but why? No explanation. Very little of anything here. Move on. How does this work? Do not know. What type is it? Presume text recognition.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/easy-captcha&#34; target=&#34;_blank&#34;&gt;easy-captcha&lt;/a&gt; is a text recognition offering generating images&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/simple-captcha&#34; target=&#34;_blank&#34;&gt;simple-captcha&lt;/a&gt; looks like another text recognition offering. I really do not want to be writing image files to my server.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/node-captcha&#34; target=&#34;_blank&#34;&gt;node-captcha&lt;/a&gt; Depends on canvas. By the look of the package this is another text recognition in a generated image.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/re-captcha&#34; target=&#34;_blank&#34;&gt;re-captcha&lt;/a&gt; was one of the first captcha offerings, created at the Carnegie Mellon University by Luis von Ahn, Ben Maurer, Colin McMillen, David Abraham and Manuel Blum who invented the term captcha. Google later acquired it in September 2009. recaptcha is a text recognition captcha that uses scanned text that optical character recognition (OCR) technology has failed to interpret, which has the added benefit of &lt;a href=&#34;https://en.wikipedia.org/wiki/ReCAPTCHA&#34; target=&#34;_blank&#34;&gt;helping to digitise text&lt;/a&gt; for The New York Times and Google Books. &lt;img src=&#34;https://binarymist.io/img/post/2015/12/recaptcha.jpg&#34; alt=&#34;recaptcha&#34; /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/sweetcaptcha&#34; target=&#34;_blank&#34;&gt;sweetcaptcha&lt;/a&gt; uses the sweetcaptcha cloud service of which you must abide by their terms and conditions, requires another node package, and requires some integration work. sweetcaptcha is an image recognition type of captcha. &lt;img src=&#34;https://binarymist.io/img/post/2015/12/sweetcaptcha.jpg&#34; alt=&#34;sweetcaptcha&#34; /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://textcaptcha.com/&#34; target=&#34;_blank&#34;&gt;textcaptcha&lt;/a&gt; is a logic question captcha relying on an external service for the questions and md5 hashes of the correct lower cased answers. This looks pretty simple to set up, but again expects your users to use their brain on things they should not have to.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After some additional research I worked out why the above types and offerings didn&amp;rsquo;t feel like a good fit. It pretty much came down to user experience.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Why should genuine users/customers of your web application be disadvantaged by having to jump through hoops because you have decided you want to stop bots spamming you? Would it not make more sense to make life harder for the bots rather than for your genuine users?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Some other considerations I had. Ideally I wanted a simple solution requiring few or ideally no external dependencies, no JavaScript required, no reliance on the browser or anything out of my control, no images and it definitely should not cost any money.&lt;/p&gt;

&lt;h3 id=&#34;alternative-approaches&#34;&gt;Alternative Approaches&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Services like Disqus can be good for commenting. Obviously the comments are all stored somewhere in the cloud out of your control and this is an external dependency. For simple text input, this is probably not what you want. Similar services such as all the social media authentication services can take things a bit too far I think. They remove freedoms from your users. Why should your users be disadvantaged by leaving a comment or posting a message on your web application? &lt;a href=&#34;http://perltricks.com/article/104/2014/7/29/Your-users-deserve-better-than-Disqus&#34; target=&#34;_blank&#34;&gt;Disqus tracks users activities&lt;/a&gt; from hosting website to website whether you have an account, are logged in or not. &lt;a href=&#34;https://en.wikipedia.org/wiki/Disqus#Criticism_and_privacy_concerns&#34; target=&#34;_blank&#34;&gt;Any information they collect&lt;/a&gt; such as IP address, web browser details, installed add-ons, referring pages and exit links may be disclosed to any third party. When this data is aggregated it is useful for de-anonymising users. If users choose to block the Disqus script, the comments are not visible. Disqus has also published its registered users entire commenting histories, along with a list of connected blogs and services on publicly viewable user profile pages. Disqus also engage in add targeting and blackhat SEO techniques from the websites in which their script is installed.&lt;/li&gt;
&lt;li&gt;Services like Akismet and Mollom which take user input and analyse for spam signatures. Mollom sometimes presents a captcha if it is unsure. These two services learn from their mistakes if they mark something as spam and you unmark it, but of course you are going to have to be watching for that. Matt Mullenweg created Akismet so that his mother could blog in safety. &amp;ldquo;&lt;em&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Akismet&#34; target=&#34;_blank&#34;&gt;His first attempt&lt;/a&gt; was a JavaScript plugin which modified the comment form and hid fields, but within hours of launching it, spammers downloaded it, figured out how it worked, and bypassed it. This is a common pitfall for anti-spam plugins: once they get traction&lt;/em&gt;&amp;rdquo;. My advice to this is not to use a common plugin, but to create something custom. I discuss this soon.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The above solutions are excellent targets for creating exploits that will have a large pay off due to the fact that so many websites are using them. There are exploits discovered for these services regularly.&lt;/p&gt;

&lt;h3 id=&#34;still-not-cutting-it-http-www-smashingmagazine-com-2011-03-in-search-of-the-perfect-captcha&#34;&gt;&lt;a href=&#34;http://www.smashingmagazine.com/2011/03/in-search-of-the-perfect-captcha/&#34; target=&#34;_blank&#34;&gt;Still not cutting it&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&amp;ldquo;&lt;em&gt;Given the fact that many clients count on conversions to make money, not receiving 3.2% of those conversions could put a dent in sales. Personally, I would rather sort through a few SPAM conversions instead of losing out on possible income.&lt;/em&gt;&amp;ldquo;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Casey Henry: &lt;a href=&#34;https://moz.com/blog/captchas-affect-on-conversion-rates&#34; target=&#34;_blank&#34;&gt;Captchas&amp;rsquo; Effect on Conversion Rates&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&amp;ldquo;&lt;em&gt;Spam is not the user’s problem; it is the problem of the business that is providing the website. It is arrogant and lazy to try and push the problem onto a website’s visitors.&lt;/em&gt;&amp;ldquo;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Tim Kadlec: &lt;a href=&#34;http://timkadlec.com/2011/01/death-to-captchas/&#34; target=&#34;_blank&#34;&gt;Death to Captchas&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;user-time-expenditure&#34;&gt;User Time Expenditure&lt;/h3&gt;

&lt;p&gt;Recording how long it takes from fetch to submit. This is another technique, in which the time is measured from fetch to submit. For example if the time span is under five seconds it is more than likely a bot, so handle the message accordingly.&lt;/p&gt;

&lt;h3 id=&#34;bot-pot&#34;&gt;Bot Pot&lt;/h3&gt;

&lt;p&gt;Spamming bots operating on custom mechanisms will in most cases just try, then move on. If you decide to use one of the common offerings from above, exploits will be more common, depending on how wide spread the offering is. This is one of the cases where going custom is a better option. Worse case is you get some spam and you can modify your technique, but you get to keep things simple, tailored to your web application, your users needs, no external dependencies and no monthly fees. This is also the simplest technique and requires very little work to implement.&lt;/p&gt;

&lt;h4 id=&#34;spam-bots&#34;&gt;Spam bots:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Love to populate form fields&lt;/li&gt;
&lt;li&gt;Usually ignore CSS. For example, if you have some &lt;a href=&#34;http://haacked.com/archive/2007/09/11/honeypot-captcha.aspx/&#34; target=&#34;_blank&#34;&gt;CSS that hides&lt;/a&gt; a form field and especially if the CSS is not inline on the same page, they will usually fail at realising that the field is not supposed to be visible.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So what we do is create a field that is not visible to humans and is supposed to be kept empty. On the server once the form is submitted, we check that it is still empty. If it is not, then we assume a bot has been at it.&lt;/p&gt;

&lt;p&gt;This is so simple, does not get in the way of your users, yet very effective at filtering bot spam.&lt;/p&gt;

&lt;h4 id=&#34;client-side&#34;&gt;Client side:&lt;/h4&gt;

&lt;h6 id=&#34;css&#34;&gt;CSS&lt;/h6&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;form .bot-pot {
   display: none;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;html&#34;&gt;HTML&lt;/h6&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;form&amp;gt;
   &amp;lt;!--...--&amp;gt;
   &amp;lt;div&amp;gt;
      &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;bot-pot&amp;quot; class=&amp;quot;bot-pot&amp;quot;&amp;gt;
   &amp;lt;/div&amp;gt;
   &amp;lt;!--...--&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;server-side&#34;&gt;Server side:&lt;/h4&gt;

&lt;p&gt;I show the validation code middle ware of the route on the following line of &lt;code&gt;routes/home.js&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;   app.post(&#39;/contact&#39;, validate(), contact);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The validation is performed on the following line of &lt;code&gt;routes/home.js&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;      fieldToValidate(&#39;bot-pot&#39;).maxLength(0)
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;routes-home-js&#34;&gt;&lt;code&gt;routes/home.js&lt;/code&gt;&lt;/h6&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var form = require(&#39;express-form&#39;);
var fieldToValidate = form.field;
//...

function home(req, res) {
   res.redirect(&#39;/&#39;);
}

function index(req, res) {
   res.render(&#39;home&#39;, { title: &#39;Home&#39;, id: &#39;home&#39;, brand: &#39;your brand&#39; });
}

function validate() {
   return form(
      // Bots love to populate everything.
      fieldToValidate(&#39;bot-pot&#39;).maxLength(0)
   );
}

function contact(req, res) {

   if(req.form.isValid)
      // We know the bot-pot is of zero length. So no bots.
   //...
}

module.exports = function (app) {
   app.get(&#39;/&#39;, index);
   app.get(&#39;/home&#39;, home);
   app.post(&#39;/contact&#39;, validate(), contact);
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So as you can see, a very simple solution. You could even consider combining the above two techniques.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Lack of Visibility in Web Applications</title>
      <link>https://binarymist.io/blog/2015/11/26/lack-of-visibility-in-web-applications/</link>
      <pubDate>Thu, 26 Nov 2015 00:00:00 +1300</pubDate>
      
      <guid>https://binarymist.io/blog/2015/11/26/lack-of-visibility-in-web-applications/</guid>
      <description>

&lt;h2 id=&#34;risks&#34;&gt;Risks&lt;/h2&gt;

&lt;p&gt;I see this as an indirect risk to the asset of web application ownership (That&amp;rsquo;s the assumption that you will always own your web application).&lt;/p&gt;

&lt;p&gt;Not being able to introspect your application at any given time or being able to know how the health status is, is not a comfortable place to be in and there is no reason you should be there.&lt;/p&gt;

&lt;h3 id=&#34;insufficient-logging-and-monitoring&#34;&gt;Insufficient Logging and Monitoring&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://binarymist.io/img/post/2015/11/average-widespread-veryeasy-moderate.png&#34; alt=&#34;average-widespread-veryeasy-moderate&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Can you tell at any point in time if someone or something is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Using your application in a way that it was not intended to be used&lt;/li&gt;
&lt;li&gt;Violating policy. For example circumventing client side input sanitisation.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;How easy is it for you to notice:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Poor performance and potential DoS?&lt;/li&gt;
&lt;li&gt;Abnormal application behaviour or unexpected logic threads&lt;/li&gt;
&lt;li&gt;Logic edge cases and blind spots that stake holders, Product Owners and Developers have missed?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;countermeasures&#34;&gt;Countermeasures&lt;/h2&gt;

&lt;p&gt;As Bruce Schneier said: &amp;ldquo;&lt;em&gt;Detection works where prevention fails and detection is of no use without response&lt;/em&gt;&amp;rdquo;. This leads us to application logging.&lt;/p&gt;

&lt;p&gt;With good visibility we should be able to see anticipated and unanticipated exploitation of vulnerabilities as they occur and also be able to go back and review the events.&lt;/p&gt;

&lt;h3 id=&#34;insufficient-logging&#34;&gt;Insufficient Logging&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://binarymist.io/img/post/2015/11/preventionaverage.png&#34; alt=&#34;PreventionAVERAGE&#34; /&gt;&lt;/p&gt;

&lt;p&gt;When it comes to logging in NodeJS, you can&amp;rsquo;t really go past winston. It has a lot of functionality and what it does not have is either provided by extensions, or you can create your own. It is fully featured, reliable and easy to configure like NLog in the .NET world.&lt;/p&gt;

&lt;p&gt;I also looked at &lt;code&gt;express-winston&lt;/code&gt;, but could not see why it needed to exist.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;package.json&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
   ...
   &amp;quot;dependencies&amp;quot;: {
      ...,
      &amp;quot;config&amp;quot;: &amp;quot;^1.15.0&amp;quot;,
      &amp;quot;express&amp;quot;: &amp;quot;^4.13.3&amp;quot;,
      &amp;quot;morgan&amp;quot;: &amp;quot;^1.6.1&amp;quot;,
      &amp;quot;//&amp;quot;: &amp;quot;nodemailer not strictly necessary for this example,&amp;quot;,
      &amp;quot;//&amp;quot;: &amp;quot;but used later under the node-config section.&amp;quot;,
      &amp;quot;nodemailer&amp;quot;: &amp;quot;^1.4.0&amp;quot;,
      &amp;quot;//&amp;quot;: &amp;quot;What we use for logging.&amp;quot;,
      &amp;quot;winston&amp;quot;: &amp;quot;^1.0.1&amp;quot;,
      &amp;quot;winston-email&amp;quot;: &amp;quot;0.0.10&amp;quot;,
      &amp;quot;winston-syslog-posix&amp;quot;: &amp;quot;^0.1.5&amp;quot;,
      ...
   }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://www.npmjs.com/package/winston-email&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;winston-email&lt;/code&gt;&lt;/a&gt; also depends on &lt;a href=&#34;https://www.npmjs.com/package/nodemailer&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;nodemailer&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;opening-udp-port&#34;&gt;Opening UDP port&lt;/h4&gt;

&lt;p&gt;with &lt;a href=&#34;https://www.npmjs.com/package/winston-syslog&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;winston-syslog&lt;/code&gt;&lt;/a&gt; seems to be what a lot of people are using. I think it may be due to the fact that &lt;code&gt;winston-syslog&lt;/code&gt; is the first package that works well for &lt;code&gt;winston&lt;/code&gt; and syslog.&lt;/p&gt;

&lt;p&gt;If going this route, you will need the following in your &lt;code&gt;/etc/rsyslog.conf&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ModLoad imudp
# Listen on all network addresses. This is the default.
$UDPServerAddress 0.0.0.0
# Listen on localhost.
$UDPServerAddress 127.0.0.1
$UDPServerRun 514
# Or the new style configuration.
Address &amp;lt;IP&amp;gt;
Port &amp;lt;port&amp;gt;
# Logging for your app.
local0.* /var/log/yourapp.log
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I Also looked at &lt;code&gt;winston-rsyslog2&lt;/code&gt; and &lt;code&gt;winston-syslogudp&lt;/code&gt;, but they did not measure up for me.&lt;/p&gt;

&lt;p&gt;If you do not need to push syslog events to another machine, then it does not make much sense to push through a local network interface when you can use your posix syscalls as they are faster and safer. The line &lt;code&gt;514/udp open|filtered syslog no-response&lt;/code&gt; below shows the open port.&lt;/p&gt;

&lt;h6 id=&#34;nmap-with-winston-syslog&#34;&gt;nmap with &lt;code&gt;winston-syslog&lt;/code&gt;&lt;/h6&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;root@kali:~# nmap -p514 -sU -sV &amp;lt;target IP&amp;gt; --reason

Starting Nmap 6.47 ( http://nmap.org )
Nmap scan report for kali (&amp;lt;target IP&amp;gt;)
Host is up, received arp-response (0.0015s latency).
PORT STATE SERVICE REASON VERSION
514/udp open|filtered syslog no-response
MAC Address: 34:25:C9:96:AC:E0 (My Computer)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;using-posix&#34;&gt;Using Posix&lt;/h4&gt;

&lt;p&gt;The &lt;a href=&#34;https://www.npmjs.com/package/winston-syslog-posix&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;winston-syslog-posix&lt;/code&gt;&lt;/a&gt; package was inspired by &lt;a href=&#34;http://tmont.com/blargh/2013/12/writing-to-the-syslog-with-winston&#34; target=&#34;_blank&#34;&gt;blargh&lt;/a&gt;. &lt;code&gt;winston-syslog-posix&lt;/code&gt; uses &lt;a href=&#34;https://www.npmjs.com/package/posix&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;node-posix&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If going this route, you will need the following in your &lt;code&gt;/etc/rsyslog.conf&lt;/code&gt; instead of the above:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Logging for your app.
local0.* /var/log/yourapp.log
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can see on the &lt;code&gt;514/udp closed syslog port-unreach&lt;/code&gt; line below that the syslog port is no longer open:&lt;/p&gt;

&lt;h6 id=&#34;nmap-with-winston-syslog-posix&#34;&gt;nmap with &lt;code&gt;winston-syslog-posix&lt;/code&gt;&lt;/h6&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;root@kali:~# nmap -p514 -sU -sV &amp;lt;target IP&amp;gt; --reason

Starting Nmap 6.47 ( http://nmap.org )
Nmap scan report for kali (&amp;lt;target IP&amp;gt;)
Host is up, received arp-response (0.0014s latency).
PORT STATE SERVICE REASON VERSION
514/udp closed syslog port-unreach
MAC Address: 34:25:C9:96:AC:E0 (My Computer)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Logging configuration should not be in the application startup file. It should be in the configuration files. This is discussed further under the &lt;a href=&#34;http://blog.binarymist.net/2015/09/17/risks-and-countermeasures-to-the-management-of-application-secrets/#store-configuration-in-configuration-files&#34; target=&#34;_blank&#34;&gt;Store Configuration in Configuration files&lt;/a&gt; section.&lt;/p&gt;

&lt;p&gt;Notice the syslog transport in the configuration below starting on the &lt;code&gt;syslogPosixTransportOptions: {&lt;/code&gt; line.&lt;/p&gt;

&lt;h6 id=&#34;default-js&#34;&gt;&lt;code&gt;default.js&lt;/code&gt;&lt;/h6&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;module.exports = {
   logger: {
      colours: {
         debug: &#39;white&#39;,
         info: &#39;green&#39;,
         notice: &#39;blue&#39;,
         warning: &#39;yellow&#39;,
         error: &#39;yellow&#39;,
         crit: &#39;red&#39;,
         alert: &#39;red&#39;,
         emerg: &#39;red&#39;
      },
      // Syslog compatible protocol severities.
      levels: {
         debug: 0,
         info: 1,
         notice: 2,
         warning: 3,
         error: 4,
         crit: 5,
         alert: 6,
         emerg: 7
      },
      consoleTransportOptions: {
         level: &#39;debug&#39;,
         handleExceptions: true,
         json: false,
         colorize: true
      },
      fileTransportOptions: {
         level: &#39;debug&#39;,
         filename: &#39;./yourapp.log&#39;,
         handleExceptions: true,
         json: true,
         maxsize: 5242880, //5MB
         maxFiles: 5,
         colorize: false
      },
      syslogPosixTransportOptions: {
         handleExceptions: true,
         level: &#39;debug&#39;,
         identity: &#39;yourapp_winston&#39;
         //facility: &#39;local0&#39; // default
            // /etc/rsyslog.conf also needs: local0.* /var/log/yourapp.log
            // If non posix syslog is used, then /etc/rsyslog.conf or one
            // of the files in /etc/rsyslog.d/ also needs the following
            // two settings:
            // $ModLoad imudp // Load the udp module.
            // $UDPServerRun 514 // Open the standard syslog port.
            // $UDPServerAddress 127.0.0.1 // Interface to bind to.
      },
      emailTransportOptions: {
         handleExceptions: true,
         level: &#39;crit&#39;,
         from: &#39;yourusername_alerts@fastmail.com&#39;,
         to: &#39;yourusername_alerts@fastmail.com&#39;,
         service: &#39;FastMail&#39;,
         auth: {
            user: &amp;quot;yourusername_alerts&amp;quot;,
            pass: null // App specific password.
         },
         tags: [&#39;yourapp&#39;]
      }
   }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In development I have chosen here to not use syslog. You can see this on the &lt;code&gt;syslogPosixTransportOptions: null&lt;/code&gt; line below. If you want to test syslog in development, you can either remove the logger object override from the &lt;code&gt;devbox1-development.js&lt;/code&gt; file or modify it to be similar to the above. Then add one line to the &lt;code&gt;/etc/rsyslog.conf&lt;/code&gt; file to turn on. As mentioned in a comment above in the &lt;code&gt;default.js&lt;/code&gt; config file on the line &lt;code&gt;// /etc/rsyslog.conf also needs: local0.* /var/log/yourapp.log&lt;/code&gt;.&lt;/p&gt;

&lt;h6 id=&#34;devbox1-development-js&#34;&gt;&lt;code&gt;devbox1-development.js&lt;/code&gt;&lt;/h6&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;wraplines=&amp;quot;false&amp;quot; highlight=&amp;quot;3&amp;quot; firstline=&amp;quot;1&amp;quot;]
module.exports = {
   logger: {
      syslogPosixTransportOptions: null
   }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In production we log to syslog and because of that we do not need the file transport you can see configured starting on line 30 above in the &lt;code&gt;default.js&lt;/code&gt; configuration file, so we set it to null as seen on line 6 below in the &lt;code&gt;prodbox-production.js&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;I have gone into more depth about how we handle syslogs &lt;a href=&#34;http://blog.binarymist.net/2015/04/25/web-server-log-management/&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;, where all of our logs including these ones get streamed to an off-site syslog server. Thus providing easy aggregation of all system logs into one user interface that DevOpps can watch on their monitoring panels in real-time and also easily go back in time to visit past events. This provides excellent visibility as one &lt;a href=&#34;https://f1.holisticinfosecforwebdevelopers.com/chap06.html#web-applications-countermeasures-management-of-application-secrets&#34; target=&#34;_blank&#34;&gt;layer of defence&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There were also some other &lt;a href=&#34;http://help.papertrailapp.com/kb/configuration/configuring-centralized-logging-from-nodejs-apps/&#34; target=&#34;_blank&#34;&gt;options&lt;/a&gt; for those using &lt;a href=&#34;https://f1.holisticinfosecforwebdevelopers.com/chap03.html#vps-countermeasures-lack-of-visibility-web-server-log-management-improving-the-strategy&#34; target=&#34;_blank&#34;&gt;Papertrail&lt;/a&gt; as their off-site syslog and aggregation PaaS, but the solutions were not as clean as simply logging to local syslog from your applications and then sending off-site from there.&lt;/p&gt;

&lt;h6 id=&#34;prodbox-production-js&#34;&gt;&lt;code&gt;prodbox-production.js&lt;/code&gt;&lt;/h6&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;wraplines=&amp;quot;false&amp;quot; highlight=&amp;quot;6&amp;quot; firstline=&amp;quot;1&amp;quot;]
module.exports = {
   logger: {
      consoleTransportOptions: {
         level: {},
      },
      fileTransportOptions: null,
      syslogPosixTransportOptions: {
         handleExceptions: true,
         level: &#39;info&#39;,
         identity: &#39;yourapp_winston&#39;
      }
   }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;local-js&#34;&gt;&lt;code&gt;local.js&lt;/code&gt;&lt;/h6&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Build creates this file.
module.exports = {
   logger: {
      emailTransportOptions: {
         auth: {
            pass: &#39;Z-o?(7GnCQsnrx/!-G=LP]-ib&#39; // App specific password.
         }
      }
   }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;logger.js&lt;/code&gt; file wraps and hides extra features and transports applied to the logging package we are consuming.&lt;/p&gt;

&lt;h6 id=&#34;logger-js&#34;&gt;&lt;code&gt;logger.js&lt;/code&gt;&lt;/h6&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var winston = require(&#39;winston&#39;);
var loggerConfig = require(&#39;config&#39;).logger;
require(&#39;winston-syslog-posix&#39;).SyslogPosix;
require(&#39;winston-email&#39;).Email;

winston.emitErrs = true;

var logger = new winston.Logger({
   // Alternatively: set to winston.config.syslog.levels
   exitOnError: false,
   // Alternatively use winston.addColors(customColours); There are many ways
   // to do the same thing with winston
   colors: loggerConfig.colours,
   levels: loggerConfig.levels
});

// Add transports. There are plenty of options provided and you can add your own.

logger.addConsole = function(config) {
   logger.add (winston.transports.Console, config);
   return this;
};

logger.addFile = function(config) {
   logger.add (winston.transports.File, config);
   return this;
};

logger.addPosixSyslog = function(config) {
   logger.add (winston.transports.SyslogPosix, config);
   return this;
};

logger.addEmail = function(config) {
   logger.add (winston.transports.Email, config);
   return this;
};

logger.emailLoggerFailure = function (err /*level, msg, meta*/) {
   // If called with an error, then only the err param is supplied.
   // If not called with an error, level, msg and meta are supplied.
   if (err) logger.alert(
      JSON.stringify(
         &#39;error-code:&#39; + err.code + &#39;. &#39;
         + &#39;error-message:&#39; + err.message + &#39;. &#39;
         + &#39;error-response:&#39; + err.response + &#39;. logger-level:&#39;
         + err.transport.level + &#39;. transport:&#39; + err.transport.name
      )
   );
};

logger.init = function () {
   if (loggerConfig.fileTransportOptions)
      logger.addFile( loggerConfig.fileTransportOptions );
   if (loggerConfig.consoleTransportOptions)
      logger.addConsole( loggerConfig.consoleTransportOptions );
   if (loggerConfig.syslogPosixTransportOptions)
      logger.addPosixSyslog( loggerConfig.syslogPosixTransportOptions );
   if (loggerConfig.emailTransportOptions)
      logger.addEmail( loggerConfig.emailTransportOptions );
};

module.exports = logger;
module.exports.stream = {
   write: function (message, encoding) {
      logger.info(message);
   }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When the app first starts it initialises the logger on the &lt;code&gt;logger.init();&lt;/code&gt; line below.&lt;/p&gt;

&lt;h6 id=&#34;app-js&#34;&gt;&lt;code&gt;app.js&lt;/code&gt;&lt;/h6&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;//...
var express = require(&#39;express&#39;);
var morganLogger = require(&#39;morgan&#39;);
var logger = require(&#39;./util/logger&#39;); // Or use requireFrom module so no relative paths.
var app = express();
//...
logger.init();
app.set(&#39;port&#39;, process.env.PORT || 3000);
app.set(&#39;views&#39;, __dirname + &#39;/views&#39;);
app.set(&#39;view engine&#39;, &#39;jade&#39;);
//...
// In order to utilise connect/express logger module in our third party logger,
// Pipe the messages through.
app.use(morganLogger(&#39;combined&#39;, {stream: logger.stream}));
//...
app.use(express.static(path.join(__dirname, &#39;public&#39;)));
//...
require(&#39;./routes&#39;)(app);

if (&#39;development&#39; == app.get(&#39;env&#39;)) {
   app.use(errorHandler({ dumpExceptions: true, showStack: true }));
   //...
}
if (&#39;production&#39; == app.get(&#39;env&#39;)) {
   app.use(errorHandler());
   //...
}

http.createServer(app).listen(app.get(&#39;port&#39;), function(){
   logger.info(
      &amp;quot;Express server listening on port &amp;quot; + app.get(&#39;port&#39;) + &#39; in &#39;
      + process.env.NODE_ENV + &#39; mode&#39;
   );
});
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;You can also optionally log JSON metadata&lt;/li&gt;
&lt;li&gt;You can provide an optional callback to do any work required, which will be called once all transports have logged the specified message&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here are some examples of how you can use the logger. The &lt;code&gt;logger.log(&amp;lt;level&amp;gt;&lt;/code&gt; can be replaced with &lt;code&gt;logger.&amp;lt;level&amp;gt;(&lt;/code&gt; where level is any of the levels defined in the &lt;code&gt;default.js&lt;/code&gt; configuration file above:&lt;/p&gt;

&lt;h6 id=&#34;anywhere-you-need-logging&#34;&gt;Anywhere you need logging&lt;/h6&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// With string interpolation also.
logger.log(&#39;info&#39;, &#39;test message %s&#39;, &#39;my string&#39;);
logger.log(&#39;info&#39;, &#39;test message %d&#39;, 123);
logger.log(&#39;info&#39;, &#39;test message %j&#39;, {aPropertyName: &#39;Some message details&#39;}, {});
logger.log(&#39;info&#39;, &#39;test message %s, %s&#39;, &#39;first&#39;, &#39;second&#39;, {aPropertyName: &#39;Some message details&#39;});
logger.log(&#39;info&#39;, &#39;test message&#39;, &#39;first&#39;, &#39;second&#39;, {aPropertyName: &#39;Some message details&#39;});
logger.log(&#39;info&#39;, &#39;test message %s, %s&#39;, &#39;first&#39;, &#39;second&#39;, {aPropertyName: &#39;Some message details&#39;}, logger.emailLoggerFailure);
logger.log(&#39;info&#39;, &#39;test message&#39;, &#39;first&#39;, &#39;second&#39;, {aPropertyName: &#39;Some message details&#39;}, logger.emailLoggerFailure);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also consider hiding cross cutting concerns like logging using Aspect Oriented Programing (AOP)&lt;/p&gt;

&lt;h3 id=&#34;insufficient-monitoring&#34;&gt;Insufficient Monitoring&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://binarymist.io/img/post/2015/11/preventioneasy.png&#34; alt=&#34;PreventionEASY&#34; /&gt;&lt;/p&gt;

&lt;p&gt;There are a couple of ways of approaching monitoring. You may want to see the health of your application even if it is all fine, or only to be notified if it is not fine (sometimes called the dark cockpit approach).&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://f1.holisticinfosecforwebdevelopers.com/chap03.html#vps-countermeasures-lack-of-visibility-proactive-monitoring-monit&#34; target=&#34;_blank&#34;&gt;Monit&lt;/a&gt; is an &lt;a href=&#34;https://f1.holisticinfosecforwebdevelopers.com/chap03.html#vps-countermeasures-lack-of-visibility-proactive-monitoring-getting-started-with-monit&#34; target=&#34;_blank&#34;&gt;excellent tool&lt;/a&gt; for the dark cockpit approach. It&amp;rsquo;s easy to configure. Has excellent short &lt;a href=&#34;https://mmonit.com/monit/documentation/monit.html&#34; target=&#34;_blank&#34;&gt;documentation&lt;/a&gt; that is easy to understand and the configuration file has lots of examples commented out ready for you to take as is and modify to suite your environment.&lt;/p&gt;

&lt;h2 id=&#34;risks-that-solution-causes&#34;&gt;Risks that Solution Causes&lt;/h2&gt;

&lt;h3 id=&#34;lack-of-visibility&#34;&gt;Lack of Visibility&lt;/h3&gt;

&lt;p&gt;With the added visibility, you will have to make decisions based on the new found information you now have. There will be no more blissful ignorance if there was before.&lt;/p&gt;

&lt;h3 id=&#34;insufficient-logging-and-monitoring-1&#34;&gt;Insufficient Logging and Monitoring&lt;/h3&gt;

&lt;p&gt;There will be learning and work to be done to become familiar with libraries and tooling. Code will have to be written around logging as in wrapping libraries, initialising and adding logging statements or hiding them using AOP.&lt;/p&gt;

&lt;h2 id=&#34;costs-and-trade-offs&#34;&gt;Costs and Trade-offs&lt;/h2&gt;

&lt;h3 id=&#34;insufficient-logging-and-monitoring-2&#34;&gt;Insufficient Logging and Monitoring&lt;/h3&gt;

&lt;p&gt;You can do a lot for little cost here. I would rather trade off a few days work in order to have a really good logging system through your code base that is going to show you errors fast in development and then show you different errors in the places your DevOps need to see them in production.&lt;/p&gt;

&lt;p&gt;Same for monitoring. Find a tool that you find working with a pleasure. There are just about always free and open source tools to every commercial alternative. If you are working with a start-up or young business, the free and open source tools can be excellent to keep ongoing costs down. Especially mature tools that are also well maintained like Monit.&lt;/p&gt;

&lt;h2 id=&#34;additional-resources&#34;&gt;Additional Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/rtgibbons/7354879&#34; target=&#34;_blank&#34;&gt;Details&lt;/a&gt; that &lt;a href=&#34;https://thejsf.wordpress.com/2015/01/18/node-js-logging-with-winston/&#34; target=&#34;_blank&#34;&gt;helped&lt;/a&gt; setup NodeJS logging&lt;/li&gt;
&lt;li&gt;Application logging to syslog server on another machine:

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://unix.stackexchange.com/questions/67250/where-does-rsyslog-keep-facility-local0&#34; target=&#34;_blank&#34;&gt;http://unix.stackexchange.com/questions/67250/where-does-rsyslog-keep-facility-local0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wiki.rsyslog.com/index.php/Very_simple_config_--_starting_point_for_modifications&#34; target=&#34;_blank&#34;&gt;http://wiki.rsyslog.com/index.php/Very_simple_config_--_starting_point_for_modifications&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Or the &lt;a href=&#34;http://www.rsyslog.com/doc/v8-stable/configuration/modules/imudp.html&#34; target=&#34;_blank&#34;&gt;new style configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.gentoo.org/wiki/Rsyslog#Severity&#34; target=&#34;_blank&#34;&gt;Syslog compatible protocol severities&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Consuming Free and Open Source</title>
      <link>https://binarymist.io/blog/2015/10/29/consuming-free-and-open-source/</link>
      <pubDate>Thu, 29 Oct 2015 00:00:00 +1300</pubDate>
      
      <guid>https://binarymist.io/blog/2015/10/29/consuming-free-and-open-source/</guid>
      <description>&lt;p&gt;&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Consuming Free and Open Source&lt;/title&gt;
    &lt;link rel=&#34;canonical&#34; href=&#34;https://binarymist.wordpress.com/2015/10/29/consuming-free-and-open-source/&#34;/&gt;
    &lt;meta http-equiv=&#34;content-type&#34; content=&#34;text/html; charset=utf-8&#34;/&gt;
    &lt;meta http-equiv=&#34;refresh&#34; content=&#34;2; url=https://binarymist.wordpress.com/2015/10/29/consuming-free-and-open-source/&#34;/&gt;
  &lt;/head&gt;
&lt;/html&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Risks and Countermeasures to the Management of Application Secrets</title>
      <link>https://binarymist.io/blog/2015/09/17/risks-and-countermeasures-to-the-management-of-application-secrets/</link>
      <pubDate>Thu, 17 Sep 2015 00:00:00 +1200</pubDate>
      
      <guid>https://binarymist.io/blog/2015/09/17/risks-and-countermeasures-to-the-management-of-application-secrets/</guid>
      <description>&lt;p&gt;&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Risks and Countermeasures to the Management of Application Secrets&lt;/title&gt;
    &lt;link rel=&#34;canonical&#34; href=&#34;https://binarymist.wordpress.com/2015/09/17/risks-and-countermeasures-to-the-management-of-application-secrets/&#34;/&gt;
    &lt;meta http-equiv=&#34;content-type&#34; content=&#34;text/html; charset=utf-8&#34;/&gt;
    &lt;meta http-equiv=&#34;refresh&#34; content=&#34;4; url=https://binarymist.wordpress.com/2015/09/17/risks-and-countermeasures-to-the-management-of-application-secrets/&#34;/&gt;
  &lt;/head&gt;
&lt;/html&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>TL-WN722N on Kali VM on Linux Host</title>
      <link>https://binarymist.io/blog/2015/09/03/tl-wn722n-on-kali-vm-on-linux-host/</link>
      <pubDate>Thu, 03 Sep 2015 00:00:00 +1200</pubDate>
      
      <guid>https://binarymist.io/blog/2015/09/03/tl-wn722n-on-kali-vm-on-linux-host/</guid>
      <description>&lt;p&gt;&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;TL-WN722N on Kali VM on Linux Host&lt;/title&gt;
    &lt;link rel=&#34;canonical&#34; href=&#34;https://binarymist.wordpress.com/2015/09/03/tl-wn722n-on-kali-vm-on-linux-host/&#34;/&gt;
    &lt;meta http-equiv=&#34;content-type&#34; content=&#34;text/html; charset=utf-8&#34;/&gt;
    &lt;meta http-equiv=&#34;refresh&#34; content=&#34;3; url=https://binarymist.wordpress.com/2015/09/03/tl-wn722n-on-kali-vm-on-linux-host/&#34;/&gt;
  &lt;/head&gt;
&lt;/html&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Keeping Your NodeJS Web App Running on Production Linux</title>
      <link>https://binarymist.io/blog/2015/06/26/keeping-your-nodejs-web-app-running-on-production-linux/</link>
      <pubDate>Fri, 26 Jun 2015 00:00:00 +1200</pubDate>
      
      <guid>https://binarymist.io/blog/2015/06/26/keeping-your-nodejs-web-app-running-on-production-linux/</guid>
      <description>&lt;p&gt;&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Keeping Your NodeJS Web App Running on Production Linux&lt;/title&gt;
    &lt;link rel=&#34;canonical&#34; href=&#34;https://binarymist.wordpress.com/2015/06/27/keeping-your-nodejs-web-app-running-on-production-linux/&#34;/&gt;
    &lt;meta http-equiv=&#34;content-type&#34; content=&#34;text/html; charset=utf-8&#34;/&gt;
    &lt;meta http-equiv=&#34;refresh&#34; content=&#34;3; url=https://binarymist.wordpress.com/2015/06/27/keeping-your-nodejs-web-app-running-on-production-linux/&#34;/&gt;
  &lt;/head&gt;
&lt;/html&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Evaluation of Host Intrusion Detection Systems (HIDS)</title>
      <link>https://binarymist.io/blog/2015/05/30/evaluation-of-host-intrusion-detection-systems-hids/</link>
      <pubDate>Sat, 30 May 2015 00:00:00 +1200</pubDate>
      
      <guid>https://binarymist.io/blog/2015/05/30/evaluation-of-host-intrusion-detection-systems-hids/</guid>
      <description>&lt;p&gt;&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Evaluation of Host Intrusion Detection Systems (HIDS)&lt;/title&gt;
    &lt;link rel=&#34;canonical&#34; href=&#34;https://binarymist.wordpress.com/2015/05/30/evaluation-of-host-intrusion-detection-systems-hids/&#34;/&gt;
    &lt;meta http-equiv=&#34;content-type&#34; content=&#34;text/html; charset=utf-8&#34;/&gt;
    &lt;meta http-equiv=&#34;refresh&#34; content=&#34;2; url=https://binarymist.wordpress.com/2015/05/30/evaluation-of-host-intrusion-detection-systems-hids/&#34;/&gt;
  &lt;/head&gt;
&lt;/html&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Web Server Log Management</title>
      <link>https://binarymist.io/blog/2015/04/25/web-server-log-management/</link>
      <pubDate>Sat, 25 Apr 2015 00:00:00 +1200</pubDate>
      
      <guid>https://binarymist.io/blog/2015/04/25/web-server-log-management/</guid>
      <description>&lt;p&gt;&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Web Server Log Management&lt;/title&gt;
    &lt;link rel=&#34;canonical&#34; href=&#34;https://binarymist.wordpress.com/2015/04/25/web-server-log-management/&#34;/&gt;
    &lt;meta http-equiv=&#34;content-type&#34; content=&#34;text/html; charset=utf-8&#34;/&gt;
    &lt;meta http-equiv=&#34;refresh&#34; content=&#34;2; url=https://binarymist.wordpress.com/2015/04/25/web-server-log-management/&#34;/&gt;
  &lt;/head&gt;
&lt;/html&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Keeping Your Linux Server/s In Time With Your Router</title>
      <link>https://binarymist.io/blog/2015/03/28/keeping-your-linux-server/s-in-time-with-your-router/</link>
      <pubDate>Sat, 28 Mar 2015 00:00:00 +1300</pubDate>
      
      <guid>https://binarymist.io/blog/2015/03/28/keeping-your-linux-server/s-in-time-with-your-router/</guid>
      <description>&lt;p&gt;&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Keeping Your Linux Server/s In Time With Your Router&lt;/title&gt;
    &lt;link rel=&#34;canonical&#34; href=&#34;https://binarymist.wordpress.com/2015/03/28/keeping-your-linux-server-in-time/&#34;/&gt;
    &lt;meta http-equiv=&#34;content-type&#34; content=&#34;text/html; charset=utf-8&#34;/&gt;
    &lt;meta http-equiv=&#34;refresh&#34; content=&#34;3; url=https://binarymist.wordpress.com/2015/03/28/keeping-your-linux-server-in-time/&#34;/&gt;
  &lt;/head&gt;
&lt;/html&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GnuPG Key-Pair with Sub-Keys</title>
      <link>https://binarymist.io/blog/2015/01/31/gnupg-key-pair-with-sub-keys/</link>
      <pubDate>Sat, 31 Jan 2015 00:00:00 +1300</pubDate>
      
      <guid>https://binarymist.io/blog/2015/01/31/gnupg-key-pair-with-sub-keys/</guid>
      <description>&lt;p&gt;&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;GnuPG Key-Pair with Sub-Keys&lt;/title&gt;
    &lt;link rel=&#34;canonical&#34; href=&#34;https://binarymist.wordpress.com/2015/01/31/gnupg-key-pair-with-sub-keys/&#34;/&gt;
    &lt;meta http-equiv=&#34;content-type&#34; content=&#34;text/html; charset=utf-8&#34;/&gt;
    &lt;meta http-equiv=&#34;refresh&#34; content=&#34;3; url=https://binarymist.wordpress.com/2015/01/31/gnupg-key-pair-with-sub-keys/&#34;/&gt;
  &lt;/head&gt;
&lt;/html&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Installation and Hardening of Debian Web Server</title>
      <link>https://binarymist.io/blog/2014/12/27/installation-and-hardening-of-debian-web-server/</link>
      <pubDate>Sat, 27 Dec 2014 00:00:00 +1300</pubDate>
      
      <guid>https://binarymist.io/blog/2014/12/27/installation-and-hardening-of-debian-web-server/</guid>
      <description>&lt;p&gt;&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Installation and Hardening of Debian Web Server&lt;/title&gt;
    &lt;link rel=&#34;canonical&#34; href=&#34;https://binarymist.wordpress.com/2014/12/27/installation-hardening-of-debian-web-server/&#34;/&gt;
    &lt;meta http-equiv=&#34;content-type&#34; content=&#34;text/html; charset=utf-8&#34;/&gt;
    &lt;meta http-equiv=&#34;refresh&#34; content=&#34;3; url=https://binarymist.wordpress.com/2014/12/27/installation-hardening-of-debian-web-server/&#34;/&gt;
  &lt;/head&gt;
&lt;/html&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Node.js Asynchronicity and Callback Nesting</title>
      <link>https://binarymist.io/blog/2014/07/26/node.js-asynchronicity-and-callback-nesting/</link>
      <pubDate>Sat, 26 Jul 2014 00:00:00 +1200</pubDate>
      
      <guid>https://binarymist.io/blog/2014/07/26/node.js-asynchronicity-and-callback-nesting/</guid>
      <description>&lt;p&gt;&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Node.js Asynchronicity and Callback Nesting&lt;/title&gt;
    &lt;link rel=&#34;canonical&#34; href=&#34;https://binarymist.wordpress.com/2014/07/26/node-js-asynchronicity-and-callback-nesting/&#34;/&gt;
    &lt;meta http-equiv=&#34;content-type&#34; content=&#34;text/html; charset=utf-8&#34;/&gt;
    &lt;meta http-equiv=&#34;refresh&#34; content=&#34;3; url=https://binarymist.wordpress.com/2014/07/26/node-js-asynchronicity-and-callback-nesting/&#34;/&gt;
  &lt;/head&gt;
&lt;/html&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Exploring JavaScript Prototypes</title>
      <link>https://binarymist.io/blog/2014/06/28/exploring-javascript-prototypes/</link>
      <pubDate>Sat, 28 Jun 2014 00:00:00 +1200</pubDate>
      
      <guid>https://binarymist.io/blog/2014/06/28/exploring-javascript-prototypes/</guid>
      <description>&lt;p&gt;&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Exploring JavaScript Prototypes&lt;/title&gt;
    &lt;link rel=&#34;canonical&#34; href=&#34;https://binarymist.wordpress.com/2014/06/28/exploring-javascript-prototypes/&#34;/&gt;
    &lt;meta http-equiv=&#34;content-type&#34; content=&#34;text/html; charset=utf-8&#34;/&gt;
    &lt;meta http-equiv=&#34;refresh&#34; content=&#34;2; url=https://binarymist.wordpress.com/2014/06/28/exploring-javascript-prototypes/&#34;/&gt;
  &lt;/head&gt;
&lt;/html&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Exploring JavaScript Closures</title>
      <link>https://binarymist.io/blog/2014/05/31/exploring-javascript-closures/</link>
      <pubDate>Sat, 31 May 2014 00:00:00 +1200</pubDate>
      
      <guid>https://binarymist.io/blog/2014/05/31/exploring-javascript-closures/</guid>
      <description>&lt;p&gt;&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Exploring JavaScript Closures&lt;/title&gt;
    &lt;link rel=&#34;canonical&#34; href=&#34;https://binarymist.wordpress.com/2014/05/31/javascript-closures/&#34;/&gt;
    &lt;meta http-equiv=&#34;content-type&#34; content=&#34;text/html; charset=utf-8&#34;/&gt;
    &lt;meta http-equiv=&#34;refresh&#34; content=&#34;3; url=https://binarymist.wordpress.com/2014/05/31/javascript-closures/&#34;/&gt;
  &lt;/head&gt;
&lt;/html&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
