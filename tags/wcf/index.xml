<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Content tagged as &#39;Wcf&#39; on BinaryMist</title>
    <link>https://binarymist.io/tags/wcf/</link>
    <description>Recent content in Content tagged as &#39;Wcf&#39; on BinaryMist</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018 BinaryMist Ltd &lt;/br&gt;Following images are used under Creative Commons: [1](https://www.flickr.com/photos/ravefinity/12180959354/in/photostream/) &lt;/br&gt;[Privacy](/publication/privacy/)</copyright>
    <lastBuildDate>Fri, 01 Jan 2016 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://binarymist.io/tags/wcf/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Software Engineer Interview Quick Question Set</title>
      <link>https://binarymist.io/blog/2013/05/11/software-engineer-interview-quick-question-set/</link>
      <pubDate>Sat, 11 May 2013 00:00:00 +1200</pubDate>
      
      <guid>https://binarymist.io/blog/2013/05/11/software-engineer-interview-quick-question-set/</guid>
      <description>Redirects to legacy blog post.</description>
    </item>
    
    <item>
      <title>Software Engineer Interview Process and Questions</title>
      <link>https://binarymist.io/blog/2013/04/27/software-engineer-interview-process-and-questions/</link>
      <pubDate>Sat, 27 Apr 2013 00:00:00 +1200</pubDate>
      
      <guid>https://binarymist.io/blog/2013/04/27/software-engineer-interview-process-and-questions/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;A short time ago, I was tasked with finding the right software engineer/s for the organisation I was working for. I settled on a process, a set of background questions,  a set of practical programming exercises and a set of verbal questions. Later on I cut the set of verbal questions down to a quicker set. In this post, I’ll be going over the process and the full set of verbal questions. In a subsequent post I’ll go over the quicker set.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sanitising User Input from Browser part 2</title>
      <link>https://binarymist.io/blog/2012/11/16/sanitising-user-input-from-browser-part-2/</link>
      <pubDate>Fri, 16 Nov 2012 00:00:00 +1300</pubDate>
      
      <guid>https://binarymist.io/blog/2012/11/16/sanitising-user-input-from-browser-part-2/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;Untrusted data (data entered by a user), should always be treated as though it contains attack code. This data should not be sent anywhere without taking the necessary steps to detect and neutralise the malicious code.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Metadata Exchange options for WCF</title>
      <link>https://binarymist.io/blog/2010/09/05/metadata-exchange-options-for-wcf/</link>
      <pubDate>Sun, 05 Sep 2010 00:00:00 +1200</pubDate>
      
      <guid>https://binarymist.io/blog/2010/09/05/metadata-exchange-options-for-wcf/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;There are two options for publishing metadata from a WCF service. By default, the services metadata is not published. In order to make the services information about itself public, you must do either of the following.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Message Inspection in WCF</title>
      <link>https://binarymist.io/blog/2010/06/14/message-inspection-in-wcf/</link>
      <pubDate>Mon, 14 Jun 2010 00:00:00 +1200</pubDate>
      
      <guid>https://binarymist.io/blog/2010/06/14/message-inspection-in-wcf/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;Message Inspectors can be a very usefull tool in diagnosing problems between WCF services and clients. The messages that are transferred between clients/services can be intercepted and operations performed on them. We’ve used this at work in conjunction with a tool called SaopUI to capture the SOAP messages and fire them at our service. This can be usefull for load testing, concurrency testing scenarios amongst others.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Duplex communication and callbacks in WCF</title>
      <link>https://binarymist.io/blog/2010/05/23/duplex-communication-and-callbacks-in-wcf/</link>
      <pubDate>Sun, 23 May 2010 00:00:00 +1200</pubDate>
      
      <guid>https://binarymist.io/blog/2010/05/23/duplex-communication-and-callbacks-in-wcf/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;I was reading in the book Enterprise Integration Patterns that my dev manager bought for the team, on the Message Endpoint pattern on the way home from work a few days ago.&lt;/p&gt;

&lt;p&gt;“A Message Endpoint can be used to send messages or receive them, but one instance does not do both” From my experience, this wasn’t necessarily true. So I decided to confirm my suspicion.
The following is a mix of what I read and tested out.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Logical vs Physical Addresses in WCF</title>
      <link>https://binarymist.io/blog/2010/04/18/logical-vs-physical-addresses-in-wcf/</link>
      <pubDate>Sun, 18 Apr 2010 00:00:00 +1200</pubDate>
      
      <guid>https://binarymist.io/blog/2010/04/18/logical-vs-physical-addresses-in-wcf/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;In this example, I share a listenUri between two endpoints.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Built-in MSMQ Bindings</title>
      <link>https://binarymist.io/blog/2010/04/05/built-in-msmq-bindings/</link>
      <pubDate>Mon, 05 Apr 2010 00:00:00 +1200</pubDate>
      
      <guid>https://binarymist.io/blog/2010/04/05/built-in-msmq-bindings/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;NetMsmqBinding&lt;/code&gt; only works if you have WCF on both sides of the Queue-to-Queue transfer. &lt;code&gt;MsmqIntegrationBinding&lt;/code&gt; is targeted toward existing MSMQ applications that use COM, native C++ APIs or the types defined in the &lt;code&gt;System.Messaging&lt;/code&gt; namespace (as stated by MSDN).&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>