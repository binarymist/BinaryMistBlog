<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>javascript | BinaryMist</title>
    <link>https://binarymist.io/tags/javascript/</link>
      <atom:link href="https://binarymist.io/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    <description>javascript</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>© 2018 BinaryMist Ltd</copyright><lastBuildDate>Fri, 22 Feb 2019 13:30:00 +1300</lastBuildDate>
    <image>
      <url>https://binarymist.io/media/sharing.png</url>
      <title>javascript</title>
      <link>https://binarymist.io/tags/javascript/</link>
    </image>
    
    <item>
      <title>Talk - Security Regression Testing on OWASP Zap Node API</title>
      <link>https://binarymist.io/event/owaspnzday-2019-talk-security-regression-testing-on-owasp-zap-node-api/</link>
      <pubDate>Fri, 22 Feb 2019 13:30:00 +1300</pubDate>
      <guid>https://binarymist.io/event/owaspnzday-2019-talk-security-regression-testing-on-owasp-zap-node-api/</guid>
      <description>&lt;p&gt;As Developers, we’re still creating defective code. There are many areas we’ve been able to configure and automate to help improve security, but the very human aspect of creating secure code is still a dark art, and in many cases our single point of failure.&lt;/p&gt;
&lt;p&gt;We’re going to discuss traditional approaches of addressing security in our software, and why they’re just not cutting it any more. A red teaming engagement can be very expensive, is too late in the SDLC to be finding then fixing bugs. In many cases we’re pushing code to production continuously,
the traditional approaches and security checks are no longer viable.&lt;/p&gt;
&lt;br&gt;
&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;8ca6ad5eb9c34ba9873158026d9cfc6a&#34; data-ratio=&#34;1.37081659973226&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
&lt;br&gt;
&lt;p&gt;In this session, Kim will attempt to demystify how security can become less of a disabler/blocker and more of an enabler/selling point, allowing you to create and deliver robust software with security baked in as frequently and confidently as your business demands.&lt;br&gt;We’re going to unlock the secrets of building and running a Development Team with security super powers (the &lt;a href=&#34;https://purpleteam-labs.com/&#34; target=&#34;_blank&#34;&gt;purpleteam&lt;/a&gt;), finding and fixing defects at the very point that they’re introduced.&lt;/p&gt;
&lt;p&gt;One of the tools often used is the OWASP ZAP API, now we have an officially supported &lt;a href=&#34;https://github.com/zaproxy/zap-api-nodejs/&#34; target=&#34;_blank&#34;&gt;Node API&lt;/a&gt;.
In this talk we build on the Node API to create a &lt;a href=&#34;https://github.com/purpleteam-labs&#34; target=&#34;_blank&#34;&gt;fully featured security regression testing CLI&lt;/a&gt; that can be consumed by your CI/nightly builds.&lt;/p&gt;
&lt;br&gt;
</description>
    </item>
    
    <item>
      <title>Natalie Silvanovich on Attack Surface Reduction</title>
      <link>https://binarymist.io/publication/ser-podcast-attack-surface-reduction/</link>
      <pubDate>Tue, 17 Jul 2018 00:00:00 +0000</pubDate>
      <guid>https://binarymist.io/publication/ser-podcast-attack-surface-reduction/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.se-radio.net/team/kim-carter/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;













&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;
        &lt;img alt=&#34;Software Engineering Radio&#34; srcset=&#34;
               /media/publication/se-radio-logo_hua56cba13ba94bffe77c0e5cf633d61a8_4797_39b10f2cd9435d3f006e74f86974b3b4.png 400w,
               /media/publication/se-radio-logo_hua56cba13ba94bffe77c0e5cf633d61a8_4797_9708a0dd6344bd9522595665aa18325d.png 760w,
               /media/publication/se-radio-logo_hua56cba13ba94bffe77c0e5cf633d61a8_4797_1200x1200_fit_lanczos_2.png 1200w&#34;
               src=&#34;https://binarymist.io/media/publication/se-radio-logo_hua56cba13ba94bffe77c0e5cf633d61a8_4797_39b10f2cd9435d3f006e74f86974b3b4.png&#34;
               width=&#34;584&#34;
               height=&#34;80&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;show-outline&#34;&gt;Show Outline&lt;/h1&gt;
&lt;h2 id=&#34;basic-questions&#34;&gt;Basic Questions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Can you explain what attack surface is?&lt;/li&gt;
&lt;li&gt;If we are to reduce attack surface, we need to be able to measure it. How would you go about quantifying the attack surface before and after defects have been found and fixed?&lt;/li&gt;
&lt;li&gt;How does your threat modelling approach take into consideration the severity as well as number of defects?&lt;/li&gt;
&lt;li&gt;I’m working on a project. I’ve measured my attack surface, found and fixed some defects, measured again, and the attack surface is now 10% smaller. Is my project now 10% more secure?&lt;/li&gt;
&lt;li&gt;You mentioned in your “Small is Beautiful” talk that we should:
&lt;ul&gt;
&lt;li&gt;Base features on user need&lt;/li&gt;
&lt;li&gt;Track feature use in beta or production&lt;/li&gt;
&lt;li&gt;Be willing/able to disable features
This is great advice, is this assuming we have zero users consuming a specific feature?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Can you go into a little more depth on this?&lt;br&gt;
(concrete examples of how you do this?)&lt;/li&gt;
&lt;li&gt;You also mentioned that all code has risk, and that adding a feature is a trade-off. I’d go much further than this, by saying all features are trade-offs, including physical, people, vps, networks, cloud, mobile and IoT. We need to consider the attack surface of everything.&lt;br&gt;
Can we apply the previous question and your answer to all of these areas, and if so, how so?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;developers---current-state&#34;&gt;Developers - Current State&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Can you explain how you are “significantly reducing the number of people harmed by targeted attacks” when any number of bugs that the &lt;a href=&#34;https://bugs.chromium.org/p/project-zero/issues/list?can=1&amp;amp;redir=1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Project Zero&lt;/a&gt; team identifies appear to be completely swamped by the continual onslaught of Developers continuing to create security defects in just about everything produced?&lt;br&gt;
(Because you focus on the most heavily used software)&lt;/li&gt;
&lt;li&gt;There was a post on the &lt;a href=&#34;http://blog.npmjs.org/post/172774747080/attitudes-to-security-in-the-javascript-community&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;NPM blog&lt;/a&gt; recently called: “Attitudes to security in the JavaScript community” in which 87% of respondents said they were concerned with the security of the code they wrote themselves, compared to only 77% saying the same about open source. This to me sounds like the wakeup call the security community has been pushing for years is starting to be heard.
&lt;ul&gt;
&lt;li&gt;What are your thoughts on these statistics, do they sound realistic, are you noticing a similar trend in Developers taking security more seriously?&lt;/li&gt;
&lt;li&gt;What’s your experience and/or thoughts on where the level of security defects are in JavaScript compared to other languages and their environments?&lt;br&gt;
What are your thoughts on these statistics and how can we continue to improve them?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How do we go about considering the security impact of features at design time? Do we need a Red Teamer as part of the Development Team to help drive out defects before we introduce them?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;code-sharing&#34;&gt;Code Sharing&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;You mentioned in your “Small is Beautiful” talk that using the same code for multiple purposes can expose it to new and unnecessary attack vectors. While I believe this to be true, code sharing can be a good thing in terms of productivity. High fan in on pieces of code has been an aim of the Development community for a long time. What are your thoughts on rather than telling Developers not to re-use code, we should be trying to help them create more secure pieces of code that can be consumed?&lt;/li&gt;
&lt;li&gt;You also mentioned that multiple copies of the same code can be difficult to maintain. I’ve noticed with microservices becoming more popular, this seems to be happening more. Do you have any advice other than pulling the common code out into a separate package and consuming as a library?&lt;/li&gt;
&lt;li&gt;Can you tell us about the Android WebView issues where several Android features contained their own version of WebView, bugs were fixed in one version but not another, then they unified WebView?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;third-party-code&#34;&gt;Third-party Code&lt;/h2&gt;
&lt;p&gt;I discuss this in depth in the &lt;a href=&#34;https://f1.holisticinfosecforwebdevelopers.com/chap06.html#web-applications&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Web Applications&lt;/a&gt; chapter of my book &lt;a href=&#34;https://f1.holisticinfosecforwebdevelopers.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Fascicle 1&lt;/a&gt; of &lt;a href=&#34;https://holisticinfosecforwebdevelopers.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Holistic Info-Sec for Web Developers&lt;/a&gt;&lt;br&gt;
(&lt;a href=&#34;https://f1.holisticinfosecforwebdevelopers.com/chap06.html#web-applications-identify-risks-consuming-free-and-open-source&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;risks&lt;/a&gt;, &lt;a href=&#34;https://f1.holisticinfosecforwebdevelopers.com/chap06.html#web-applications-countermeasures-consuming-free-and-open-source&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;countermeasures&lt;/a&gt;)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In your “Small is Beautiful” talk, you mention:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;That we should “make sure each attack surface only supports needed features”&lt;/li&gt;
&lt;li&gt;“Avoid multiple copies of the same library”&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These are both concepts that the Node Package Management ecosystem at least violates. Developers consume vast numbers of packages, even in small projects, often consuming a package to use only one of many features consumed. Firstly, for our listeners, explain what the problem is here?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
&lt;ul&gt;
&lt;li&gt;Where is the point where you would write something yourself as opposed to consume?&lt;/li&gt;
&lt;li&gt;You’ve also mentioned tracking third-party software use and having an internal process for use, which I’ve also discussed in my previously mentioned book. Can you explain how you would do this?&lt;/li&gt;
&lt;li&gt;As we’re on the topic of third-party code management, can you tell us about the example of CVE-2916-4117, that’s the remote code execution in the FireEye Malware Protection System?&lt;/li&gt;
&lt;li&gt;Are there tools that you would like to see automated as part of our DevSecOps process that you think would help the third-party code problems?&lt;/li&gt;
&lt;li&gt;Are smaller packages the answer? If so, do we have the package management systems capable of managing very small packages? I mean, how would discoverability work, it’s hard enough now trying to find the most suitable package out of 10 that all do the same thing right?&lt;/li&gt;
&lt;li&gt;I’m thinking of your “a puppy is forever slide” in your Small is Beautiful talk&amp;hellip; Currently if we depend on a package that the maintainer isn’t keeping patched, we need to fork and maintain it ourselves. Where do you see this ending up?&lt;/li&gt;
&lt;li&gt;a) Node Security Project (NSP) was acquired by NPM on April 10&lt;br&gt;
b) Github is now providing visibility into the dependencies of their users repos and alerting on known security issues if they have a Common Vulnerability Exposure (CVE)&lt;br&gt;
c) Snyke Provides something similar, but they’ve been doing this for much longer than Github and know of many more issues.
&lt;ul&gt;
&lt;li&gt;What are your thoughts on how the open source ecosystem is progressing in terms of creating visibility around defective code?&lt;/li&gt;
&lt;li&gt;How can we do better?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;developer-workflow&#34;&gt;Developer Workflow&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In your “Small is Beautiful” talk you mentioned that excessive SKUs and branching:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Make it harder to push security updates&lt;/li&gt;
&lt;li&gt;Can introduce bugs&lt;/li&gt;
&lt;li&gt;Can cause incomplete patching&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;While I think few would disagree with this, a well defined and sometimes elaborate branching scheme is necessary for large groups of Software Engineers all collaborating on the same code base. Can you define excessive in this context?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
&lt;ul&gt;
&lt;li&gt;Can you talk a bit about CVE-2017-0528, that’s the merge error in Android reducing ASLR bits, what happened with this and what were the lessons that were learnt?&lt;/li&gt;
&lt;li&gt;Before the show you mentioned you also had some anonymised examples of bugs:
&lt;ul&gt;
&lt;li&gt;Where a vendor failed to patch a security issue due to a complex branching and build system, and their patches were also taking a long time due to this?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How would you propose minimal SKUs and branches in a large project where say 100 Engineers are working on the same project?&lt;/li&gt;
&lt;li&gt;You’ve talked a bit about:
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Pruning trees regularly&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Making sure all code has an owner&lt;/p&gt;
&lt;p&gt;Can you explain what you mean by this?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What recommendations do you have for reducing the chances of introducing defects due to branching and merging?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;defects&#34;&gt;Defects&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Can you tell us a bit about the Samsung image processing defect (CVE-2015-7894), that’s the one where the very old QJpeg library was added to parse the android splash images, but it was somehow added to the Android image subsystem, so that all images from a low privileged user are parsed?&lt;/li&gt;
&lt;li&gt;Let’s talk about CVE-2017-3558, that’s the Memory corruption issue in VirtualBox, allowing guest-to-host escalation. You mentioned this was due to old code not being fully removed? It was fixed upstream, but not downstream? Can you talk a bit about this?&lt;/li&gt;
&lt;li&gt;What could have been done so that this never happened?&lt;/li&gt;
&lt;li&gt;CVE-2015-7894, that’s the 7 memory corruption issues in Samsung S6 Edge image processing. This was due to old / no longer used code being left in the system? Can you talk a bit about this one?
&lt;ul&gt;
&lt;li&gt;What could have been done so that this never happened?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You mentioned that the following bugs were in the JavaScript engines, not the language JavaScript:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Can you tell us about the &lt;a href=&#34;https://www.blackhat.com/docs/us-17/thursday/us-17-Silvanovich-The-Origin-Of-Array-Symbol-Species.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Array.species&lt;/a&gt; bug (CVE-2016-7200), the issue with Array.filter in MS Edge?&lt;/li&gt;
&lt;li&gt;What was the Array index accessor bug (CVE-2017-2447) in Safari’s Function.bind?&lt;/li&gt;
&lt;li&gt;What about the TypedArray.sort defect in MS Edge (CVE-2016-7288)&lt;/li&gt;
&lt;li&gt;You mentioned in one of your talks that standards can lead to security issues, can you explain what you meant by that?&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>purpleteam</title>
      <link>https://binarymist.io/project/external-project-purpleteam/</link>
      <pubDate>Mon, 28 May 2018 00:00:00 +0000</pubDate>
      <guid>https://binarymist.io/project/external-project-purpleteam/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Holistic Info-Sec for Web Developers</title>
      <link>https://binarymist.io/publication/holistic-infosec-for-web-developers/</link>
      <pubDate>Fri, 01 Dec 2017 00:00:00 +0000</pubDate>
      <guid>https://binarymist.io/publication/holistic-infosec-for-web-developers/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Workshop - Security Regression Testing with ZapAPI and NodeGoat</title>
      <link>https://binarymist.io/event/aws-meetup-2016-workshop-security-regression-testing-with-zapapi-and-nodegoat/</link>
      <pubDate>Fri, 28 Oct 2016 17:30:00 +1300</pubDate>
      <guid>https://binarymist.io/event/aws-meetup-2016-workshop-security-regression-testing-with-zapapi-and-nodegoat/</guid>
      <description>&lt;p&gt;
&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/DrwXUOJWMoo&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;br&gt;&lt;/p&gt;














&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;
        &lt;img alt=&#34;aws auckland&#34; srcset=&#34;
               /media/talk/aws-auckland_hu22c46d51b12a22ca2628bb481d1408aa_6636_7d7a07e10e82d74edb2c140a818c5b9b.jpg 400w,
               /media/talk/aws-auckland_hu22c46d51b12a22ca2628bb481d1408aa_6636_18cf2ec0b2c743e613020f1e06baeef3.jpg 760w,
               /media/talk/aws-auckland_hu22c46d51b12a22ca2628bb481d1408aa_6636_1200x1200_fit_q90_lanczos.jpg 1200w&#34;
               src=&#34;https://binarymist.io/media/talk/aws-auckland_hu22c46d51b12a22ca2628bb481d1408aa_6636_7d7a07e10e82d74edb2c140a818c5b9b.jpg&#34;
               width=&#34;180&#34;
               height=&#34;180&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
</description>
    </item>
    
    <item>
      <title>Workshop - Security Regression Testing with ZapAPI and NodeGoat</title>
      <link>https://binarymist.io/event/nodejs-meetup-2016-workshop-security-regression-testing-with-zapapi-and-nodegoat/</link>
      <pubDate>Thu, 27 Oct 2016 18:15:00 +1300</pubDate>
      <guid>https://binarymist.io/event/nodejs-meetup-2016-workshop-security-regression-testing-with-zapapi-and-nodegoat/</guid>
      <description>&lt;p&gt;
&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/DrwXUOJWMoo&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Workshop - Security Regression Testing with ZapAPI and NodeGoat</title>
      <link>https://binarymist.io/event/nodeconfeu-2016-workshop-security-regression-testing-with-zapapi-and-nodegoat/</link>
      <pubDate>Sun, 16 Oct 2016 13:00:00 +1300</pubDate>
      <guid>https://binarymist.io/event/nodeconfeu-2016-workshop-security-regression-testing-with-zapapi-and-nodegoat/</guid>
      <description>&lt;p&gt;
&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/DrwXUOJWMoo&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Kim Carter has developed a strong track record as a technology architect and information security professional over 15 years. He is a &lt;a href=&#34;https://www.owasp.org/index.php/New_Zealand&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Chapter Leader&lt;/a&gt; of the Open Web Application Security Project (OWASP) NZ and a Certified Scrum Master. Kim enjoys facilitating and motivating cross-functional, self-managing teams. You’ll find the insights from Kim’s talk in his new book, &lt;a href=&#34;https://binarymist.io/publication/holistic-infosec-for-web-developers&#34;&gt;Holistic Infosec for Web Developers&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;NodeConf gives you unparalleled access to top thought leaders like Kim Carter. Book your tickets now to avail of this unique opportunity.&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;&amp;quot;Security Regression Testing with ZapAPI and NodeGoat&amp;quot; w/ &lt;a href=&#34;https://twitter.com/binarymist?ref_src=twsrc%5Etfw&#34;&gt;@binarymist&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/NodeConfEU?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#NodeConfEU&lt;/a&gt;! &lt;a href=&#34;https://twitter.com/hashtag/node?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#node&lt;/a&gt; &lt;a href=&#34;https://t.co/4Snap5Hafj&#34;&gt;pic.twitter.com/4Snap5Hafj&lt;/a&gt;&lt;/p&gt;&amp;mdash; NodeConf Remote (@NodeConfRemote) &lt;a href=&#34;https://twitter.com/NodeConfRemote/status/779621421374906368?ref_src=twsrc%5Etfw&#34;&gt;September 24, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

</description>
    </item>
    
    <item>
      <title>Workshop - Security Regression Testing with ZapAPI and NodeGoat</title>
      <link>https://binarymist.io/event/owaspny-meetup-2016-workshop-security-regression-testing-with-zapapi-and-nodegoat/</link>
      <pubDate>Wed, 27 Jul 2016 19:00:00 +1200</pubDate>
      <guid>https://binarymist.io/event/owaspny-meetup-2016-workshop-security-regression-testing-with-zapapi-and-nodegoat/</guid>
      <description>&lt;p&gt;
&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/DrwXUOJWMoo&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;what-others-have-said&#34;&gt;What others have said&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.meetup.com/owaspnyc/events/228716474/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;













&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;
        &lt;img alt=&#34;What others say about kims talk&#34; srcset=&#34;
               /media/talk/what-others-say-2016-owaspny_hu74c6e9c65eb95884ff9e00f2c79e528b_37510_d71b46cc23a44ea4a782e5a60dec1eef.png 400w,
               /media/talk/what-others-say-2016-owaspny_hu74c6e9c65eb95884ff9e00f2c79e528b_37510_bf87eb4374da8746e68d3121aa42fedf.png 760w,
               /media/talk/what-others-say-2016-owaspny_hu74c6e9c65eb95884ff9e00f2c79e528b_37510_1200x1200_fit_lanczos_2.png 1200w&#34;
               src=&#34;https://binarymist.io/media/talk/what-others-say-2016-owaspny_hu74c6e9c65eb95884ff9e00f2c79e528b_37510_d71b46cc23a44ea4a782e5a60dec1eef.png&#34;
               width=&#34;760&#34;
               height=&#34;145&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;
</description>
    </item>
    
    <item>
      <title>Workshop - Security Regression Testing with ZapAPI and NodeGoat</title>
      <link>https://binarymist.io/event/owaspchch-meetup-2016-workshop-security-regression-testing-with-zapapi-and-nodegoat/</link>
      <pubDate>Wed, 29 Jun 2016 19:00:00 +1200</pubDate>
      <guid>https://binarymist.io/event/owaspchch-meetup-2016-workshop-security-regression-testing-with-zapapi-and-nodegoat/</guid>
      <description>&lt;p&gt;
&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/DrwXUOJWMoo&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Workshop - Security Regression Testing with ZapAPI and NodeGoat</title>
      <link>https://binarymist.io/event/chcjs-meetup-2016-workshop-security-regression-testing-with-zapapi-and-nodegoat/</link>
      <pubDate>Thu, 23 Jun 2016 19:00:00 +1200</pubDate>
      <guid>https://binarymist.io/event/chcjs-meetup-2016-workshop-security-regression-testing-with-zapapi-and-nodegoat/</guid>
      <description>&lt;p&gt;
&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/DrwXUOJWMoo&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;what-others-have-said&#34;&gt;What others have said&lt;/h2&gt;














&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;
        &lt;img alt=&#34;What others say about kims talk&#34; srcset=&#34;
               /media/talk/what-others-say-2016-chc.js_hu80b4500ba90c5718bdfb63b0cbefc95c_10109_9fd1e4d5a2b26a503a8c3b1eb39a0d11.png 400w,
               /media/talk/what-others-say-2016-chc.js_hu80b4500ba90c5718bdfb63b0cbefc95c_10109_9097fb0d1363f6c3b35c8a09a0f2ab7e.png 760w,
               /media/talk/what-others-say-2016-chc.js_hu80b4500ba90c5718bdfb63b0cbefc95c_10109_1200x1200_fit_lanczos_2.png 1200w&#34;
               src=&#34;https://binarymist.io/media/talk/what-others-say-2016-chc.js_hu80b4500ba90c5718bdfb63b0cbefc95c_10109_9fd1e4d5a2b26a503a8c3b1eb39a0d11.png&#34;
               width=&#34;760&#34;
               height=&#34;146&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;br&gt;
</description>
    </item>
    
    <item>
      <title>Captcha Considerations</title>
      <link>https://binarymist.io/blog/2015/12/31/captcha-considerations/</link>
      <pubDate>Thu, 31 Dec 2015 00:00:00 +1300</pubDate>
      <guid>https://binarymist.io/blog/2015/12/31/captcha-considerations/</guid>
      <description>&lt;p&gt;This post was taken from the content of the Web Applications chapter of Kim&amp;rsquo;s book &lt;a href=&#34;https://f1.holisticinfosecforwebdevelopers.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Holistic Info-Sec for Web Developers F1&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;risks&#34;&gt;Risks&lt;/h2&gt;














&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;
        &lt;img alt=&#34;Exploiting Captcha&#34; srcset=&#34;
               /media/post/2015/12/easy-verywidespread-easy-low_hu0da0c89af40605943f308522b921f22a_5306_9b23d6c9e255b2ac858ff1a609a54c5b.png 400w,
               /media/post/2015/12/easy-verywidespread-easy-low_hu0da0c89af40605943f308522b921f22a_5306_92535d27ee8bdf61eb8b39c77a3142f4.png 760w,
               /media/post/2015/12/easy-verywidespread-easy-low_hu0da0c89af40605943f308522b921f22a_5306_1200x1200_fit_lanczos_2.png 1200w&#34;
               src=&#34;https://binarymist.io/media/post/2015/12/easy-verywidespread-easy-low_hu0da0c89af40605943f308522b921f22a_5306_9b23d6c9e255b2ac858ff1a609a54c5b.png&#34;
               width=&#34;760&#34;
               height=&#34;21&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;Lack of captchas are a risk, but so are captchas themselves&amp;hellip;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s look at the problem here? What are we trying to stop with captchas?&lt;/p&gt;
&lt;p&gt;Bots submitting. What ever it is, whether:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Advertising&lt;/li&gt;
&lt;li&gt;Creating an unfair advantage over real humans&lt;/li&gt;
&lt;li&gt;Link creation in attempt to increase SEO&lt;/li&gt;
&lt;li&gt;Malicious code insertion&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You are more than likely not interested in accepting it.&lt;/p&gt;
&lt;p&gt;What do we not want to block?&lt;/p&gt;
&lt;p&gt;People submitting genuinely innocent input. If a person is prepared to fill out a form manually, even if it is spam, then a person can view the submission and very quickly delete the validated, filtered and possibly sanitised message.&lt;/p&gt;
&lt;h2 id=&#34;countermeasures&#34;&gt;Countermeasures&lt;/h2&gt;














&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;
        &lt;img alt=&#34;PreventionVERYEASY&#34; srcset=&#34;
               /media/post/2015/12/preventionveryeasy_hue85c0770b9bfd9bbe6148975eddb9d73_1327_829ce0581bf2ae160df12050994a8825.png 400w,
               /media/post/2015/12/preventionveryeasy_hue85c0770b9bfd9bbe6148975eddb9d73_1327_fa4aa7b849bceaae3cd1b974bffa91d6.png 760w,
               /media/post/2015/12/preventionveryeasy_hue85c0770b9bfd9bbe6148975eddb9d73_1327_1200x1200_fit_lanczos_2.png 1200w&#34;
               src=&#34;https://binarymist.io/media/post/2015/12/preventionveryeasy_hue85c0770b9bfd9bbe6148975eddb9d73_1327_829ce0581bf2ae160df12050994a8825.png&#34;
               width=&#34;760&#34;
               height=&#34;20&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;h3 id=&#34;types&#34;&gt;Types&lt;/h3&gt;
&lt;h4 id=&#34;text-recognition&#34;&gt;Text Recognition&lt;/h4&gt;
&lt;p&gt;recaptcha uses this technique. See below for details.&lt;/p&gt;
&lt;h4 id=&#34;image-recognition&#34;&gt;Image Recognition&lt;/h4&gt;
&lt;p&gt;Uses images which users have to perform certain operations on, like dragging them to another image. For example: &amp;ldquo;Please drag all cat images to the cat mat.&amp;rdquo;, or &amp;ldquo;Please select all images of things that dogs eat.&amp;rdquo; sweetcaptcha is an example of this type of captcha. This type completely rules out the visually impaired users.&lt;/p&gt;
&lt;h4 id=&#34;friend-recognition&#34;&gt;Friend Recognition&lt;/h4&gt;
&lt;p&gt;Pioneered by&amp;hellip; you guessed it. Facebook. This type of captcha focusses on human hackers, the idea being that they will not know who your friends are.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;&lt;em&gt;Instead of showing you a traditional captcha on Facebook, one of the ways we may help verify your identity is through&lt;/em&gt; &lt;a href=&#34;https://m.facebook.com/story.php?story_fbid=191422450875446&amp;amp;id=121897834504447&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;em&gt;social authentication&lt;/em&gt;&lt;/a&gt;. &lt;em&gt;We will show you a few pictures of your friends and ask you to name the person in those photos. Hackers halfway across the world might know your password, but they don&amp;rsquo;t know who your friends are.&lt;/em&gt;&amp;rdquo;&lt;/p&gt;
&lt;p&gt;I disagree with that statement. A determined hacker will usually be able to find out who your friends are. There is another problem, do you know who all of your friends are? Every acquaintance? I am terrible with names and so are many people. This is supposed to be used to authenticate you. So you have to be able to answer the questions before you can log in.&lt;/p&gt;
&lt;h4 id=&#34;logic-questions&#34;&gt;Logic Questions&lt;/h4&gt;
&lt;p&gt;This is what textcaptcha uses. Simple logic questions designed for the intelligence of a seven year old child. These are more accessible than image and textual image recognition, but they can take longer than image recognition to answer, unless the user is visually impared. The questions are usually language specific also, usually targeting the English language.&lt;/p&gt;
&lt;h4 id=&#34;user-interaction&#34;&gt;User Interaction&lt;/h4&gt;
&lt;p&gt;This is a little like image recognition. Users have to perform actions that virtual intelligence can not work out&amp;hellip; yet. Like dragging a slider a certain number of notches. If an offering gets popular, creating some code to perform the action may not be that hard and would definitely be worth the effort for bot creators. This is obviously not going to work for the visually impaired or for people with handicapped motor skills.&lt;/p&gt;
&lt;p&gt;In NPM land, as usual there are many options to choose from. The following were the offerings I evaluated. None of which really felt like a good fit:&lt;/p&gt;
&lt;h3 id=&#34;offerings&#34;&gt;Offerings&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;total-captcha. Depends on node-canvas. Have to install cairo first, but why? No explanation. Very little of anything here. Move on. How does this work? Do not know. What type is it? Presume text recognition.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/easy-captcha&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;easy-captcha&lt;/a&gt; is a text recognition offering generating images&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/simple-captcha&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;simple-captcha&lt;/a&gt; looks like another text recognition offering. I really do not want to be writing image files to my server.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/node-captcha&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;node-captcha&lt;/a&gt; Depends on canvas. By the look of the package this is another text recognition in a generated image.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/re-captcha&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;re-captcha&lt;/a&gt; was one of the first captcha offerings, created at the Carnegie Mellon University by Luis von Ahn, Ben Maurer, Colin McMillen, David Abraham and Manuel Blum who invented the term captcha. Google later acquired it in September 2009. recaptcha is a text recognition captcha that uses scanned text that optical character recognition (OCR) technology has failed to interpret, which has the added benefit of &lt;a href=&#34;https://en.wikipedia.org/wiki/ReCAPTCHA&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;helping to digitise text&lt;/a&gt; for The New York Times and Google Books. 













&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;
        &lt;img alt=&#34;recaptcha&#34; srcset=&#34;
               /media/post/2015/12/recaptcha_hu832fe315494b4726b3fcf2d66e8b02ac_33240_184e0065d461eb47387907f4336f6147.jpg 400w,
               /media/post/2015/12/recaptcha_hu832fe315494b4726b3fcf2d66e8b02ac_33240_2b4bad4f55948909770ec7b40b57d905.jpg 760w,
               /media/post/2015/12/recaptcha_hu832fe315494b4726b3fcf2d66e8b02ac_33240_1200x1200_fit_q90_lanczos.jpg 1200w&#34;
               src=&#34;https://binarymist.io/media/post/2015/12/recaptcha_hu832fe315494b4726b3fcf2d66e8b02ac_33240_184e0065d461eb47387907f4336f6147.jpg&#34;
               width=&#34;325&#34;
               height=&#34;128&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/sweetcaptcha&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;sweetcaptcha&lt;/a&gt; uses the sweetcaptcha cloud service of which you must abide by their terms and conditions, requires another node package, and requires some integration work. sweetcaptcha is an image recognition type of captcha. 













&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;
        &lt;img alt=&#34;sweetcaptcha&#34; srcset=&#34;
               /media/post/2015/12/sweetcaptcha_hu325fcf01328306f8090673f1c80c97d5_9147_ad6a930277d08a5699f0d46e50c0f9c2.jpg 400w,
               /media/post/2015/12/sweetcaptcha_hu325fcf01328306f8090673f1c80c97d5_9147_e0330a09c55f2227ce98905398cf6bcc.jpg 760w,
               /media/post/2015/12/sweetcaptcha_hu325fcf01328306f8090673f1c80c97d5_9147_1200x1200_fit_q90_lanczos.jpg 1200w&#34;
               src=&#34;https://binarymist.io/media/post/2015/12/sweetcaptcha_hu325fcf01328306f8090673f1c80c97d5_9147_ad6a930277d08a5699f0d46e50c0f9c2.jpg&#34;
               width=&#34;318&#34;
               height=&#34;159&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://textcaptcha.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;textcaptcha&lt;/a&gt; is a logic question captcha relying on an external service for the questions and md5 hashes of the correct lower cased answers. This looks pretty simple to set up, but again expects your users to use their brain on things they should not have to.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After some additional research I worked out why the above types and offerings didn&amp;rsquo;t feel like a good fit. It pretty much came down to user experience.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Why should genuine users/customers of your web application be disadvantaged by having to jump through hoops because you have decided you want to stop bots spamming you? Would it not make more sense to make life harder for the bots rather than for your genuine users?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Some other considerations I had. Ideally I wanted a simple solution requiring few or ideally no external dependencies, no JavaScript required, no reliance on the browser or anything out of my control, no images and it definitely should not cost any money.&lt;/p&gt;
&lt;h3 id=&#34;alternative-approaches&#34;&gt;Alternative Approaches&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Services like Disqus can be good for commenting. Obviously the comments are all stored somewhere in the cloud out of your control and this is an external dependency. For simple text input, this is probably not what you want. Similar services such as all the social media authentication services can take things a bit too far I think. They remove freedoms from your users. Why should your users be disadvantaged by leaving a comment or posting a message on your web application? &lt;a href=&#34;http://perltricks.com/article/104/2014/7/29/Your-users-deserve-better-than-Disqus&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Disqus tracks users activities&lt;/a&gt; from hosting website to website whether you have an account, are logged in or not. &lt;a href=&#34;https://en.wikipedia.org/wiki/Disqus#Criticism_and_privacy_concerns&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Any information they collect&lt;/a&gt; such as IP address, web browser details, installed add-ons, referring pages and exit links may be disclosed to any third party. When this data is aggregated it is useful for de-anonymising users. If users choose to block the Disqus script, the comments are not visible. Disqus has also published its registered users entire commenting histories, along with a list of connected blogs and services on publicly viewable user profile pages. Disqus also engage in add targeting and blackhat SEO techniques from the websites in which their script is installed.&lt;/li&gt;
&lt;li&gt;Services like Akismet and Mollom which take user input and analyse for spam signatures. Mollom sometimes presents a captcha if it is unsure. These two services learn from their mistakes if they mark something as spam and you unmark it, but of course you are going to have to be watching for that. Matt Mullenweg created Akismet so that his mother could blog in safety. &amp;ldquo;&lt;em&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Akismet&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;His first attempt&lt;/a&gt; was a JavaScript plugin which modified the comment form and hid fields, but within hours of launching it, spammers downloaded it, figured out how it worked, and bypassed it. This is a common pitfall for anti-spam plugins: once they get traction&lt;/em&gt;&amp;rdquo;. My advice to this is not to use a common plugin, but to create something custom. I discuss this soon.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The above solutions are excellent targets for creating exploits that will have a large pay off due to the fact that so many websites are using them. There are exploits discovered for these services regularly.&lt;/p&gt;
&lt;h3 id=&#34;still-not-cutting-ithttpwwwsmashingmagazinecom201103in-search-of-the-perfect-captcha&#34;&gt;&lt;a href=&#34;http://www.smashingmagazine.com/2011/03/in-search-of-the-perfect-captcha/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Still not cutting it&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&amp;ldquo;&lt;em&gt;Given the fact that many clients count on conversions to make money, not receiving 3.2% of those conversions could put a dent in sales. Personally, I would rather sort through a few SPAM conversions instead of losing out on possible income.&lt;/em&gt;&amp;rdquo;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Casey Henry: &lt;a href=&#34;https://moz.com/blog/captchas-affect-on-conversion-rates&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Captchas&#39; Effect on Conversion Rates&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;ldquo;&lt;em&gt;Spam is not the user’s problem; it is the problem of the business that is providing the website. It is arrogant and lazy to try and push the problem onto a website’s visitors.&lt;/em&gt;&amp;rdquo;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Tim Kadlec: &lt;a href=&#34;http://timkadlec.com/2011/01/death-to-captchas/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Death to Captchas&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;user-time-expenditure&#34;&gt;User Time Expenditure&lt;/h3&gt;
&lt;p&gt;Recording how long it takes from fetch to submit. This is another technique, in which the time is measured from fetch to submit. For example if the time span is under five seconds it is more than likely a bot, so handle the message accordingly.&lt;/p&gt;
&lt;h3 id=&#34;bot-pot&#34;&gt;Bot Pot&lt;/h3&gt;
&lt;p&gt;Spamming bots operating on custom mechanisms will in most cases just try, then move on. If you decide to use one of the common offerings from above, exploits will be more common, depending on how wide spread the offering is. This is one of the cases where going custom is a better option. Worse case is you get some spam and you can modify your technique, but you get to keep things simple, tailored to your web application, your users needs, no external dependencies and no monthly fees. This is also the simplest technique and requires very little work to implement.&lt;/p&gt;
&lt;h4 id=&#34;spam-bots&#34;&gt;Spam bots:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Love to populate form fields&lt;/li&gt;
&lt;li&gt;Usually ignore CSS. For example, if you have some &lt;a href=&#34;http://haacked.com/archive/2007/09/11/honeypot-captcha.aspx/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CSS that hides&lt;/a&gt; a form field and especially if the CSS is not inline on the same page, they will usually fail at realising that the field is not supposed to be visible.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So what we do is create a field that is not visible to humans and is supposed to be kept empty. On the server once the form is submitted, we check that it is still empty. If it is not, then we assume a bot has been at it.&lt;/p&gt;
&lt;p&gt;This is so simple, does not get in the way of your users, yet very effective at filtering bot spam.&lt;/p&gt;
&lt;h4 id=&#34;client-side&#34;&gt;Client side:&lt;/h4&gt;
&lt;h6 id=&#34;css&#34;&gt;CSS&lt;/h6&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;form&lt;/span&gt; .&lt;span style=&#34;color:#a6e22e&#34;&gt;bot-pot&lt;/span&gt; {
   &lt;span style=&#34;color:#66d9ef&#34;&gt;display&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;none&lt;/span&gt;;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h6 id=&#34;html&#34;&gt;HTML&lt;/h6&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;form&lt;/span&gt;&amp;gt;
   &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!--...--&amp;gt;&lt;/span&gt;
   &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
      &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bot-pot&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bot-pot&amp;#34;&lt;/span&gt;&amp;gt;
   &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
   &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!--...--&amp;gt;&lt;/span&gt;
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;form&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;server-side&#34;&gt;Server side:&lt;/h4&gt;
&lt;p&gt;I show the validation code middleware of the route on line 30 of &lt;code&gt;routes/home.js&lt;/code&gt; below.&lt;/p&gt;
&lt;p&gt;The validation is performed on line 16 of &lt;code&gt;routes/home.js&lt;/code&gt; below.&lt;/p&gt;
&lt;h6 id=&#34;routeshomejs&#34;&gt;&lt;code&gt;routes/home.js&lt;/code&gt;&lt;/h6&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;form&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;express-form&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fieldToValidate&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;form&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;field&lt;/span&gt;;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//...
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;home&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;) {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;   &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;redirect&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;}
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;index&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;) {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;   &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;render&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;home&amp;#39;&lt;/span&gt;, { &lt;span style=&#34;color:#a6e22e&#34;&gt;title&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Home&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;home&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;brand&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;your brand&amp;#39;&lt;/span&gt; });
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&lt;/span&gt;}
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;validate&lt;/span&gt;() {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;form&lt;/span&gt;(
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15&lt;/span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;// Bots love to populate everything.
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#3c3d38&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;fieldToValidate&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bot-pot&amp;#39;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;maxLength&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17&lt;/span&gt;   );
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18&lt;/span&gt;}
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;contact&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;) {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;form&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;isValid&lt;/span&gt;)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23&lt;/span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;// We know the bot-pot is of zero length. So no bots.
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;//...
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;module&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;exports&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;) {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28&lt;/span&gt;   &lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;index&lt;/span&gt;);
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29&lt;/span&gt;   &lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/home&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;home&lt;/span&gt;);
&lt;span style=&#34;display:block;width:100%;background-color:#3c3d38&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30&lt;/span&gt;   &lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;post&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/contact&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;validate&lt;/span&gt;(), &lt;span style=&#34;color:#a6e22e&#34;&gt;contact&lt;/span&gt;);
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31&lt;/span&gt;};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So as you can see, a very simple solution. You could even consider combining the above two techniques.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Lack of Visibility in Web Applications</title>
      <link>https://binarymist.io/blog/2015/11/26/lack-of-visibility-in-web-applications/</link>
      <pubDate>Thu, 26 Nov 2015 00:00:00 +1300</pubDate>
      <guid>https://binarymist.io/blog/2015/11/26/lack-of-visibility-in-web-applications/</guid>
      <description>&lt;p&gt;This post was taken from the content of the Web Applications chapter of Kim&amp;rsquo;s book &lt;a href=&#34;https://f1.holisticinfosecforwebdevelopers.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Holistic Info-Sec for Web Developers F1&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;risks&#34;&gt;Risks&lt;/h2&gt;
&lt;p&gt;I see this as an indirect risk to the asset of web application ownership (That&amp;rsquo;s the assumption that you will always own your web application).&lt;/p&gt;
&lt;p&gt;Not being able to introspect your application at any given time or being able to know how the health status is, is not a comfortable place to be in and there is no reason you should be there.&lt;/p&gt;
&lt;h3 id=&#34;insufficient-logging-and-monitoring&#34;&gt;Insufficient Logging and Monitoring&lt;/h3&gt;














&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;
        &lt;img alt=&#34;average-widespread-veryeasy-moderate&#34; srcset=&#34;
               /media/post/2015/11/average-widespread-veryeasy-moderate_hucf079163bdc3d739ffdf4df179d48964_6108_3cfd3906caa46f8b4b1e9e452d7c593a.png 400w,
               /media/post/2015/11/average-widespread-veryeasy-moderate_hucf079163bdc3d739ffdf4df179d48964_6108_212334a6129b57a554999aa6c9af2d90.png 760w,
               /media/post/2015/11/average-widespread-veryeasy-moderate_hucf079163bdc3d739ffdf4df179d48964_6108_1200x1200_fit_lanczos_2.png 1200w&#34;
               src=&#34;https://binarymist.io/media/post/2015/11/average-widespread-veryeasy-moderate_hucf079163bdc3d739ffdf4df179d48964_6108_3cfd3906caa46f8b4b1e9e452d7c593a.png&#34;
               width=&#34;760&#34;
               height=&#34;21&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;Can you tell at any point in time if someone or something is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Using your application in a way that it was not intended to be used&lt;/li&gt;
&lt;li&gt;Violating policy. For example circumventing client side input sanitisation.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;How easy is it for you to notice:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Poor performance and potential DoS?&lt;/li&gt;
&lt;li&gt;Abnormal application behaviour or unexpected logic threads&lt;/li&gt;
&lt;li&gt;Logic edge cases and blind spots that stake holders, Product Owners and Developers have missed?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;countermeasures&#34;&gt;Countermeasures&lt;/h2&gt;
&lt;p&gt;As Bruce Schneier said: &amp;ldquo;&lt;em&gt;Detection works where prevention fails and detection is of no use without response&lt;/em&gt;&amp;rdquo;. This leads us to application logging.&lt;/p&gt;
&lt;p&gt;With good visibility we should be able to see anticipated and unanticipated exploitation of vulnerabilities as they occur and also be able to go back and review the events.&lt;/p&gt;
&lt;h3 id=&#34;insufficient-logging&#34;&gt;Insufficient Logging&lt;/h3&gt;














&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;
        &lt;img alt=&#34;PreventionAVERAGE&#34; srcset=&#34;
               /media/post/2015/11/preventionaverage_hu7811e2824d2f1967265d41ed158ceca7_1306_e9a085a34600111a2b68b7c67bf0a51f.png 400w,
               /media/post/2015/11/preventionaverage_hu7811e2824d2f1967265d41ed158ceca7_1306_0667ff8b35af15791cd051bc562a56c9.png 760w,
               /media/post/2015/11/preventionaverage_hu7811e2824d2f1967265d41ed158ceca7_1306_1200x1200_fit_lanczos_2.png 1200w&#34;
               src=&#34;https://binarymist.io/media/post/2015/11/preventionaverage_hu7811e2824d2f1967265d41ed158ceca7_1306_e9a085a34600111a2b68b7c67bf0a51f.png&#34;
               width=&#34;760&#34;
               height=&#34;22&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;When it comes to logging in NodeJS, you can&amp;rsquo;t really go past winston. It has a lot of functionality and what it does not have is either provided by extensions, or you can create your own. It is fully featured, reliable and easy to configure like NLog in the .NET world.&lt;/p&gt;
&lt;p&gt;I also looked at &lt;code&gt;express-winston&lt;/code&gt;, but could not see why it needed to exist.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;package.json&lt;/code&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
   &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;...&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;dependencies&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;...,&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;config&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;^1.15.0&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;express&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;^4.13.3&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;morgan&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;^1.6.1&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;//&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nodemailer not strictly necessary for this example,&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;//&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;but used later under the node-config section.&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;nodemailer&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;^1.4.0&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;//&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;What we use for logging.&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;winston&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;^1.0.1&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;winston-email&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0.0.10&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;winston-syslog-posix&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;^0.1.5&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;...&lt;/span&gt;
   }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.npmjs.com/package/winston-email&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;winston-email&lt;/code&gt;&lt;/a&gt; also depends on &lt;a href=&#34;https://www.npmjs.com/package/nodemailer&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;nodemailer&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&#34;opening-udp-port&#34;&gt;Opening UDP port&lt;/h4&gt;
&lt;p&gt;with &lt;a href=&#34;https://www.npmjs.com/package/winston-syslog&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;winston-syslog&lt;/code&gt;&lt;/a&gt; seems to be what a lot of people are using. I think it may be due to the fact that &lt;code&gt;winston-syslog&lt;/code&gt; is the first package that works well for &lt;code&gt;winston&lt;/code&gt; and syslog.&lt;/p&gt;
&lt;p&gt;If going this route, you will need the following in your &lt;code&gt;/etc/rsyslog.conf&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ModLoad imudp
&lt;span style=&#34;color:#75715e&#34;&gt;# Listen on all network addresses. This is the default.&lt;/span&gt;
$UDPServerAddress 0.0.0.0
&lt;span style=&#34;color:#75715e&#34;&gt;# Listen on localhost.&lt;/span&gt;
$UDPServerAddress 127.0.0.1
$UDPServerRun &lt;span style=&#34;color:#ae81ff&#34;&gt;514&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Or the new style configuration.&lt;/span&gt;
Address &amp;lt;IP&amp;gt;
Port &amp;lt;port&amp;gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Logging for your app.&lt;/span&gt;
local0.* /var/log/yourapp.log&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I Also looked at &lt;code&gt;winston-rsyslog2&lt;/code&gt; and &lt;code&gt;winston-syslogudp&lt;/code&gt;, but they did not measure up for me.&lt;/p&gt;
&lt;p&gt;If you do not need to push syslog events to another machine, then it does not make much sense to push through a local network interface when you can use your posix syscalls as they are faster and safer. The line &lt;code&gt;514/udp open|filtered syslog no-response&lt;/code&gt; below shows the open port.&lt;/p&gt;
&lt;h6 id=&#34;nmap-with-winston-syslog&#34;&gt;nmap with &lt;code&gt;winston-syslog&lt;/code&gt;&lt;/h6&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;root@kali:~# nmap -p514 -sU -sV &amp;lt;target IP&amp;gt; --reason

Starting Nmap 6.47 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt; http://nmap.org &lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
Nmap scan report &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; kali &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&amp;lt;target IP&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
Host is up, received arp-response &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0.0015s latency&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;.
PORT STATE SERVICE REASON VERSION
&lt;span style=&#34;display:block;width:100%;background-color:#3c3d38&#34;&gt;514/udp open|filtered syslog no-response
&lt;/span&gt;MAC Address: 34:25:C9:96:AC:E0 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;My Computer&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;using-posix&#34;&gt;Using Posix&lt;/h4&gt;
&lt;p&gt;The &lt;a href=&#34;https://www.npmjs.com/package/winston-syslog-posix&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;winston-syslog-posix&lt;/code&gt;&lt;/a&gt; package was inspired by &lt;a href=&#34;http://tmont.com/blargh/2013/12/writing-to-the-syslog-with-winston&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;blargh&lt;/a&gt;. &lt;code&gt;winston-syslog-posix&lt;/code&gt; uses &lt;a href=&#34;https://www.npmjs.com/package/posix&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;node-posix&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If going this route, you will need the following in your &lt;code&gt;/etc/rsyslog.conf&lt;/code&gt; instead of the above:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Logging for your app.&lt;/span&gt;
local0.* /var/log/yourapp.log&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now you can see on the &lt;code&gt;514/udp closed syslog port-unreach&lt;/code&gt; line below that the syslog port is no longer open:&lt;/p&gt;
&lt;h6 id=&#34;nmap-with-winston-syslog-posix&#34;&gt;nmap with &lt;code&gt;winston-syslog-posix&lt;/code&gt;&lt;/h6&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;root@kali:~# nmap -p514 -sU -sV &amp;lt;target IP&amp;gt; --reason

Starting Nmap 6.47 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt; http://nmap.org &lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
Nmap scan report &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; kali &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&amp;lt;target IP&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
Host is up, received arp-response &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0.0014s latency&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;.
PORT STATE SERVICE REASON VERSION
&lt;span style=&#34;display:block;width:100%;background-color:#3c3d38&#34;&gt;514/udp closed syslog port-unreach
&lt;/span&gt;MAC Address: 34:25:C9:96:AC:E0 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;My Computer&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Logging configuration should not be in the application startup file. It should be in the configuration files. This is discussed further under the &lt;a href=&#34;http://blog.binarymist.net/2015/09/17/risks-and-countermeasures-to-the-management-of-application-secrets/#store-configuration-in-configuration-files&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Store Configuration in Configuration files&lt;/a&gt; section.&lt;/p&gt;
&lt;p&gt;Notice the syslog transport in the configuration below starting on the &lt;code&gt;syslogPosixTransportOptions: {&lt;/code&gt; line.&lt;/p&gt;
&lt;h6 id=&#34;defaultjs&#34;&gt;&lt;code&gt;default.js&lt;/code&gt;&lt;/h6&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;module&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;exports&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;   &lt;span style=&#34;color:#a6e22e&#34;&gt;logger&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;colours&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;         &lt;span style=&#34;color:#a6e22e&#34;&gt;debug&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;white&amp;#39;&lt;/span&gt;,
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;         &lt;span style=&#34;color:#a6e22e&#34;&gt;info&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;green&amp;#39;&lt;/span&gt;,
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;         &lt;span style=&#34;color:#a6e22e&#34;&gt;notice&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;blue&amp;#39;&lt;/span&gt;,
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;         &lt;span style=&#34;color:#a6e22e&#34;&gt;warning&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;yellow&amp;#39;&lt;/span&gt;,
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;         &lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;yellow&amp;#39;&lt;/span&gt;,
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;         &lt;span style=&#34;color:#a6e22e&#34;&gt;crit&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;red&amp;#39;&lt;/span&gt;,
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;         &lt;span style=&#34;color:#a6e22e&#34;&gt;alert&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;red&amp;#39;&lt;/span&gt;,
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&lt;/span&gt;         &lt;span style=&#34;color:#a6e22e&#34;&gt;emerg&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;red&amp;#39;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12&lt;/span&gt;      },
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13&lt;/span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;// Syslog compatible protocol severities.
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;levels&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15&lt;/span&gt;         &lt;span style=&#34;color:#a6e22e&#34;&gt;debug&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16&lt;/span&gt;         &lt;span style=&#34;color:#a6e22e&#34;&gt;info&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17&lt;/span&gt;         &lt;span style=&#34;color:#a6e22e&#34;&gt;notice&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18&lt;/span&gt;         &lt;span style=&#34;color:#a6e22e&#34;&gt;warning&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19&lt;/span&gt;         &lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20&lt;/span&gt;         &lt;span style=&#34;color:#a6e22e&#34;&gt;crit&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;,
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21&lt;/span&gt;         &lt;span style=&#34;color:#a6e22e&#34;&gt;alert&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;,
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22&lt;/span&gt;         &lt;span style=&#34;color:#a6e22e&#34;&gt;emerg&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23&lt;/span&gt;      },
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24&lt;/span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;consoleTransportOptions&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25&lt;/span&gt;         &lt;span style=&#34;color:#a6e22e&#34;&gt;level&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;debug&amp;#39;&lt;/span&gt;,
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26&lt;/span&gt;         &lt;span style=&#34;color:#a6e22e&#34;&gt;handleExceptions&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;,
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27&lt;/span&gt;         &lt;span style=&#34;color:#a6e22e&#34;&gt;json&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;,
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28&lt;/span&gt;         &lt;span style=&#34;color:#a6e22e&#34;&gt;colorize&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29&lt;/span&gt;      },
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30&lt;/span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;fileTransportOptions&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31&lt;/span&gt;         &lt;span style=&#34;color:#a6e22e&#34;&gt;level&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;debug&amp;#39;&lt;/span&gt;,
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32&lt;/span&gt;         &lt;span style=&#34;color:#a6e22e&#34;&gt;filename&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;./yourapp.log&amp;#39;&lt;/span&gt;,
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33&lt;/span&gt;         &lt;span style=&#34;color:#a6e22e&#34;&gt;handleExceptions&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;,
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34&lt;/span&gt;         &lt;span style=&#34;color:#a6e22e&#34;&gt;json&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;,
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35&lt;/span&gt;         &lt;span style=&#34;color:#a6e22e&#34;&gt;maxsize&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5242880&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;//5MB
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;         &lt;span style=&#34;color:#a6e22e&#34;&gt;maxFiles&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;,
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37&lt;/span&gt;         &lt;span style=&#34;color:#a6e22e&#34;&gt;colorize&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38&lt;/span&gt;      },
&lt;span style=&#34;display:block;width:100%;background-color:#3c3d38&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39&lt;/span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;syslogPosixTransportOptions&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#3c3d38&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40&lt;/span&gt;         &lt;span style=&#34;color:#a6e22e&#34;&gt;handleExceptions&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;,
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#3c3d38&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41&lt;/span&gt;         &lt;span style=&#34;color:#a6e22e&#34;&gt;level&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;debug&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#3c3d38&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42&lt;/span&gt;         &lt;span style=&#34;color:#a6e22e&#34;&gt;identity&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;yourapp_winston&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#3c3d38&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43&lt;/span&gt;         &lt;span style=&#34;color:#75715e&#34;&gt;//facility: &amp;#39;local0&amp;#39; // default
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#3c3d38&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;// /etc/rsyslog.conf also needs: local0.* /var/log/yourapp.log
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#3c3d38&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;// If non posix syslog is used, then /etc/rsyslog.conf or one
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#3c3d38&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;// of the files in /etc/rsyslog.d/ also needs the following
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#3c3d38&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;// two settings:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#3c3d38&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;// $ModLoad imudp // Load the udp module.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#3c3d38&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;// $UDPServerRun 514 // Open the standard syslog port.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#3c3d38&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;50&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;// $UDPServerAddress 127.0.0.1 // Interface to bind to.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#3c3d38&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;51&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      },
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;52&lt;/span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;emailTransportOptions&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;53&lt;/span&gt;         &lt;span style=&#34;color:#a6e22e&#34;&gt;handleExceptions&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;,
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;54&lt;/span&gt;         &lt;span style=&#34;color:#a6e22e&#34;&gt;level&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;crit&amp;#39;&lt;/span&gt;,
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;55&lt;/span&gt;         &lt;span style=&#34;color:#a6e22e&#34;&gt;from&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;yourusername_alerts@fastmail.com&amp;#39;&lt;/span&gt;,
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;56&lt;/span&gt;         &lt;span style=&#34;color:#a6e22e&#34;&gt;to&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;yourusername_alerts@fastmail.com&amp;#39;&lt;/span&gt;,
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;57&lt;/span&gt;         &lt;span style=&#34;color:#a6e22e&#34;&gt;service&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;FastMail&amp;#39;&lt;/span&gt;,
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;58&lt;/span&gt;         &lt;span style=&#34;color:#a6e22e&#34;&gt;auth&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;59&lt;/span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;yourusername_alerts&amp;#34;&lt;/span&gt;,
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;60&lt;/span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;pass&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// App specific password.
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;61&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;         },
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;62&lt;/span&gt;         &lt;span style=&#34;color:#a6e22e&#34;&gt;tags&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;yourapp&amp;#39;&lt;/span&gt;]
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;63&lt;/span&gt;      }
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;64&lt;/span&gt;   }
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;65&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In development I have chosen here to not use syslog. You can see this on the &lt;code&gt;syslogPosixTransportOptions: null&lt;/code&gt; line below. If you want to test syslog in development, you can either remove the logger object override from the &lt;code&gt;devbox1-development.js&lt;/code&gt; file or modify it to be similar to the above. Then add one line to the &lt;code&gt;/etc/rsyslog.conf&lt;/code&gt; file to turn on. As mentioned in a comment above in the &lt;code&gt;default.js&lt;/code&gt; config file on the line &lt;code&gt;// /etc/rsyslog.conf also needs: local0.* /var/log/yourapp.log&lt;/code&gt;.&lt;/p&gt;
&lt;h6 id=&#34;devbox1-developmentjs&#34;&gt;&lt;code&gt;devbox1-development.js&lt;/code&gt;&lt;/h6&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;wraplines&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;false&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;highlight&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;3&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;firstline&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;]
&lt;span style=&#34;color:#a6e22e&#34;&gt;module&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;exports&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
   &lt;span style=&#34;color:#a6e22e&#34;&gt;logger&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
&lt;span style=&#34;display:block;width:100%;background-color:#3c3d38&#34;&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;syslogPosixTransportOptions&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;
&lt;/span&gt;   }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In production we log to syslog and because of that we do not need the file transport you can see configured starting on line 30 above in the &lt;code&gt;default.js&lt;/code&gt; configuration file, so we set it to null as seen on line 6 below in the &lt;code&gt;prodbox-production.js&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;I have gone into more depth about how we handle syslogs &lt;a href=&#34;http://blog.binarymist.net/2015/04/25/web-server-log-management/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;, where all of our logs including these ones get streamed to an off-site syslog server. Thus providing easy aggregation of all system logs into one user interface that DevOpps can watch on their monitoring panels in real-time and also easily go back in time to visit past events. This provides excellent visibility as one &lt;a href=&#34;https://f1.holisticinfosecforwebdevelopers.com/chap06.html#web-applications-countermeasures-management-of-application-secrets&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;layer of defence&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There were also some other &lt;a href=&#34;http://help.papertrailapp.com/kb/configuration/configuring-centralized-logging-from-nodejs-apps/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;options&lt;/a&gt; for those using &lt;a href=&#34;https://f1.holisticinfosecforwebdevelopers.com/chap03.html#vps-countermeasures-lack-of-visibility-web-server-log-management-improving-the-strategy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Papertrail&lt;/a&gt; as their off-site syslog and aggregation PaaS, but the solutions were not as clean as simply logging to local syslog from your applications and then sending off-site from there.&lt;/p&gt;
&lt;h6 id=&#34;prodbox-productionjs&#34;&gt;&lt;code&gt;prodbox-production.js&lt;/code&gt;&lt;/h6&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;wraplines&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;false&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;highlight&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;6&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;firstline&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;]
&lt;span style=&#34;color:#a6e22e&#34;&gt;module&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;exports&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
   &lt;span style=&#34;color:#a6e22e&#34;&gt;logger&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
      &lt;span style=&#34;color:#a6e22e&#34;&gt;consoleTransportOptions&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
         &lt;span style=&#34;color:#a6e22e&#34;&gt;level&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {},
      },
      &lt;span style=&#34;color:#a6e22e&#34;&gt;fileTransportOptions&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;,
      &lt;span style=&#34;color:#a6e22e&#34;&gt;syslogPosixTransportOptions&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
         &lt;span style=&#34;color:#a6e22e&#34;&gt;handleExceptions&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;,
         &lt;span style=&#34;color:#a6e22e&#34;&gt;level&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;info&amp;#39;&lt;/span&gt;,
         &lt;span style=&#34;color:#a6e22e&#34;&gt;identity&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;yourapp_winston&amp;#39;&lt;/span&gt;
      }
   }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h6 id=&#34;localjs&#34;&gt;&lt;code&gt;local.js&lt;/code&gt;&lt;/h6&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Build creates this file.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;module&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;exports&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
   &lt;span style=&#34;color:#a6e22e&#34;&gt;logger&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
      &lt;span style=&#34;color:#a6e22e&#34;&gt;emailTransportOptions&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
         &lt;span style=&#34;color:#a6e22e&#34;&gt;auth&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
            &lt;span style=&#34;color:#a6e22e&#34;&gt;pass&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Z-o?(7GnCQsnrx/!-G=LP]-ib&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// App specific password.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;         }
      }
   }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;logger.js&lt;/code&gt; file wraps and hides extra features and transports applied to the logging package we are consuming.&lt;/p&gt;
&lt;h6 id=&#34;loggerjs&#34;&gt;&lt;code&gt;logger.js&lt;/code&gt;&lt;/h6&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;winston&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;winston&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;loggerConfig&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;config&amp;#39;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;logger&lt;/span&gt;;
&lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;winston-syslog-posix&amp;#39;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;SyslogPosix&lt;/span&gt;;
&lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;winston-email&amp;#39;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;Email&lt;/span&gt;;

&lt;span style=&#34;color:#a6e22e&#34;&gt;winston&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;emitErrs&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;logger&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;winston&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Logger&lt;/span&gt;({
   &lt;span style=&#34;color:#75715e&#34;&gt;// Alternatively: set to winston.config.syslog.levels
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;   &lt;span style=&#34;color:#a6e22e&#34;&gt;exitOnError&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;,
   &lt;span style=&#34;color:#75715e&#34;&gt;// Alternatively use winston.addColors(customColours); There are many ways
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// to do the same thing with winston
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;   &lt;span style=&#34;color:#a6e22e&#34;&gt;colors&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;loggerConfig&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;colours&lt;/span&gt;,
   &lt;span style=&#34;color:#a6e22e&#34;&gt;levels&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;loggerConfig&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;levels&lt;/span&gt;
});

&lt;span style=&#34;color:#75715e&#34;&gt;// Add transports. There are plenty of options provided and you can add your own.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;logger&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;addConsole&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;config&lt;/span&gt;) {
   &lt;span style=&#34;color:#a6e22e&#34;&gt;logger&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;winston&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;transports&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Console&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;config&lt;/span&gt;);
   &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;;
};

&lt;span style=&#34;color:#a6e22e&#34;&gt;logger&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;addFile&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;config&lt;/span&gt;) {
   &lt;span style=&#34;color:#a6e22e&#34;&gt;logger&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;winston&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;transports&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;File&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;config&lt;/span&gt;);
   &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;;
};

&lt;span style=&#34;color:#a6e22e&#34;&gt;logger&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;addPosixSyslog&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;config&lt;/span&gt;) {
   &lt;span style=&#34;color:#a6e22e&#34;&gt;logger&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;winston&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;transports&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;SyslogPosix&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;config&lt;/span&gt;);
   &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;;
};

&lt;span style=&#34;color:#a6e22e&#34;&gt;logger&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;addEmail&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;config&lt;/span&gt;) {
   &lt;span style=&#34;color:#a6e22e&#34;&gt;logger&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;winston&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;transports&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Email&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;config&lt;/span&gt;);
   &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;;
};

&lt;span style=&#34;color:#a6e22e&#34;&gt;logger&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;emailLoggerFailure&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;/*level, msg, meta*/&lt;/span&gt;) {
   &lt;span style=&#34;color:#75715e&#34;&gt;// If called with an error, then only the err param is supplied.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// If not called with an error, level, msg and meta are supplied.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;logger&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;alert&lt;/span&gt;(
      &lt;span style=&#34;color:#a6e22e&#34;&gt;JSON&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stringify&lt;/span&gt;(
         &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;error-code:&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;code&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;. &amp;#39;&lt;/span&gt;
         &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;error-message:&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;. &amp;#39;&lt;/span&gt;
         &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;error-response:&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;response&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;. logger-level:&amp;#39;&lt;/span&gt;
         &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;transport&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;level&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;. transport:&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;transport&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;
      )
   );
};

&lt;span style=&#34;color:#a6e22e&#34;&gt;logger&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;init&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; () {
   &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;loggerConfig&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;fileTransportOptions&lt;/span&gt;)
      &lt;span style=&#34;color:#a6e22e&#34;&gt;logger&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;addFile&lt;/span&gt;( &lt;span style=&#34;color:#a6e22e&#34;&gt;loggerConfig&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;fileTransportOptions&lt;/span&gt; );
   &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;loggerConfig&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;consoleTransportOptions&lt;/span&gt;)
      &lt;span style=&#34;color:#a6e22e&#34;&gt;logger&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;addConsole&lt;/span&gt;( &lt;span style=&#34;color:#a6e22e&#34;&gt;loggerConfig&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;consoleTransportOptions&lt;/span&gt; );
   &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;loggerConfig&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;syslogPosixTransportOptions&lt;/span&gt;)
      &lt;span style=&#34;color:#a6e22e&#34;&gt;logger&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;addPosixSyslog&lt;/span&gt;( &lt;span style=&#34;color:#a6e22e&#34;&gt;loggerConfig&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;syslogPosixTransportOptions&lt;/span&gt; );
   &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;loggerConfig&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;emailTransportOptions&lt;/span&gt;)
      &lt;span style=&#34;color:#a6e22e&#34;&gt;logger&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;addEmail&lt;/span&gt;( &lt;span style=&#34;color:#a6e22e&#34;&gt;loggerConfig&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;emailTransportOptions&lt;/span&gt; );
};

&lt;span style=&#34;color:#a6e22e&#34;&gt;module&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;exports&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;logger&lt;/span&gt;;
&lt;span style=&#34;color:#a6e22e&#34;&gt;module&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;exports&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stream&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
   &lt;span style=&#34;color:#a6e22e&#34;&gt;write&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;encoding&lt;/span&gt;) {
      &lt;span style=&#34;color:#a6e22e&#34;&gt;logger&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;info&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt;);
   }
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When the app first starts it initialises the logger on the &lt;code&gt;logger.init();&lt;/code&gt; line below.&lt;/p&gt;
&lt;h6 id=&#34;appjs&#34;&gt;&lt;code&gt;app.js&lt;/code&gt;&lt;/h6&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;express&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;express&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;morganLogger&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;morgan&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;logger&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;./util/logger&amp;#39;&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// Or use requireFrom module so no relative paths.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;express&lt;/span&gt;();
&lt;span style=&#34;color:#75715e&#34;&gt;//...
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#3c3d38&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;logger&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;init&lt;/span&gt;();
&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;port&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;process&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;env&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;PORT&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3000&lt;/span&gt;);
&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;views&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;__dirname&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/views&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;view engine&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;jade&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#75715e&#34;&gt;//...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// In order to utilise connect/express logger module in our third party logger,
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Pipe the messages through.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;use&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;morganLogger&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;combined&amp;#39;&lt;/span&gt;, {&lt;span style=&#34;color:#a6e22e&#34;&gt;stream&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;logger&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stream&lt;/span&gt;}));
&lt;span style=&#34;color:#75715e&#34;&gt;//...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;use&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;express&lt;/span&gt;.&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;path&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;join&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;__dirname&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;public&amp;#39;&lt;/span&gt;)));
&lt;span style=&#34;color:#75715e&#34;&gt;//...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;./routes&amp;#39;&lt;/span&gt;)(&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;);

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;development&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;env&amp;#39;&lt;/span&gt;)) {
   &lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;use&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;errorHandler&lt;/span&gt;({ &lt;span style=&#34;color:#a6e22e&#34;&gt;dumpExceptions&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;showStack&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt; }));
   &lt;span style=&#34;color:#75715e&#34;&gt;//...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;production&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;env&amp;#39;&lt;/span&gt;)) {
   &lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;use&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;errorHandler&lt;/span&gt;());
   &lt;span style=&#34;color:#75715e&#34;&gt;//...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}

&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;createServer&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;listen&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;port&amp;#39;&lt;/span&gt;), &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(){
   &lt;span style=&#34;color:#a6e22e&#34;&gt;logger&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;info&lt;/span&gt;(
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Express server listening on port &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;port&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; in &amp;#39;&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;process&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;env&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NODE_ENV&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; mode&amp;#39;&lt;/span&gt;
   );
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;You can also optionally log JSON metadata&lt;/li&gt;
&lt;li&gt;You can provide an optional callback to do any work required, which will be called once all transports have logged the specified message&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here are some examples of how you can use the logger. The &lt;code&gt;logger.log(&amp;lt;level&amp;gt;&lt;/code&gt; can be replaced with &lt;code&gt;logger.&amp;lt;level&amp;gt;(&lt;/code&gt; where level is any of the levels defined in the &lt;code&gt;default.js&lt;/code&gt; configuration file above:&lt;/p&gt;
&lt;h6 id=&#34;anywhere-you-need-logging&#34;&gt;Anywhere you need logging&lt;/h6&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// With string interpolation also.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;logger&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;info&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test message %s&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;my string&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#a6e22e&#34;&gt;logger&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;info&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test message %d&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;123&lt;/span&gt;);
&lt;span style=&#34;color:#a6e22e&#34;&gt;logger&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;info&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test message %j&amp;#39;&lt;/span&gt;, {&lt;span style=&#34;color:#a6e22e&#34;&gt;aPropertyName&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Some message details&amp;#39;&lt;/span&gt;}, {});
&lt;span style=&#34;color:#a6e22e&#34;&gt;logger&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;info&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test message %s, %s&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;first&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;second&amp;#39;&lt;/span&gt;, {&lt;span style=&#34;color:#a6e22e&#34;&gt;aPropertyName&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Some message details&amp;#39;&lt;/span&gt;});
&lt;span style=&#34;color:#a6e22e&#34;&gt;logger&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;info&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test message&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;first&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;second&amp;#39;&lt;/span&gt;, {&lt;span style=&#34;color:#a6e22e&#34;&gt;aPropertyName&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Some message details&amp;#39;&lt;/span&gt;});
&lt;span style=&#34;color:#a6e22e&#34;&gt;logger&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;info&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test message %s, %s&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;first&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;second&amp;#39;&lt;/span&gt;, {&lt;span style=&#34;color:#a6e22e&#34;&gt;aPropertyName&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Some message details&amp;#39;&lt;/span&gt;}, &lt;span style=&#34;color:#a6e22e&#34;&gt;logger&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;emailLoggerFailure&lt;/span&gt;);
&lt;span style=&#34;color:#a6e22e&#34;&gt;logger&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;info&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test message&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;first&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;second&amp;#39;&lt;/span&gt;, {&lt;span style=&#34;color:#a6e22e&#34;&gt;aPropertyName&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Some message details&amp;#39;&lt;/span&gt;}, &lt;span style=&#34;color:#a6e22e&#34;&gt;logger&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;emailLoggerFailure&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Also consider hiding cross cutting concerns like logging using Aspect Oriented Programing (AOP)&lt;/p&gt;
&lt;h3 id=&#34;insufficient-monitoring&#34;&gt;Insufficient Monitoring&lt;/h3&gt;














&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;
        &lt;img alt=&#34;PreventionEASY&#34; srcset=&#34;
               /media/post/2015/11/preventioneasy_hu7811e2824d2f1967265d41ed158ceca7_1154_9915a0d32ef1f1316f8f37d772f8b818.png 400w,
               /media/post/2015/11/preventioneasy_hu7811e2824d2f1967265d41ed158ceca7_1154_77ee5649450b499c3c559d9fb20100b5.png 760w,
               /media/post/2015/11/preventioneasy_hu7811e2824d2f1967265d41ed158ceca7_1154_1200x1200_fit_lanczos_2.png 1200w&#34;
               src=&#34;https://binarymist.io/media/post/2015/11/preventioneasy_hu7811e2824d2f1967265d41ed158ceca7_1154_9915a0d32ef1f1316f8f37d772f8b818.png&#34;
               width=&#34;760&#34;
               height=&#34;22&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;There are a couple of ways of approaching monitoring. You may want to see the health of your application even if it is all fine, or only to be notified if it is not fine (sometimes called the dark cockpit approach).&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://f1.holisticinfosecforwebdevelopers.com/chap03.html#vps-countermeasures-lack-of-visibility-proactive-monitoring-monit&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Monit&lt;/a&gt; is an &lt;a href=&#34;https://f1.holisticinfosecforwebdevelopers.com/chap03.html#vps-countermeasures-lack-of-visibility-proactive-monitoring-getting-started-with-monit&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;excellent tool&lt;/a&gt; for the dark cockpit approach. It&amp;rsquo;s easy to configure. Has excellent short &lt;a href=&#34;https://mmonit.com/monit/documentation/monit.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;documentation&lt;/a&gt; that is easy to understand and the configuration file has lots of examples commented out ready for you to take as is and modify to suite your environment.&lt;/p&gt;
&lt;h2 id=&#34;risks-that-solution-causes&#34;&gt;Risks that Solution Causes&lt;/h2&gt;
&lt;h3 id=&#34;lack-of-visibility&#34;&gt;Lack of Visibility&lt;/h3&gt;
&lt;p&gt;With the added visibility, you will have to make decisions based on the new found information you now have. There will be no more blissful ignorance if there was before.&lt;/p&gt;
&lt;h3 id=&#34;insufficient-logging-and-monitoring-1&#34;&gt;Insufficient Logging and Monitoring&lt;/h3&gt;
&lt;p&gt;There will be learning and work to be done to become familiar with libraries and tooling. Code will have to be written around logging as in wrapping libraries, initialising and adding logging statements or hiding them using AOP.&lt;/p&gt;
&lt;h2 id=&#34;costs-and-trade-offs&#34;&gt;Costs and Trade-offs&lt;/h2&gt;
&lt;h3 id=&#34;insufficient-logging-and-monitoring-2&#34;&gt;Insufficient Logging and Monitoring&lt;/h3&gt;
&lt;p&gt;You can do a lot for little cost here. I would rather trade off a few days work in order to have a really good logging system through your code base that is going to show you errors fast in development and then show you different errors in the places your DevOps need to see them in production.&lt;/p&gt;
&lt;p&gt;Same for monitoring. Find a tool that you find working with a pleasure. There are just about always free and open source tools to every commercial alternative. If you are working with a start-up or young business, the free and open source tools can be excellent to keep ongoing costs down. Especially mature tools that are also well maintained like Monit.&lt;/p&gt;
&lt;h2 id=&#34;additional-resources&#34;&gt;Additional Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/rtgibbons/7354879&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Details&lt;/a&gt; that &lt;a href=&#34;https://thejsf.wordpress.com/2015/01/18/node-js-logging-with-winston/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;helped&lt;/a&gt; setup NodeJS logging&lt;/li&gt;
&lt;li&gt;Application logging to syslog server on another machine:
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://unix.stackexchange.com/questions/67250/where-does-rsyslog-keep-facility-local0&#34;&gt;http://unix.stackexchange.com/questions/67250/where-does-rsyslog-keep-facility-local0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wiki.rsyslog.com/index.php/Very_simple_config_--_starting_point_for_modifications&#34;&gt;http://wiki.rsyslog.com/index.php/Very_simple_config_--_starting_point_for_modifications&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Or the &lt;a href=&#34;http://www.rsyslog.com/doc/v8-stable/configuration/modules/imudp.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;new style configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.gentoo.org/wiki/Rsyslog#Severity&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Syslog compatible protocol severities&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Consuming Free and Open Source</title>
      <link>https://binarymist.io/blog/2015/10/29/consuming-free-and-open-source/</link>
      <pubDate>Thu, 29 Oct 2015 00:00:00 +1300</pubDate>
      <guid>https://binarymist.io/blog/2015/10/29/consuming-free-and-open-source/</guid>
      <description>&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Consuming Free and Open Source&lt;/title&gt;
    &lt;link rel=&#34;canonical&#34; href=&#34;https://binarymist.wordpress.com/2015/10/29/consuming-free-and-open-source/&#34;/&gt;
    &lt;meta http-equiv=&#34;content-type&#34; content=&#34;text/html; charset=utf-8&#34;/&gt;
    &lt;meta http-equiv=&#34;refresh&#34; content=&#34;2; url=https://binarymist.wordpress.com/2015/10/29/consuming-free-and-open-source/&#34;/&gt;
  &lt;/head&gt;
&lt;/html&gt;
</description>
    </item>
    
    <item>
      <title>Risks and Countermeasures to the Management of Application Secrets</title>
      <link>https://binarymist.io/blog/2015/09/17/risks-and-countermeasures-to-the-management-of-application-secrets/</link>
      <pubDate>Thu, 17 Sep 2015 00:00:00 +1200</pubDate>
      <guid>https://binarymist.io/blog/2015/09/17/risks-and-countermeasures-to-the-management-of-application-secrets/</guid>
      <description>&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Risks and Countermeasures to the Management of Application Secrets&lt;/title&gt;
    &lt;link rel=&#34;canonical&#34; href=&#34;https://binarymist.wordpress.com/2015/09/17/risks-and-countermeasures-to-the-management-of-application-secrets/&#34;/&gt;
    &lt;meta http-equiv=&#34;content-type&#34; content=&#34;text/html; charset=utf-8&#34;/&gt;
    &lt;meta http-equiv=&#34;refresh&#34; content=&#34;4; url=https://binarymist.wordpress.com/2015/09/17/risks-and-countermeasures-to-the-management-of-application-secrets/&#34;/&gt;
  &lt;/head&gt;
&lt;/html&gt;
</description>
    </item>
    
    <item>
      <title>Node.js Asynchronicity and Callback Nesting</title>
      <link>https://binarymist.io/blog/2014/07/26/node.js-asynchronicity-and-callback-nesting/</link>
      <pubDate>Sat, 26 Jul 2014 00:00:00 +1200</pubDate>
      <guid>https://binarymist.io/blog/2014/07/26/node.js-asynchronicity-and-callback-nesting/</guid>
      <description>&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Node.js Asynchronicity and Callback Nesting&lt;/title&gt;
    &lt;link rel=&#34;canonical&#34; href=&#34;https://binarymist.wordpress.com/2014/07/26/node-js-asynchronicity-and-callback-nesting/&#34;/&gt;
    &lt;meta http-equiv=&#34;content-type&#34; content=&#34;text/html; charset=utf-8&#34;/&gt;
    &lt;meta http-equiv=&#34;refresh&#34; content=&#34;3; url=https://binarymist.wordpress.com/2014/07/26/node-js-asynchronicity-and-callback-nesting/&#34;/&gt;
  &lt;/head&gt;
&lt;/html&gt;
</description>
    </item>
    
    <item>
      <title>Exploring JavaScript Prototypes</title>
      <link>https://binarymist.io/blog/2014/06/28/exploring-javascript-prototypes/</link>
      <pubDate>Sat, 28 Jun 2014 00:00:00 +1200</pubDate>
      <guid>https://binarymist.io/blog/2014/06/28/exploring-javascript-prototypes/</guid>
      <description>&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Exploring JavaScript Prototypes&lt;/title&gt;
    &lt;link rel=&#34;canonical&#34; href=&#34;https://binarymist.wordpress.com/2014/06/28/exploring-javascript-prototypes/&#34;/&gt;
    &lt;meta http-equiv=&#34;content-type&#34; content=&#34;text/html; charset=utf-8&#34;/&gt;
    &lt;meta http-equiv=&#34;refresh&#34; content=&#34;2; url=https://binarymist.wordpress.com/2014/06/28/exploring-javascript-prototypes/&#34;/&gt;
  &lt;/head&gt;
&lt;/html&gt;
</description>
    </item>
    
    <item>
      <title>Exploring JavaScript Closures</title>
      <link>https://binarymist.io/blog/2014/05/31/exploring-javascript-closures/</link>
      <pubDate>Sat, 31 May 2014 00:00:00 +1200</pubDate>
      <guid>https://binarymist.io/blog/2014/05/31/exploring-javascript-closures/</guid>
      <description>&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Exploring JavaScript Closures&lt;/title&gt;
    &lt;link rel=&#34;canonical&#34; href=&#34;https://binarymist.wordpress.com/2014/05/31/javascript-closures/&#34;/&gt;
    &lt;meta http-equiv=&#34;content-type&#34; content=&#34;text/html; charset=utf-8&#34;/&gt;
    &lt;meta http-equiv=&#34;refresh&#34; content=&#34;3; url=https://binarymist.wordpress.com/2014/05/31/javascript-closures/&#34;/&gt;
  &lt;/head&gt;
&lt;/html&gt;
</description>
    </item>
    
    <item>
      <title>Workshop - Writing an Ember.JS Application</title>
      <link>https://binarymist.io/event/chcjs-meetup-2014-workshop-writing-an-ember-js-application/</link>
      <pubDate>Thu, 23 Jan 2014 19:00:00 +1300</pubDate>
      <guid>https://binarymist.io/event/chcjs-meetup-2014-workshop-writing-an-ember-js-application/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Evaluation of AngularJS, EmberJS, BackboneJS &#43; MarionetteJS</title>
      <link>https://binarymist.io/blog/2013/12/28/evaluation-of-angularjs-emberjs-backbonejs-marionettejs/</link>
      <pubDate>Sat, 28 Dec 2013 00:00:00 +1300</pubDate>
      <guid>https://binarymist.io/blog/2013/12/28/evaluation-of-angularjs-emberjs-backbonejs-marionettejs/</guid>
      <description>&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Evaluation of AngularJS, EmberJS, BackboneJS + MarionetteJS&lt;/title&gt;
    &lt;link rel=&#34;canonical&#34; href=&#34;https://binarymist.wordpress.com/2013/12/28/evaluation-of-angularjs-emberjs-backbonejs-marionettejs/&#34;/&gt;
    &lt;meta http-equiv=&#34;content-type&#34; content=&#34;text/html; charset=utf-8&#34;/&gt;
    &lt;meta http-equiv=&#34;refresh&#34; content=&#34;2; url=https://binarymist.wordpress.com/2013/12/28/evaluation-of-angularjs-emberjs-backbonejs-marionettejs/&#34;/&gt;
  &lt;/head&gt;
&lt;/html&gt;
</description>
    </item>
    
    <item>
      <title>JavaScript Object Creation Patterns</title>
      <link>https://binarymist.io/blog/2013/07/06/javascript-object-creation-patterns/</link>
      <pubDate>Sat, 06 Jul 2013 00:00:00 +1200</pubDate>
      <guid>https://binarymist.io/blog/2013/07/06/javascript-object-creation-patterns/</guid>
      <description>&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;JavaScript Object Creation Patterns&lt;/title&gt;
    &lt;link rel=&#34;canonical&#34; href=&#34;https://binarymist.wordpress.com/2013/07/06/javascript-object-creation-patterns/&#34;/&gt;
    &lt;meta http-equiv=&#34;content-type&#34; content=&#34;text/html; charset=utf-8&#34;/&gt;
    &lt;meta http-equiv=&#34;refresh&#34; content=&#34;3; url=https://binarymist.wordpress.com/2013/07/06/javascript-object-creation-patterns/&#34;/&gt;
  &lt;/head&gt;
&lt;/html&gt;
</description>
    </item>
    
    <item>
      <title>Software Engineer Interview Quick Question Set</title>
      <link>https://binarymist.io/blog/2013/05/11/software-engineer-interview-quick-question-set/</link>
      <pubDate>Sat, 11 May 2013 00:00:00 +1200</pubDate>
      <guid>https://binarymist.io/blog/2013/05/11/software-engineer-interview-quick-question-set/</guid>
      <description>&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Software Engineer Interview Quick Question Set&lt;/title&gt;
    &lt;link rel=&#34;canonical&#34; href=&#34;https://binarymist.wordpress.com/2013/05/11/software-engineer-interview-quick-question-set/&#34;/&gt;
    &lt;meta http-equiv=&#34;content-type&#34; content=&#34;text/html; charset=utf-8&#34;/&gt;
    &lt;meta http-equiv=&#34;refresh&#34; content=&#34;3; url=https://binarymist.wordpress.com/2013/05/11/software-engineer-interview-quick-question-set/&#34;/&gt;
  &lt;/head&gt;
&lt;/html&gt;
</description>
    </item>
    
    <item>
      <title>Software Engineer Interview Process and Questions</title>
      <link>https://binarymist.io/blog/2013/04/27/software-engineer-interview-process-and-questions/</link>
      <pubDate>Sat, 27 Apr 2013 00:00:00 +1200</pubDate>
      <guid>https://binarymist.io/blog/2013/04/27/software-engineer-interview-process-and-questions/</guid>
      <description>&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Software Engineer Interview Process and Questions&lt;/title&gt;
    &lt;link rel=&#34;canonical&#34; href=&#34;https://binarymist.wordpress.com/2013/04/27/software-engineer-interview-process-and-questions/&#34;/&gt;
    &lt;meta http-equiv=&#34;content-type&#34; content=&#34;text/html; charset=utf-8&#34;/&gt;
    &lt;meta http-equiv=&#34;refresh&#34; content=&#34;3; url=https://binarymist.wordpress.com/2013/04/27/software-engineer-interview-process-and-questions/&#34;/&gt;
  &lt;/head&gt;
&lt;/html&gt;
</description>
    </item>
    
    <item>
      <title>JavaScript Coding Standards and Guidelines</title>
      <link>https://binarymist.io/blog/2012/12/19/javascript-coding-standards-and-guidelines/</link>
      <pubDate>Wed, 19 Dec 2012 00:00:00 +1300</pubDate>
      <guid>https://binarymist.io/blog/2012/12/19/javascript-coding-standards-and-guidelines/</guid>
      <description>&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;JavaScript Coding Standards and Guidelines&lt;/title&gt;
    &lt;link rel=&#34;canonical&#34; href=&#34;https://binarymist.wordpress.com/2012/12/19/javascript-coding-standards-and-guidelines/&#34;/&gt;
    &lt;meta http-equiv=&#34;content-type&#34; content=&#34;text/html; charset=utf-8&#34;/&gt;
    &lt;meta http-equiv=&#34;refresh&#34; content=&#34;2; url=https://binarymist.wordpress.com/2012/12/19/javascript-coding-standards-and-guidelines/&#34;/&gt;
  &lt;/head&gt;
&lt;/html&gt;
</description>
    </item>
    
    <item>
      <title>Sanitising User Input from Browser part 1</title>
      <link>https://binarymist.io/blog/2012/11/04/sanitising-user-input-from-browser-part-1/</link>
      <pubDate>Sun, 04 Nov 2012 00:00:00 +1300</pubDate>
      <guid>https://binarymist.io/blog/2012/11/04/sanitising-user-input-from-browser-part-1/</guid>
      <description>&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Sanitising User Input from Browser. part 1&lt;/title&gt;
    &lt;link rel=&#34;canonical&#34; href=&#34;https://binarymist.wordpress.com/2012/11/04/sanitising-user-input-from-browser-part-1/&#34;/&gt;
    &lt;meta http-equiv=&#34;content-type&#34; content=&#34;text/html; charset=utf-8&#34;/&gt;
    &lt;meta http-equiv=&#34;refresh&#34; content=&#34;2; url=https://binarymist.wordpress.com/2012/11/04/sanitising-user-input-from-browser-part-1/&#34;/&gt;
  &lt;/head&gt;
&lt;/html&gt;
</description>
    </item>
    
    <item>
      <title>JavaScript Properties</title>
      <link>https://binarymist.io/blog/2012/10/02/javascript-properties/</link>
      <pubDate>Tue, 02 Oct 2012 00:00:00 +1300</pubDate>
      <guid>https://binarymist.io/blog/2012/10/02/javascript-properties/</guid>
      <description>&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;JavaScript Properties&lt;/title&gt;
    &lt;link rel=&#34;canonical&#34; href=&#34;https://binarymist.wordpress.com/2012/10/02/javascript-properties/&#34;/&gt;
    &lt;meta http-equiv=&#34;content-type&#34; content=&#34;text/html; charset=utf-8&#34;/&gt;
    &lt;meta http-equiv=&#34;refresh&#34; content=&#34;2; url=https://binarymist.wordpress.com/2012/10/02/javascript-properties/&#34;/&gt;
  &lt;/head&gt;
&lt;/html&gt;
</description>
    </item>
    
    <item>
      <title>Extending, Currying and Monkey Patching part 3</title>
      <link>https://binarymist.io/blog/2012/05/27/extending-currying-and-monkey-patching-part-3/</link>
      <pubDate>Sun, 27 May 2012 00:00:00 +1200</pubDate>
      <guid>https://binarymist.io/blog/2012/05/27/extending-currying-and-monkey-patching-part-3/</guid>
      <description>&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Extending, Currying and Monkey Patching. part 3&lt;/title&gt;
    &lt;link rel=&#34;canonical&#34; href=&#34;https://binarymist.wordpress.com/2012/05/27/extending-currying-and-monkey-patching-part-3/&#34;/&gt;
    &lt;meta http-equiv=&#34;content-type&#34; content=&#34;text/html; charset=utf-8&#34;/&gt;
    &lt;meta http-equiv=&#34;refresh&#34; content=&#34;2; url=https://binarymist.wordpress.com/2012/05/27/extending-currying-and-monkey-patching-part-3/&#34;/&gt;
  &lt;/head&gt;
&lt;/html&gt;
</description>
    </item>
    
    <item>
      <title>Extending, Currying and Monkey Patching part 2</title>
      <link>https://binarymist.io/blog/2012/05/14/extending-currying-and-monkey-patching-part-2/</link>
      <pubDate>Mon, 14 May 2012 00:00:00 +1200</pubDate>
      <guid>https://binarymist.io/blog/2012/05/14/extending-currying-and-monkey-patching-part-2/</guid>
      <description>&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Extending, Currying and Monkey Patching. part 2&lt;/title&gt;
    &lt;link rel=&#34;canonical&#34; href=&#34;https://binarymist.wordpress.com/2012/05/14/extending-currying-and-monkey-patching-part-2/&#34;/&gt;
    &lt;meta http-equiv=&#34;content-type&#34; content=&#34;text/html; charset=utf-8&#34;/&gt;
    &lt;meta http-equiv=&#34;refresh&#34; content=&#34;2; url=https://binarymist.wordpress.com/2012/05/14/extending-currying-and-monkey-patching-part-2/&#34;/&gt;
  &lt;/head&gt;
&lt;/html&gt;
</description>
    </item>
    
    <item>
      <title>Extending, Currying and Monkey Patching part 1</title>
      <link>https://binarymist.io/blog/2012/04/29/extending-currying-and-monkey-patching-part-1/</link>
      <pubDate>Sun, 29 Apr 2012 00:00:00 +1200</pubDate>
      <guid>https://binarymist.io/blog/2012/04/29/extending-currying-and-monkey-patching-part-1/</guid>
      <description>&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Extending, Currying and Monkey Patching. part 1&lt;/title&gt;
    &lt;link rel=&#34;canonical&#34; href=&#34;https://binarymist.wordpress.com/2012/04/29/extending-currying-and-monkey-patching-part-1/&#34;/&gt;
    &lt;meta http-equiv=&#34;content-type&#34; content=&#34;text/html; charset=utf-8&#34;/&gt;
    &lt;meta http-equiv=&#34;refresh&#34; content=&#34;2; url=https://binarymist.wordpress.com/2012/04/29/extending-currying-and-monkey-patching-part-1/&#34;/&gt;
  &lt;/head&gt;
&lt;/html&gt;
</description>
    </item>
    
    <item>
      <title>JavaScript Reserved Words</title>
      <link>https://binarymist.io/blog/2011/12/19/javascript-reserved-words/</link>
      <pubDate>Mon, 19 Dec 2011 00:00:00 +1300</pubDate>
      <guid>https://binarymist.io/blog/2011/12/19/javascript-reserved-words/</guid>
      <description>&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;JavaScript Reserved Words&lt;/title&gt;
    &lt;link rel=&#34;canonical&#34; href=&#34;https://binarymist.wordpress.com/2011/12/19/javascript-reserved-words/&#34;/&gt;
    &lt;meta http-equiv=&#34;content-type&#34; content=&#34;text/html; charset=utf-8&#34;/&gt;
    &lt;meta http-equiv=&#34;refresh&#34; content=&#34;2; url=https://binarymist.wordpress.com/2011/12/19/javascript-reserved-words/&#34;/&gt;
  &lt;/head&gt;
&lt;/html&gt;
</description>
    </item>
    
    <item>
      <title>Scoping and Hoisting in JavaScript</title>
      <link>https://binarymist.io/blog/2011/11/14/scoping-and-hoisting-in-javascript/</link>
      <pubDate>Mon, 14 Nov 2011 00:00:00 +1300</pubDate>
      <guid>https://binarymist.io/blog/2011/11/14/scoping-and-hoisting-in-javascript/</guid>
      <description>&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Scoping and Hoisting in JavaScript&lt;/title&gt;
    &lt;link rel=&#34;canonical&#34; href=&#34;https://binarymist.wordpress.com/2011/11/14/scoping-hoisting-in-javascript/&#34;/&gt;
    &lt;meta http-equiv=&#34;content-type&#34; content=&#34;text/html; charset=utf-8&#34;/&gt;
    &lt;meta http-equiv=&#34;refresh&#34; content=&#34;2; url=https://binarymist.wordpress.com/2011/11/14/scoping-hoisting-in-javascript/&#34;/&gt;
  &lt;/head&gt;
&lt;/html&gt;
</description>
    </item>
    
    <item>
      <title>Function Declarations vs Function Expressions</title>
      <link>https://binarymist.io/blog/2011/08/17/function-declarations-vs-function-expressions/</link>
      <pubDate>Wed, 17 Aug 2011 00:00:00 +1200</pubDate>
      <guid>https://binarymist.io/blog/2011/08/17/function-declarations-vs-function-expressions/</guid>
      <description>&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Function Declarations vs Function Expressions&lt;/title&gt;
    &lt;link rel=&#34;canonical&#34; href=&#34;https://binarymist.wordpress.com/2011/08/17/function-declarations-vs-function-expressions/&#34;/&gt;
    &lt;meta http-equiv=&#34;content-type&#34; content=&#34;text/html; charset=utf-8&#34;/&gt;
    &lt;meta http-equiv=&#34;refresh&#34; content=&#34;2; url=https://binarymist.wordpress.com/2011/08/17/function-declarations-vs-function-expressions/&#34;/&gt;
  &lt;/head&gt;
&lt;/html&gt;
</description>
    </item>
    
  </channel>
</rss>
