<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>penetration-testing | BinaryMist</title>
    <link>https://binarymist.io/tags/penetration-testing/</link>
      <atom:link href="https://binarymist.io/tags/penetration-testing/index.xml" rel="self" type="application/rss+xml" />
    <description>penetration-testing</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>© 2018 BinaryMist Ltd</copyright><lastBuildDate>Mon, 20 Dec 2021 10:00:00 +1300</lastBuildDate>
    <image>
      <url>https://binarymist.io/media/sharing.png</url>
      <title>penetration-testing</title>
      <link>https://binarymist.io/tags/penetration-testing/</link>
    </image>
    
    <item>
      <title>PurpleTeam License Change</title>
      <link>https://binarymist.io/blog/2021/12/20/purpleteam-license-change/</link>
      <pubDate>Mon, 20 Dec 2021 10:00:00 +1300</pubDate>
      <guid>https://binarymist.io/blog/2021/12/20/purpleteam-license-change/</guid>
      <description>&lt;p&gt;To start with the:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PurpleTeam &lt;code&gt;local&lt;/code&gt; environment (AKA: OWASP PurpleTeam) was licensed with the AGPL-3.0&lt;/li&gt;
&lt;li&gt;PurpleTeam &lt;code&gt;cloud&lt;/code&gt; environment (AKL: BinaryMist PurpleTeam) was licensed with a proprietary (non-free) license&lt;/li&gt;
&lt;li&gt;Projects that are not part of PurpleTeam &lt;code&gt;local&lt;/code&gt; or &lt;code&gt;cloud&lt;/code&gt; environments, but are ancillary to PurpleTeam and may or may not be within the &lt;a href=&#34;https://github.com/purpleteam-labs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;purpleteam-labs Github organisation&lt;/a&gt;. These may be license with the MIT license&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PurpleTeam-Labs was never really happy with the AGPL-3.0 as it didn&amp;rsquo;t really convey our intentions well. Recently we heard about the Business Source License (BSL). MariaDB, CockroachDB and Redpanda pioneered the BSL, and we thank you for creating this license. When we looked into it it actually did convey our intentions well, which are to deter other security testing service provides (DAST, SAST and IAST)(specifically offering a SaaS) from taking our work and using it in direct competition with PurpleTeam-Labs.
For the majority of PurpleTeam consumers the BSL that we&amp;rsquo;ve applied to the PurpleTeam &lt;code&gt;local&lt;/code&gt; repositories will not limit your free usage of PurpleTeam &lt;code&gt;local&lt;/code&gt; at all. We have always wanted PurpleTeam &lt;code&gt;local&lt;/code&gt; to be available to Developers, DevOps Engineers, their teams, and others willing to set-up the &lt;code&gt;local&lt;/code&gt; components to be able to use freely in-house providing it&amp;rsquo;s not being used as a service in competition with PurpleTeam-Labs.&lt;/p&gt;
&lt;p&gt;For PurpleTeam &lt;code&gt;cloud&lt;/code&gt;, the license (PurpleTeam Cloud License (PCL)) is basically the same as it was before. We&amp;rsquo;ve just made it clearer and more accessible.&lt;/p&gt;
&lt;p&gt;For the projects ancillary to PurpleTeam their licenses haven’t changed.&lt;/p&gt;
&lt;p&gt;The licenses are available in each source code repository at &lt;a href=&#34;https://github.com/purpleteam-labs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Github&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Talk - Purple Teaming with OWASP purpleteam</title>
      <link>https://binarymist.io/event/2021-11-12-purple-teaming-with-purpleteam-owasp-global-appsec-us/</link>
      <pubDate>Fri, 12 Nov 2021 12:00:00 +1300</pubDate>
      <guid>https://binarymist.io/event/2021-11-12-purple-teaming-with-purpleteam-owasp-global-appsec-us/</guid>
      <description>&lt;p&gt;Kim will briefly discuss the three year journey that has brought purpleteam from a proof of concept (PoC) to where it is now.&lt;/p&gt;
&lt;p&gt;An overview of the NodeJS micro-services with a pluggable tester architecture will be provided.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/ACuaP-ZToKw&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h3 id=&#34;why-would-i-want-it-in-my-build-pipelines&#34;&gt;Why would I want it in my build pipelines?&lt;/h3&gt;
&lt;p&gt;In this section Kim will discus the problem that purpleteam solves,
along with the cost savings of finding and fixing your application security defects early (as you&amp;rsquo;re introducing them) as opposed to late (weeks months later with external penetration testing) or not at all.&lt;/p&gt;
&lt;!-- uncomment below when available --&gt;
&lt;!-- &lt;br&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;1784d6fdfc3d4fab8ec5a67156387bf3&#34; data-ratio=&#34;1.37081659973226&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;br&gt;--&gt;
&lt;h3 id=&#34;ok-i-want-it-how-do-i-set-it-up&#34;&gt;OK, I want it, how do I set it up?&lt;/h3&gt;
&lt;p&gt;Kim will walk you through all of the components and how to get them set-up and configured&lt;/p&gt;
&lt;h3 id=&#34;great-but-what-do-the-work-flows-look-like&#34;&gt;Great, but what do the work flows look like?&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s walk through the different ways purpleteam can be run and utilised, such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Running purpleteam standalone (with UI)&lt;/li&gt;
&lt;li&gt;Running purpleteam from within your pipelines as a spawned sub process (headless: without UI)&lt;/li&gt;
&lt;li&gt;Running all of the purpleteam components, including debugging each and every one of them if and when the need arises&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
</description>
    </item>
    
    <item>
      <title>Talk - Dev Team Security: Back to the Future</title>
      <link>https://binarymist.io/event/2021-11-05-dev-team-security-back-to-the-future/</link>
      <pubDate>Fri, 05 Nov 2021 15:00:00 +1300</pubDate>
      <guid>https://binarymist.io/event/2021-11-05-dev-team-security-back-to-the-future/</guid>
      <description>&lt;p&gt;There have been significant improvements in the information and tooling available recently, some new standards are emerging and starting to reflect this also.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/XqvK4C8pgz0&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;br&gt;
&lt;p&gt;In this talk Kim will: Revisit the past, what we as development teams had in our info-sec arsenal,
how confusing it was and how much manual work we were expected to do to measure up.
A detailed look at what we have today, and what the future looks like as a software development team with security as a priority.&lt;/p&gt;
&lt;!-- uncomment below when available --&gt;
&lt;!-- &lt;br&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;1784d6fdfc3d4fab8ec5a67156387bf3&#34; data-ratio=&#34;1.37081659973226&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;br&gt;--&gt;
</description>
    </item>
    
    <item>
      <title>Talk - Purple Teaming with OWASP purpleteam</title>
      <link>https://binarymist.io/event/2021-10-29-purple-teaming-with-purpleteam-all-day-dev-ops/</link>
      <pubDate>Fri, 29 Oct 2021 16:00:00 +1300</pubDate>
      <guid>https://binarymist.io/event/2021-10-29-purple-teaming-with-purpleteam-all-day-dev-ops/</guid>
      <description>&lt;p&gt;Kim will briefly discuss the three year journey that has brought purpleteam from a proof of concept (PoC) to where it is now.&lt;/p&gt;
&lt;p&gt;An overview of the NodeJS micro-services with a pluggable tester architecture will be provided.&lt;/p&gt;














&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;
        &lt;img alt=&#34;Kim Carter&#34; srcset=&#34;
               /event/2021-10-29-purple-teaming-with-purpleteam-all-day-dev-ops/KimCarter-Horizontal720w-min_hu5482ebd621a46d8dd9b0b02a558b943f_138466_0b6a8327f54049241c4a1807f6805214.png 400w,
               /event/2021-10-29-purple-teaming-with-purpleteam-all-day-dev-ops/KimCarter-Horizontal720w-min_hu5482ebd621a46d8dd9b0b02a558b943f_138466_ad8874fbe9103a7db7faf1f9037eb7c7.png 760w,
               /event/2021-10-29-purple-teaming-with-purpleteam-all-day-dev-ops/KimCarter-Horizontal720w-min_hu5482ebd621a46d8dd9b0b02a558b943f_138466_1200x1200_fit_lanczos_2.png 1200w&#34;
               src=&#34;https://binarymist.io/event/2021-10-29-purple-teaming-with-purpleteam-all-day-dev-ops/KimCarter-Horizontal720w-min_hu5482ebd621a46d8dd9b0b02a558b943f_138466_0b6a8327f54049241c4a1807f6805214.png&#34;
               width=&#34;720&#34;
               height=&#34;405&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;h3 id=&#34;why-would-i-want-it-in-my-build-pipelines&#34;&gt;Why would I want it in my build pipelines?&lt;/h3&gt;
&lt;p&gt;In this section Kim will discus the problem that purpleteam solves,
along with the cost savings of finding and fixing your application security defects early (as you&amp;rsquo;re introducing them) as opposed to late (weeks months later with external penetration testing) or not at all.&lt;/p&gt;
&lt;!-- uncomment below when available --&gt;
&lt;!-- &lt;br&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;1784d6fdfc3d4fab8ec5a67156387bf3&#34; data-ratio=&#34;1.37081659973226&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;br&gt;--&gt;
&lt;h3 id=&#34;ok-i-want-it-how-do-i-set-it-up&#34;&gt;OK, I want it, how do I set it up?&lt;/h3&gt;
&lt;p&gt;Kim will walk you through all of the components and how to get them set-up and configured&lt;/p&gt;
&lt;h3 id=&#34;great-but-what-do-the-work-flows-look-like&#34;&gt;Great, but what do the work flows look like?&lt;/h3&gt;
&lt;br&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/ACuaP-ZToKw&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;br&gt;
&lt;p&gt;Let&amp;rsquo;s walk through the different ways purpleteam can be run and utilised, such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Running purpleteam standalone (with UI)&lt;/li&gt;
&lt;li&gt;Running purpleteam from within your pipelines as a spawned sub process (headless: without UI)&lt;/li&gt;
&lt;li&gt;Running all of the purpleteam components, including debugging each and every one of them if and when the need arises&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
</description>
    </item>
    
    <item>
      <title>Talk - Purple Teaming with OWASP purpleteam</title>
      <link>https://binarymist.io/event/2021-10-27-purple-teaming-with-purpleteam-chch-js/</link>
      <pubDate>Wed, 27 Oct 2021 17:30:00 +1300</pubDate>
      <guid>https://binarymist.io/event/2021-10-27-purple-teaming-with-purpleteam-chch-js/</guid>
      <description>&lt;p&gt;Kim will briefly discuss the three year journey that has brought purpleteam from a proof of concept (PoC) to where it is now.&lt;/p&gt;
&lt;p&gt;An overview of the NodeJS micro-services with a pluggable tester architecture will be provided.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/ACuaP-ZToKw&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h3 id=&#34;why-would-i-want-it-in-my-build-pipelines&#34;&gt;Why would I want it in my build pipelines?&lt;/h3&gt;
&lt;p&gt;In this section Kim will discus the problem that purpleteam solves,
along with the cost savings of finding and fixing your application security defects early (as you&amp;rsquo;re introducing them) as opposed to late (weeks months later with external penetration testing) or not at all.&lt;/p&gt;
&lt;!-- uncomment below when available --&gt;
&lt;!-- &lt;br&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;1784d6fdfc3d4fab8ec5a67156387bf3&#34; data-ratio=&#34;1.37081659973226&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;br&gt;--&gt;
&lt;h3 id=&#34;ok-i-want-it-how-do-i-set-it-up&#34;&gt;OK, I want it, how do I set it up?&lt;/h3&gt;
&lt;p&gt;Kim will walk you through all of the components and how to get them set-up and configured&lt;/p&gt;
&lt;h3 id=&#34;great-but-what-do-the-work-flows-look-like&#34;&gt;Great, but what do the work flows look like?&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s walk through the different ways purpleteam can be run and utilised, such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Running purpleteam standalone (with UI)&lt;/li&gt;
&lt;li&gt;Running purpleteam from within your pipelines as a spawned sub process (headless: without UI)&lt;/li&gt;
&lt;li&gt;Running all of the purpleteam components, including debugging each and every one of them if and when the need arises&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
</description>
    </item>
    
    <item>
      <title>Talk - Purple Teaming with OWASP purpleteam</title>
      <link>https://binarymist.io/event/2021-purple-teaming-with-purpleteam-owasp-20th-anniversary/</link>
      <pubDate>Fri, 24 Sep 2021 14:25:00 +1200</pubDate>
      <guid>https://binarymist.io/event/2021-purple-teaming-with-purpleteam-owasp-20th-anniversary/</guid>
      <description>&lt;p&gt;Kim will briefly discuss the three year journey that has brought purpleteam from a proof of concept (PoC) to where it is now.&lt;/p&gt;
&lt;p&gt;An overview of the NodeJS micro-services with a pluggable tester architecture will be provided.&lt;/p&gt;














&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;
        &lt;img alt=&#34;Kim Carter&#34; srcset=&#34;
               /event/2021-purple-teaming-with-purpleteam-owasp-20th-anniversary/20th_Twitter_Speaker_Post_Kim%20Carter_720W-min_hu8ffa2922a64b28014bab8151110880be_39970_4165377ca94114d5c9c68c0fa37eee8c.jpg 400w,
               /event/2021-purple-teaming-with-purpleteam-owasp-20th-anniversary/20th_Twitter_Speaker_Post_Kim%20Carter_720W-min_hu8ffa2922a64b28014bab8151110880be_39970_a3f883836420a29e63291fe1163761ff.jpg 760w,
               /event/2021-purple-teaming-with-purpleteam-owasp-20th-anniversary/20th_Twitter_Speaker_Post_Kim%20Carter_720W-min_hu8ffa2922a64b28014bab8151110880be_39970_1200x1200_fit_q90_lanczos.jpg 1200w&#34;
               src=&#34;https://binarymist.io/event/2021-purple-teaming-with-purpleteam-owasp-20th-anniversary/20th_Twitter_Speaker_Post_Kim%20Carter_720W-min_hu8ffa2922a64b28014bab8151110880be_39970_4165377ca94114d5c9c68c0fa37eee8c.jpg&#34;
               width=&#34;720&#34;
               height=&#34;405&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;h3 id=&#34;why-would-i-want-it-in-my-build-pipelines&#34;&gt;Why would I want it in my build pipelines?&lt;/h3&gt;
&lt;p&gt;In this section Kim will discus the problem that purpleteam solves,
along with the cost savings of finding and fixing your application security defects early (as you&amp;rsquo;re introducing them) as opposed to late (weeks months later with external penetration testing) or not at all.&lt;/p&gt;
&lt;!-- uncomment below when available --&gt;
&lt;!-- &lt;br&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;1784d6fdfc3d4fab8ec5a67156387bf3&#34; data-ratio=&#34;1.37081659973226&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;br&gt;--&gt;
&lt;h3 id=&#34;ok-i-want-it-how-do-i-set-it-up&#34;&gt;OK, I want it, how do I set it up?&lt;/h3&gt;
&lt;p&gt;Kim will walk you through all of the components and how to get them set-up and configured&lt;/p&gt;
&lt;h3 id=&#34;great-but-what-do-the-work-flows-look-like&#34;&gt;Great, but what do the work flows look like?&lt;/h3&gt;
&lt;br&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/ACuaP-ZToKw&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;br&gt;
&lt;p&gt;Let&amp;rsquo;s walk through the different ways purpleteam can be run and utilised, such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Running purpleteam standalone (with UI)&lt;/li&gt;
&lt;li&gt;Running purpleteam from within your pipelines as a spawned sub process (headless: without UI)&lt;/li&gt;
&lt;li&gt;Running all of the purpleteam components, including debugging each and every one of them if and when the need arises&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
</description>
    </item>
    
    <item>
      <title>PurpleTeam TLS Tester Implementation</title>
      <link>https://binarymist.io/blog/2021/09/07/purpleteam-tls-tester-implementation/</link>
      <pubDate>Tue, 07 Sep 2021 17:17:11 +1300</pubDate>
      <guid>https://binarymist.io/blog/2021/09/07/purpleteam-tls-tester-implementation/</guid>
      <description>&lt;p&gt;The &lt;em&gt;PurpleTeam&lt;/em&gt; TLS &lt;em&gt;Tester&lt;/em&gt; is now implemented. I&amp;rsquo;ve written this post to highlight the learnings, and to talk about the various significant changes that were made as part of the release. All core components were released as version &lt;code&gt;1.0.0-alpha.3&lt;/code&gt;.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/ACuaP-ZToKw&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;br&gt;
&lt;p&gt;The details of the above video can be found &lt;a href=&#34;https://purpleteam-labs.com/project/video-pt-full-system-run-2021/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;contents&#34;&gt;Contents&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#work-items-created&#34;&gt;Work items created&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#synchronisation&#34;&gt;Synchronisation&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#time-outs&#34;&gt;Time-outs&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#cli&#34;&gt;CLI&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#for-the-test-command&#34;&gt;For the &lt;code&gt;test&lt;/code&gt; command&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#for-tester-progress--pctcomplete--bugcount--updates&#34;&gt;For &lt;code&gt;tester&lt;/code&gt;[ &lt;code&gt;Progress&lt;/code&gt; | &lt;code&gt;PctComplete&lt;/code&gt; | &lt;code&gt;BugCount&lt;/code&gt; ] updates&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#orchestrator&#34;&gt;Orchestrator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#app-tester&#34;&gt;App Tester&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#tls-tester&#34;&gt;Tls Tester&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#message-flows&#34;&gt;Message flows&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#tls-tester-implementation&#34;&gt;TLS Tester Implementation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All of the release notes can be accessed from the &lt;em&gt;PurpleTeam&lt;/em&gt; &lt;a href=&#34;https://purpleteam-labs.com/doc/changelog/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Changelog&lt;/a&gt; page and/or the &lt;a href=&#34;https://github.com/purpleteam-labs/purpleteam/issues/60&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Github issue&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Massive set of releases just gone live around the new &lt;a href=&#34;https://twitter.com/hashtag/SSL?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#SSL&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/TLS?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#TLS&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/Tester?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#Tester&lt;/a&gt; &lt;a href=&#34;https://t.co/f0bPNRBjUh&#34;&gt;https://t.co/f0bPNRBjUh&lt;/a&gt;&lt;/p&gt;&amp;mdash; PurpleTeam (@purpleteamlabs) &lt;a href=&#34;https://twitter.com/purpleteamlabs/status/1433018222412910595?ref_src=twsrc%5Etfw&#34;&gt;September 1, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;Updated a number of values around timeouts on 2021-12-09. Source of Pull Requests:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/purpleteam-labs/purpleteam/pull/105&#34;&gt;https://github.com/purpleteam-labs/purpleteam/pull/105&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/purpleteam-labs/purpleteam-orchestrator/pull/28&#34;&gt;https://github.com/purpleteam-labs/purpleteam-orchestrator/pull/28&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/purpleteam-labs/purpleteam-app-scanner/pull/34&#34;&gt;https://github.com/purpleteam-labs/purpleteam-app-scanner/pull/34&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;documentation&#34;&gt;Documentation&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;a href=&#34;https://purpleteam-labs.com/doc/definitions/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Definitions&lt;/a&gt; were updated&lt;/li&gt;
&lt;li&gt;The &lt;a href=&#34;https://purpleteam-labs.com/doc/log-and-outcomes-files/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Log and Outcomes files&lt;/a&gt; page was created, providing details of the &lt;em&gt;Outcomes&lt;/em&gt; archive, what&amp;rsquo;s in it and how to read specific files. You can also &lt;a href=&#34;https://www.youtube.com/watch?v=nJNAbGLCGNY&amp;amp;t=346s&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;see the contents&lt;/a&gt; of the &lt;em&gt;Outcomes&lt;/em&gt; archive for &lt;a href=&#34;https://github.com/purpleteam-labs/purpleteam/blob/main/testResources/jobs/job_1.0.0-alpha.3_local&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this &lt;em&gt;Job&lt;/em&gt; file&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The main architecture diagrams for &lt;a href=&#34;https://purpleteam-labs.com/doc/cloud/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;cloud&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://purpleteam-labs.com/doc/local/set-up/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;local&lt;/code&gt;&lt;/a&gt; have been updated&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;Job&lt;/em&gt; file schema has been &lt;a href=&#34;https://purpleteam-labs.com/doc/job-file/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;documented&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A &lt;a href=&#34;https://purpleteam-labs.com/doc/faq/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;FAQ&lt;/a&gt; page was created&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://purpleteam-labs.com/doc/local/set-up/#tls-scanner&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Setting up&lt;/a&gt; the Tls Tester, although this is trivial&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://purpleteam-labs.com/doc/local/workflow/#other-testers&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Debugging the Tls Tester&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;work-items-created&#34;&gt;Work items created&lt;/h1&gt;
&lt;p&gt;As a result of the Tls Tester Implementation&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/purpleteam-labs/purpleteam/issues/87&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Re-work orchestrator.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/purpleteam-labs/purpleteam/issues/88&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Create Tester reset for &amp;ldquo;Tester failure:&amp;rdquo; occurrances&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/purpleteam-labs/purpleteam/issues/89&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Improve orchestrator Tester model error handling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/purpleteam-labs/purpleteam/issues/90&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Re-work App and Tls Tester models&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/purpleteam-labs/purpleteam/issues/91&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Re-work Dockerfiles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/purpleteam-labs/purpleteam/issues/92&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Extract common code into package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/purpleteam-labs/purpleteam/issues/93&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Blog post on the TLS Scanner&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;synchronisation&#34;&gt;Synchronisation&lt;/h1&gt;
&lt;p&gt;There ended up being quite a bit of work done around synchronisation of the components, and there is still work to be done. There were architectural decisions made several years ago that needed some modification, and as you can see from the &lt;a href=&#34;#work-items-created&#34;&gt;Work items created&lt;/a&gt; there is ongoing work that needs to be done.&lt;/p&gt;
&lt;p&gt;For example I discovered near the end of the implementation another edge-case around state of a given &lt;em&gt;Tester&lt;/em&gt; being incorrect if a different &lt;em&gt;Tester&lt;/em&gt; is in a &lt;code&gt;Tester failure:&lt;/code&gt; state.
You can read about the issue &lt;a href=&#34;https://github.com/purpleteam-labs/purpleteam/issues/88&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;. We will be addressing this one soon.&lt;/p&gt;
&lt;p&gt;Then there is this &lt;a href=&#34;https://github.com/purpleteam-labs/purpleteam/issues/89&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;lack of retry issue&lt;/a&gt; in the &lt;em&gt;orchestrator&lt;/em&gt; &lt;em&gt;Tester&lt;/em&gt; models which was found near the end of the TLS implementation work also, which probably won&amp;rsquo;t occur very often at all (we have never witnessed it), but it still needs to be fixed.&lt;/p&gt;
&lt;mark&gt;Before we get started discussing the synchronisation of components, you will need some understanding of the various relevant time-outs in the code base.&lt;/mark&gt;
&lt;h2 id=&#34;time-outs&#34;&gt;Time-outs&lt;/h2&gt;
&lt;p&gt;Many of the time-out issues with AWS just don&amp;rsquo;t exist when running &lt;code&gt;local&lt;/code&gt;ly. AWS Api Gateway does not support streaming, so we need to use long polling (&lt;code&gt;lp&lt;/code&gt;) between the CLI and the &lt;em&gt;orchestrator&lt;/em&gt; in the &lt;code&gt;cloud&lt;/code&gt; environment.&lt;/p&gt;
&lt;h3 id=&#34;cli&#34;&gt;CLI&lt;/h3&gt;
&lt;h4 id=&#34;for-the-test-command&#34;&gt;For the &lt;code&gt;test&lt;/code&gt; command&lt;/h4&gt;
&lt;p&gt;The initial request to the &lt;em&gt;orchestrator&lt;/em&gt; for the &lt;code&gt;test&lt;/code&gt; command has a set of timeouts, but it must stop trying before the back-end fails due to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Stage Two containers not being up and responsive within the currently &lt;code&gt;200000&lt;/code&gt; (&lt;code&gt;s2containers.serviceDiscoveryServiceInstances.timeoutToBeAvailable&lt;/code&gt;) + &lt;code&gt;120000&lt;/code&gt; (&lt;code&gt;s2containers.responsive.timeout&lt;/code&gt;) duration&lt;/li&gt;
&lt;li&gt;The Stage Two container service discovery services not being up and responsive within the same duration as above&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;cli_continues_to_retry&#34;&gt;&lt;/div&gt;
&lt;p&gt;If the CLI continues to retry after a back-end timeout, then it may continue to do so indefinitely if unsupervised, as is likely if being used in &lt;a href=&#34;https://github.com/purpleteam-labs/purpleteam#ui&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;noUi&lt;/code&gt; mode&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;https://github.com/purpleteam-labs/purpleteam/blob/0a054e46d02bfbd561f8b2797e86a9d16df484d3/src/presenter/apiDecoratingAdapter.js#L215&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;time-out series&lt;/a&gt; for the &lt;code&gt;test&lt;/code&gt; command currently looks like the following for the &lt;code&gt;cloud&lt;/code&gt; environment. The CLI doesn&amp;rsquo;t timeout at all for &lt;code&gt;local&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;Tries:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;23000,&lt;/li&gt;
&lt;li&gt;23000,&lt;/li&gt;
&lt;li&gt;23000,&lt;/li&gt;
&lt;li&gt;23000,&lt;/li&gt;
&lt;li&gt;23000,&lt;/li&gt;
&lt;li&gt;23000,&lt;/li&gt;
&lt;li&gt;23000,&lt;/li&gt;
&lt;li&gt;23000,&lt;/li&gt;
&lt;li&gt;23000,&lt;/li&gt;
&lt;li&gt;23000,&lt;/li&gt;
&lt;li&gt;23000,&lt;/li&gt;
&lt;li&gt;23000,&lt;/li&gt;
&lt;li&gt;23000,&lt;/li&gt;
&lt;li&gt;14000,&lt;/li&gt;
&lt;li&gt;0 // Cancel&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This adds up to 313000 + some request and response latency, a little (7 seconds) short of 320000 + some comms latency in the AWS machine.&lt;/p&gt;
&lt;h4 id=&#34;for-tester-progress--pctcomplete--bugcount--updates&#34;&gt;For &lt;code&gt;tester&lt;/code&gt;[ &lt;code&gt;Progress&lt;/code&gt; | &lt;code&gt;PctComplete&lt;/code&gt; | &lt;code&gt;BugCount&lt;/code&gt; ] updates&lt;/h4&gt;
&lt;p&gt;Five long-poll request attempts with no data returned from the &lt;em&gt;orchestrator&lt;/em&gt; and the CLI gives up.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// ...,
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;testerFeedbackComms&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
  &lt;span style=&#34;color:#a6e22e&#34;&gt;longPoll&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;nullProgressMaxRetries&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
      &lt;span style=&#34;color:#a6e22e&#34;&gt;doc&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;The number of times (sequentially receiving an event with a data object containing a property with a null value) to poll the backend when the orchestrator is not receiving feedback from the testers.&amp;#39;&lt;/span&gt;,
      &lt;span style=&#34;color:#a6e22e&#34;&gt;format&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;int&amp;#39;&lt;/span&gt;,
      &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
    }
  }
},
&lt;span style=&#34;color:#75715e&#34;&gt;// ...
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;orchestrator&#34;&gt;Orchestrator&lt;/h3&gt;
&lt;p&gt;The following is used in the &lt;code&gt;testerWatcher&lt;/code&gt; and needs to be well under the AWS API Gateway timeout which is 30 seconds:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// ...,
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;testerFeedbackComms&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
  &lt;span style=&#34;color:#75715e&#34;&gt;// ...,
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;longPoll&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;timeout&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
      &lt;span style=&#34;color:#a6e22e&#34;&gt;doc&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A double that expresses seconds to wait for blocking Redis commands. We need to timeout well before the AWS Api Gateway timeout.&amp;#39;&lt;/span&gt;,
      &lt;span style=&#34;color:#a6e22e&#34;&gt;format&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; Number,
      &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20.0&lt;/span&gt;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;app-tester&#34;&gt;App Tester&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// ...,
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;s2Containers&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
  &lt;span style=&#34;color:#a6e22e&#34;&gt;serviceDiscoveryServiceInstances&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;timeoutToBeAvailable&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
      &lt;span style=&#34;color:#a6e22e&#34;&gt;doc&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;The duration in milliseconds before giving up on waiting for the s2 Service Discovery Service Instances to be available.&amp;#39;&lt;/span&gt;,
      &lt;span style=&#34;color:#a6e22e&#34;&gt;format&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;duration&amp;#39;&lt;/span&gt;,
&lt;span style=&#34;display:block;width:100%;background-color:#3c3d38&#34;&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;200000&lt;/span&gt;
&lt;/span&gt;    },
    &lt;span style=&#34;color:#a6e22e&#34;&gt;retryIntervalToBeAvailable&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
      &lt;span style=&#34;color:#a6e22e&#34;&gt;doc&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;The retry interval in milliseconds for the s2 Service Discovery Service Instances to be available.&amp;#39;&lt;/span&gt;,
      &lt;span style=&#34;color:#a6e22e&#34;&gt;format&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;duration&amp;#39;&lt;/span&gt;,
      &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5000&lt;/span&gt;
    }
  },
  &lt;span style=&#34;color:#a6e22e&#34;&gt;responsive&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;timeout&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
      &lt;span style=&#34;color:#a6e22e&#34;&gt;doc&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;The duration in milliseconds before giving up on waiting for the s2 containers to be responsive.&amp;#39;&lt;/span&gt;,
      &lt;span style=&#34;color:#a6e22e&#34;&gt;format&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;duration&amp;#39;&lt;/span&gt;,
&lt;span style=&#34;display:block;width:100%;background-color:#3c3d38&#34;&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;120000&lt;/span&gt;
&lt;/span&gt;    },
    &lt;span style=&#34;color:#a6e22e&#34;&gt;retryInterval&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
      &lt;span style=&#34;color:#a6e22e&#34;&gt;doc&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;The retry interval in milliseconds for the s2 containers to be responsive.&amp;#39;&lt;/span&gt;,
      &lt;span style=&#34;color:#a6e22e&#34;&gt;format&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;duration&amp;#39;&lt;/span&gt;,
      &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10000&lt;/span&gt;
    }
  }
},
&lt;span style=&#34;color:#75715e&#34;&gt;// ...
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;emissary.apiFeedbackSpeed&lt;/code&gt; is used to send the CLI the following message types: &lt;code&gt;testerProgress&lt;/code&gt;, &lt;code&gt;testerPctComplete&lt;/code&gt; and &lt;code&gt;testerBugCount&lt;/code&gt;, thus keeping the &lt;code&gt;lp&lt;/code&gt; alive. This duration needs to be less than the &lt;em&gt;orchestrator&amp;rsquo;s&lt;/em&gt; &lt;code&gt;20&lt;/code&gt; second &lt;code&gt;testerFeedbackComms.longPoll.timeout&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;emissary&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
  &lt;span style=&#34;color:#75715e&#34;&gt;// ...,
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;apiFeedbackSpeed&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;doc&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;The speed to poll the Zap API for feedback of test progress&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#a6e22e&#34;&gt;format&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;duration&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5000&lt;/span&gt;
  },
  &lt;span style=&#34;color:#75715e&#34;&gt;// ...
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;tls-tester&#34;&gt;TLS Tester&lt;/h3&gt;
&lt;p&gt;If we don&amp;rsquo;t receive any update from the TLS &lt;em&gt;Emissary&lt;/em&gt; within this duration (&lt;code&gt;messageChannelHeartBeatInterval&lt;/code&gt;) then the TLS &lt;em&gt;Tester&lt;/em&gt; sends the CLI a &lt;code&gt;testerProgress&lt;/code&gt; message with the &lt;code&gt;textData&lt;/code&gt;: &lt;code&gt;Tester is awaiting Emissary feedback...&lt;/code&gt;. This duration needs to be less than the &lt;em&gt;orchestrator&amp;rsquo;s&lt;/em&gt; &lt;code&gt;20&lt;/code&gt; second &lt;code&gt;testerFeedbackComms.longPoll.timeout&lt;/code&gt; to make sure the CLI continues to poll the &lt;em&gt;orchestrator&lt;/em&gt; for &lt;code&gt;tester[Progress|PctComplete|BugCount]&lt;/code&gt; updates.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// ...,
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;messageChannelHeartBeatInterval&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
  &lt;span style=&#34;color:#a6e22e&#34;&gt;doc&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;This is used to send heart beat messages every n milliseconds. Primarily to keep the orchestrator\&amp;#39;s testerWatcher longPoll timeout from being reached.&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color:#a6e22e&#34;&gt;format&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;duration&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;15000&lt;/span&gt;
},
&lt;span style=&#34;color:#75715e&#34;&gt;// ...
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;message-flows&#34;&gt;Message flows&lt;/h2&gt;
&lt;p&gt;There are two flow types in play between the &lt;em&gt;orchestrator&lt;/em&gt; and the CLI, namely Server Sent Events (&lt;code&gt;sse&lt;/code&gt;) and Long Polling (&lt;code&gt;lp&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;&lt;mark&gt;Before reading this section dive over to the &lt;em&gt;orchestrator&lt;/em&gt; &lt;a href=&#34;https://github.com/purpleteam-labs/purpleteam-orchestrator/blob/main/README.md#configuration&#34; target=&#34;_blank&#34;&gt;README&lt;/a&gt; for a quick run-down on how &lt;em&gt;PurpleTeam&lt;/em&gt; is using &lt;code&gt;sse&lt;/code&gt; and &lt;code&gt;lp&lt;/code&gt;.&lt;/mark&gt; &lt;/p&gt;
&lt;p&gt;Before The TLS implementation, the &lt;code&gt;testerFeedbackComms.medium&lt;/code&gt; was defined in the configuration for both the &lt;em&gt;orchestrator&lt;/em&gt; and the CLI. Both configurations had to match. If they didn&amp;rsquo;t the &lt;em&gt;orchestrator&lt;/em&gt; would respond with an error message. Now this is defined in the &lt;em&gt;orchestrator&lt;/em&gt; only and the &lt;em&gt;orchestrator&lt;/em&gt; tells the CLI which medium it should use before stating either &lt;code&gt;sse&lt;/code&gt; or &lt;code&gt;lp&lt;/code&gt;.&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;When the CLI runs the &lt;code&gt;test&lt;/code&gt; command, there are three significant sequential events, I&amp;rsquo;ll brush over or omit less significant events to make explaining the flow easier to understand. If you&amp;rsquo;d rather just read the code it&amp;rsquo;s &lt;a href=&#34;https://github.com/purpleteam-labs/purpleteam-orchestrator/blob/15804fe13a294d7b37b5f2758833f562298f5685/src/api/orchestration/models/orchestrate.js#L177&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;CLI makes a &lt;code&gt;POST&lt;/code&gt; request&lt;/strong&gt; to the &lt;em&gt;orchestrator&amp;rsquo;s&lt;/em&gt; &lt;code&gt;/test&lt;/code&gt; route with the &lt;em&gt;Job&lt;/em&gt;, and continues to do so according to it&amp;rsquo;s &lt;a href=&#34;#cli_continues_to_retry&#34;&gt;retry schedule&lt;/a&gt;.&lt;br&gt;
The &lt;em&gt;orchestrator&amp;rsquo;s&lt;/em&gt; &lt;code&gt;testTeamAttack&lt;/code&gt; routine is where a lot of the decision making occurs
&lt;ul&gt;
&lt;li&gt;If a &lt;em&gt;Test Run&lt;/em&gt; is already in progress (&lt;code&gt;initTesterResponsesForCli&lt;/code&gt; is defined) and the &lt;em&gt;orchestrator&lt;/em&gt; already has the responses from the requests to the &lt;em&gt;Testers&lt;/em&gt; &lt;code&gt;/init-tester&lt;/code&gt; route (&lt;code&gt;initTesterResponsesForCli&lt;/code&gt; has a length), whether the &lt;em&gt;Testers&lt;/em&gt; were successfully initialised or not, then the &lt;em&gt;Tester&lt;/em&gt; responses along with whether to use &lt;code&gt;sse&lt;/code&gt; or &lt;code&gt;lp&lt;/code&gt; to subscribe to &lt;em&gt;Tester&lt;/em&gt; feedback are returned to the CLI&lt;/li&gt;
&lt;li&gt;If a &lt;em&gt;Test Run&lt;/em&gt; is already in progress (&lt;code&gt;initTesterResponsesForCli&lt;/code&gt; is defined), the &lt;em&gt;orchestrator&lt;/em&gt; causes a client-side time-out because a response from the request to the &lt;em&gt;Testers&lt;/em&gt; &lt;code&gt;/init-tester&lt;/code&gt; route has not yet been received, and the &lt;em&gt;orchestrator&lt;/em&gt; wants the CLI to try again once it times out&lt;/li&gt;
&lt;li&gt;If execution gets past the above then a &lt;em&gt;Test Run&lt;/em&gt; is not currently in progress, so the &lt;em&gt;orchestrator&lt;/em&gt;:
&lt;ol&gt;
&lt;li&gt;Sets a in-progress flag&lt;/li&gt;
&lt;li&gt;Asks it&amp;rsquo;s &lt;em&gt;Tester&lt;/em&gt; models to initialise their &lt;em&gt;Testers&lt;/em&gt; and wait for the responses&lt;/li&gt;
&lt;li&gt;Once all of the responses are received, the &lt;em&gt;orchestrator&lt;/em&gt; populates a &lt;code&gt;failedTesterInitialisations&lt;/code&gt; array with any &lt;code&gt;Tester failure:&lt;/code&gt;&amp;hellip; messages&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;orchestrator&lt;/em&gt; creates a &lt;code&gt;startTesters&lt;/code&gt; boolean and assigns it true if every active &lt;em&gt;Tester&lt;/em&gt; has it&amp;rsquo;s state set to &lt;code&gt;Tester initialised.&lt;/code&gt;&amp;hellip; (not &lt;code&gt;Awaiting Job.&lt;/code&gt;, &lt;code&gt;Initialising Tester.&lt;/code&gt;, or &lt;code&gt;[App|Tls] tests are running.&lt;/code&gt;), otherwise false is assigned&lt;/li&gt;
&lt;li&gt;If there were any &lt;code&gt;failedTesterInitialisations&lt;/code&gt; or &lt;code&gt;startTesters&lt;/code&gt; is false:
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;initTesterResponsesForCli&lt;/code&gt; is populated with the responses from trying to initialise the &lt;em&gt;Testers&lt;/em&gt; (both successful and/or unsuccessful)&lt;/li&gt;
&lt;li&gt;A response is returned to the CLI with &lt;code&gt;initTesterResponsesForCli&lt;/code&gt; and whether the &lt;em&gt;orchestrator&lt;/em&gt; expects the CLI to use &lt;code&gt;sse&lt;/code&gt; or &lt;code&gt;lp&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Otherwise:
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The &lt;em&gt;orchestrator&lt;/em&gt; invokes each &lt;em&gt;Testers&lt;/em&gt; &lt;code&gt;/start-tester&lt;/code&gt; route&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If we are running in &lt;code&gt;cloud&lt;/code&gt; the &lt;em&gt;orchestrator&lt;/em&gt; warms up the &lt;em&gt;Test Session&lt;/em&gt; message (Redis) channels and lists, this waits for all &lt;em&gt;Testers&lt;/em&gt; of the represented &lt;em&gt;Test Sessions&lt;/em&gt; to provide their first message set. These message sets are assigned to an array called &lt;code&gt;warmUpTestSessionMessageSets&lt;/code&gt; which looks like the following before being populated with messages:&lt;br&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;[
  {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;channelName&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;app-lowPrivUser&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#a6e22e&#34;&gt;testerMessageSet&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; []
  }, {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;channelName&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;app-adminUser&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#a6e22e&#34;&gt;testerMessageSet&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; []
  }, {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;channelName&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tls-NA&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#a6e22e&#34;&gt;testerMessageSet&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; []
  }
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;If &lt;em&gt;Testers&lt;/em&gt; are started and the &lt;em&gt;orchestrator&lt;/em&gt; did not subscribe to the &lt;em&gt;Test Session&lt;/em&gt; message channels, it would never know when the &lt;em&gt;Test Sessions&lt;/em&gt; are finished in order to clean-up, so this subscription must occur&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;initTesterResponsesForCli&lt;/code&gt; is populated with the responses from trying to initialise the &lt;em&gt;Testers&lt;/em&gt; (only successful)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A response is returned to the CLI with &lt;code&gt;initTesterResponsesForCli&lt;/code&gt; and whether the &lt;em&gt;orchestrator&lt;/em&gt; expects the CLI to use &lt;code&gt;sse&lt;/code&gt; or &lt;code&gt;lp&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CLI makes a &lt;code&gt;GET&lt;/code&gt; request&lt;/strong&gt; to either of the following (currently this happens whether all &lt;em&gt;Testers&lt;/em&gt; were initialised successfully or not, there is no point in this happening if there were any &lt;code&gt;Tester failure:&lt;/code&gt; messages returned from any &lt;em&gt;Testers&lt;/em&gt;, we will change this soon):
&lt;ul&gt;
&lt;li&gt;If using &lt;code&gt;sse&lt;/code&gt;?   &lt;code&gt;/tester-feedback/{testerName}/{sessionId}&lt;/code&gt;:&lt;br&gt;
In this case messages from the &lt;em&gt;Test Sessions&lt;/em&gt; continue to flow through the Redis channels and the &lt;em&gt;orchestrator&lt;/em&gt; continues to push them to the CLI&lt;/li&gt;
&lt;li&gt;If using &lt;code&gt;lp&lt;/code&gt;?   &lt;code&gt;/poll-tester-feedback/{testerName}/{sessionId}&lt;/code&gt;:&lt;br&gt;
In this case the CLI starts the long-poll process, the &lt;em&gt;orchestrator&lt;/em&gt; checks to see if &lt;code&gt;warmUpTestSessionMessageSets&lt;/code&gt; contains an element for the given channel name (BTW: channel names are constructed like: &lt;code&gt;${testerName}-${sessionId&lt;/code&gt;) (this will only happen in the &lt;code&gt;cloud&lt;/code&gt; environment), if so it is &lt;code&gt;splice&lt;/code&gt;d out and returned, if not the &lt;code&gt;pollTesterMessages&lt;/code&gt; of the &lt;code&gt;testerWatcher&lt;/code&gt; is invoked. &lt;code&gt;pollTesterMessages&lt;/code&gt; is responsible for providing a callback to each Redis channel which when invoked takes the given message from a &lt;em&gt;Testers&lt;/em&gt; &lt;em&gt;Test Session&lt;/em&gt; and pushes it on to the tail of a Redis list with the same name as the Redis channel that the message was received from. Each time the CLI requests a message set for a given &lt;em&gt;Test Session&lt;/em&gt;, if no messages are yet available it waits (on Redis &lt;code&gt;blpop&lt;/code&gt; (blocking head pop)), if messages are available, they are popped (Redis &lt;code&gt;lpop&lt;/code&gt; (non blocking head pop)) from the head of the Redis list&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CLI makes a &lt;code&gt;GET&lt;/code&gt; request&lt;/strong&gt; to the &lt;code&gt;/outcomes&lt;/code&gt; route
&lt;ul&gt;
&lt;li&gt;This happens once the CLI receives a message starting with &lt;code&gt;All Test Sessions of all Testers are finished&lt;/code&gt;. By the time this has happens, the &lt;em&gt;orchestrator&lt;/em&gt; has already cleaned up the &lt;em&gt;Testers&lt;/em&gt; and created the &lt;em&gt;Outcomes&lt;/em&gt; archive based on the results and reports generated by the &lt;em&gt;Testers&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;tls-tester-implementation&#34;&gt;TLS Tester Implementation&lt;/h1&gt;
&lt;p&gt;Unlike the App &lt;em&gt;Tester&lt;/em&gt; (&lt;a href=&#34;https://github.com/purpleteam-labs/purpleteam-app-scanner&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;app-scanner&lt;/a&gt;) which supervises an external &lt;em&gt;Emissary&lt;/em&gt; (Zaproxy), the TLS &lt;em&gt;Tester&lt;/em&gt; (&lt;a href=&#34;https://github.com/purpleteam-labs/purpleteam-tls-scanner&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;tls-scanner&lt;/a&gt;) supervises an embedded &lt;em&gt;Emissary&lt;/em&gt; (testssl.sh). This means that the TLS &lt;em&gt;Emissary&lt;/em&gt; runs within the same container as the TLS &lt;em&gt;Tester&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;https://purpleteam-labs.com/doc/job-file/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;em&gt;Job&lt;/em&gt;&lt;/a&gt; file which the &lt;a href=&#34;https://purpleteam-labs.com/doc/definitions/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;em&gt;Build User&lt;/em&gt;&lt;/a&gt; provides to the &lt;a href=&#34;https://github.com/purpleteam-labs/purpleteam&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CLI&lt;/a&gt; contains everything required to get the TLS &lt;em&gt;Emissary&lt;/em&gt; running and targeting your website or web API.&lt;/p&gt;
&lt;p&gt;The implementation of the TLS &lt;em&gt;Tester&lt;/em&gt; was actually the easy part of this release. An additional stage one container image was required for &lt;code&gt;local&lt;/code&gt; and also in the Terraform configuration for &lt;code&gt;cloud&lt;/code&gt; in the form of AWS ECS Task Definition modification. The AWS ECR deployment script needed adding to.&lt;/p&gt;
&lt;p&gt;The new TLS &lt;em&gt;Tester&lt;/em&gt; isn&amp;rsquo;t that different from the App &lt;em&gt;Tester&lt;/em&gt; other than it is a lot simpler because we don&amp;rsquo;t have to bring up stage two containers, and all the potential synchronisation issues around external &lt;em&gt;Emissaries&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The execution flow goes from the &lt;code&gt;/init-tester&lt;/code&gt; and &lt;code&gt;/start-tester&lt;/code&gt; &lt;a href=&#34;https://github.com/purpleteam-labs/purpleteam-tls-scanner/blob/main/src/api/tls/routes/post.js&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;routes&lt;/a&gt; to the &lt;a href=&#34;https://github.com/purpleteam-labs/purpleteam-tls-scanner/blob/main/src/api/tls/models/tls.js&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;model&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/init-tester&lt;/code&gt; basically sets the &lt;em&gt;Tester&lt;/em&gt; up with the &lt;em&gt;Build User&lt;/em&gt; supplied &lt;em&gt;Job&lt;/em&gt; and sets the &lt;code&gt;status&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/start-tester&lt;/code&gt; &lt;a href=&#34;https://github.com/purpleteam-labs/purpleteam-tls-scanner/blob/7b2d453c63f6a280132b45d2db9a546bf6fc0d19/src/api/tls/models/tls.js#L74&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;starts (&lt;code&gt;spawn&lt;/code&gt;s)&lt;/a&gt; the &lt;a href=&#34;https://github.com/purpleteam-labs/purpleteam-tls-scanner/blob/main/src/scripts/runCuc.js#L71&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cucumber CLI&lt;/a&gt;,
which initialises the &lt;a href=&#34;https://github.com/purpleteam-labs/purpleteam-tls-scanner/blob/main/src/steps/world.js&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cucumber world&lt;/a&gt; which is where most of the domain specific parts are glued together, and the actual Cucumber Steps (tests) are run.&lt;/p&gt;
&lt;p&gt;The following are added to the Cucumber &lt;code&gt;world&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;messagePublisher&lt;/code&gt; (pushes messages onto Redis &lt;code&gt;${testerName}-${sessionId&lt;/code&gt; channels)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sut&lt;/code&gt; (System Under Test) domain object&lt;/li&gt;
&lt;li&gt;&lt;code&gt;testssl&lt;/code&gt; domain object&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;a href=&#34;https://github.com/purpleteam-labs/purpleteam-tls-scanner/blob/7b2d453c63f6a280132b45d2db9a546bf6fc0d19/src/steps/tls_scan_steps.js#L78&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;testssl.sh process is &lt;code&gt;spawn&lt;/code&gt;ed&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When ever the TLS &lt;em&gt;Emissary&lt;/em&gt; writes to &lt;code&gt;stdout&lt;/code&gt; the &lt;em&gt;Tester&lt;/em&gt; deals with it &lt;a href=&#34;https://github.com/purpleteam-labs/purpleteam-tls-scanner/blob/7b2d453c63f6a280132b45d2db9a546bf6fc0d19/src/steps/tls_scan_steps.js#L80&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>DAST with OWASP purpleteam</title>
      <link>https://binarymist.io/publication/ser-podcast-owasp-purpleteam/</link>
      <pubDate>Wed, 07 Jul 2021 09:32:53 +1200</pubDate>
      <guid>https://binarymist.io/publication/ser-podcast-owasp-purpleteam/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.se-radio.net/team/kim-carter/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;













&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;
        &lt;img alt=&#34;Software Engineering Radio&#34; srcset=&#34;
               /media/publication/se-radio-logo_hua56cba13ba94bffe77c0e5cf633d61a8_4797_39b10f2cd9435d3f006e74f86974b3b4.png 400w,
               /media/publication/se-radio-logo_hua56cba13ba94bffe77c0e5cf633d61a8_4797_9708a0dd6344bd9522595665aa18325d.png 760w,
               /media/publication/se-radio-logo_hua56cba13ba94bffe77c0e5cf633d61a8_4797_1200x1200_fit_lanczos_2.png 1200w&#34;
               src=&#34;https://binarymist.io/media/publication/se-radio-logo_hua56cba13ba94bffe77c0e5cf633d61a8_4797_39b10f2cd9435d3f006e74f86974b3b4.png&#34;
               width=&#34;584&#34;
               height=&#34;80&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PurpleTeam</title>
      <link>https://binarymist.io/project/external-project-purpleteam/</link>
      <pubDate>Sat, 12 Jun 2021 00:00:00 +0000</pubDate>
      <guid>https://binarymist.io/project/external-project-purpleteam/</guid>
      <description></description>
    </item>
    
    <item>
      <title>OWASP purpleteam</title>
      <link>https://binarymist.io/publication/dotnetrocks-interview-owasp-purpleteam/</link>
      <pubDate>Sat, 10 Apr 2021 09:32:53 +1200</pubDate>
      <guid>https://binarymist.io/publication/dotnetrocks-interview-owasp-purpleteam/</guid>
      <description>













&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;
        &lt;img alt=&#34;.Net Rocks&#34; srcset=&#34;
               /media/publication/dotnetrocks_hu962a7491b89f6e4c702b62c3ab3cbb15_5422_cdb1ba11175ed44e81cf242173ff7053.png 400w,
               /media/publication/dotnetrocks_hu962a7491b89f6e4c702b62c3ab3cbb15_5422_d4b46af28751026b66369e751311a31c.png 760w,
               /media/publication/dotnetrocks_hu962a7491b89f6e4c702b62c3ab3cbb15_5422_1200x1200_fit_lanczos_2.png 1200w&#34;
               src=&#34;https://binarymist.io/media/publication/dotnetrocks_hu962a7491b89f6e4c702b62c3ab3cbb15_5422_cdb1ba11175ed44e81cf242173ff7053.png&#34;
               width=&#34;450&#34;
               height=&#34;53&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
</description>
    </item>
    
    <item>
      <title>PurpleTeam at Alpha</title>
      <link>https://binarymist.io/blog/2021/02/17/purpleteam-at-alpha/</link>
      <pubDate>Wed, 17 Feb 2021 17:17:11 +1300</pubDate>
      <guid>https://binarymist.io/blog/2021/02/17/purpleteam-at-alpha/</guid>
      <description>&lt;p&gt;PurpleTeam alpha (both &lt;code&gt;local&lt;/code&gt; and &lt;code&gt;cloud&lt;/code&gt; environments) have been released, after several years of hard work, mostly on top of a day job.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://purpleteam-labs.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;













&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;
        &lt;img alt=&#34;purpleteam&#34;
           src=&#34;https://binarymist.io/media/headers/PurpleTeam_landscape_rev.svg&#34;
           loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is a very condensed run-down of the process of taking PurpleTeam (a web security regression testing SaaS and CLI) from Proof of Concept (PoC) to Alpha release.&lt;/p&gt;
&lt;h1 id=&#34;poc&#34;&gt;PoC&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Q&lt;/strong&gt;: What were my intentions with creating the original &lt;a href=&#34;https://github.com/OWASP/NodeGoat/blob/e2dffdb8c7e988c10bacdccba14d6f0d352c5090/test/security/profile-test.js&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Proof of Concept&lt;/a&gt; (PoC), what was I trying to achieve?&lt;br&gt;
&lt;strong&gt;A&lt;/strong&gt;: Elicit Developer feedback, Find out what Developers and their Teams really needed for just in time security regression testing of their web applications and APIs. How to get this process (dynamic security testing) as close as possible to the coding of their applications and APIs&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q&lt;/strong&gt;: What did I do with the PoC?&lt;br&gt;
&lt;strong&gt;A&lt;/strong&gt;: Took it around the world speaking and running workshops with Developers and their Teams. That&amp;rsquo;s right, getting this process as close as possible to Developers and their Teams&lt;/p&gt;
&lt;p&gt;To name a few such events:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://binarymist.io/event/chcjs-meetup-2016-workshop-security-regression-testing-with-zapapi-and-nodegoat/&#34;&gt;CHCH.js Meetup&lt;/a&gt; 2016&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://binarymist.io/event/owaspchch-meetup-2016-workshop-security-regression-testing-with-zapapi-and-nodegoat/&#34;&gt;OWASP Chch Meetup&lt;/a&gt; 2016&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://binarymist.io/event/owaspny-meetup-2016-workshop-security-regression-testing-with-zapapi-and-nodegoat/&#34;&gt;OWASP NYC Meetup&lt;/a&gt; 2016&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://binarymist.io/event/nodeconfeu-2016-workshop-security-regression-testing-with-zapapi-and-nodegoat/&#34;&gt;NodeConf EU&lt;/a&gt; 2016&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://binarymist.io/event/nodejs-meetup-2016-workshop-security-regression-testing-with-zapapi-and-nodegoat/&#34;&gt;NodeJS Meetup Auckland&lt;/a&gt; 2016&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://binarymist.io/event/aws-meetup-2016-workshop-security-regression-testing-with-zapapi-and-nodegoat/&#34;&gt;AWS Meetup Auckland&lt;/a&gt; 2016&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://binarymist.io/event/owaspnzday-2019-talk-security-regression-testing-on-owasp-zap-node-api/&#34;&gt;OWASP NZ Day Auckland&lt;/a&gt; 2019&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are many Static Analyse Security Testing (SAST) tools available. As Developers we need both static and dynamic application security testing.&lt;/p&gt;
&lt;p&gt;The Proof of Concept I created several years ago was to work out exactly what Developers and their Teams needed in terms of
Dynamic Application Security Testing (DAST) capabilities to compliment the many Static Application Security Testing (SAST) tools already available
and able to be plugged into or consumed by your CI/build pipelines.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve written extensively in the past on SAST offerings, for example the Web Applications chapter of my 2nd book &lt;a href=&#34;https://holisticinfosecforwebdevelopers.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Holistic Info-Sec for Web Developers&lt;/a&gt; covers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;a href=&#34;https://f1.holisticinfosecforwebdevelopers.com/chap06.html#web-applications-identify-risks-consuming-free-and-open-source&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;perils of consuming free and open source libraries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://f1.holisticinfosecforwebdevelopers.com/chap06.html#web-applications-countermeasures-consuming-free-and-open-source&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Countermeasures&lt;/a&gt; to the above perils&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://f1.holisticinfosecforwebdevelopers.com/chap06.html#web-applications-countermeasures-consuming-free-and-open-source-tooling&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tooling options&lt;/a&gt; for SAST&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;journey&#34;&gt;Journey&lt;/h1&gt;
&lt;p&gt;If you&amp;rsquo;re a Developer creating internet facing applications, you know security is something you need to be thinking about right?
As Developers we all need as much automated help with improving our AppSec as possible.
As we&amp;rsquo;re creating it, no blockers, just enablers.&lt;/p&gt;
&lt;!-- .......... following is from owasp project page ................ --&gt;
&lt;p&gt;Many organisations spend many thousands of dollars on security defect remediation of the software projects they create. Usually this effort is also performed late in the development life-cycle, often even after the code is considered done. This fact makes the remediation effort &lt;a href=&#34;https://f0.holisticinfosecforwebdevelopers.com/chap06.html#leanpub-auto-cheapest-place-to-deal-with-defects&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;very costly&lt;/a&gt; and often too short. Because of this there are many bugs left in the software that get deployed to production.&lt;/p&gt;
&lt;br&gt;
&lt;script async class=&#34;speakerdeck-embed&#34; data-slide=&#34;48&#34; data-id=&#34;8ca6ad5eb9c34ba9873158026d9cfc6a&#34; data-ratio=&#34;1.37081659973226&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
&lt;br&gt;
&lt;p&gt;PurpleTeam strikes at the very heart of this problem. PurpleTeam is a CLI and back-end/API (SaaS). The CLI can be run manually, but it&amp;rsquo;s sweet spot is being inserted into Development Team&amp;rsquo;s &lt;a href=&#34;https://github.com/purpleteam-labs/purpleteam#npm-install-locally&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;build pipelines&lt;/a&gt;, where it can find the security defects in your running web applications and APIs, and provide immediate and continuous notification of what and where your security defects are, along with tips on how to fix them.&lt;/p&gt;
&lt;br&gt;
&lt;script async class=&#34;speakerdeck-embed&#34; data-slide=&#34;49&#34; data-id=&#34;8ca6ad5eb9c34ba9873158026d9cfc6a&#34; data-ratio=&#34;1.37081659973226&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
&lt;br&gt;
&lt;p&gt;The PurpleTeam back-end runs smart dynamic application security testing against your web applications or APIs. The purpleteam CLI drives the PurpleTeam back-end.&lt;/p&gt;
&lt;!-- end....... following is from owasp project page ................ --&gt;
&lt;br&gt;
&lt;script async class=&#34;speakerdeck-embed&#34; data-slide=&#34;18&#34; data-id=&#34;8ca6ad5eb9c34ba9873158026d9cfc6a&#34; data-ratio=&#34;1.37081659973226&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
&lt;br&gt;
&lt;p&gt;I have also created the ability to add testers, There is currently a &lt;a href=&#34;https://github.com/purpleteam-labs/purpleteam-tls-checker&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TLS checker&lt;/a&gt; and &lt;a href=&#34;https://github.com/purpleteam-labs/purpleteam-server-scanner&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;server scanner&lt;/a&gt; stubbed out and ready to be implemented. Feel free to dive in and start implementing.&lt;/p&gt;
&lt;br&gt;
&lt;script async class=&#34;speakerdeck-embed&#34; data-slide=&#34;58&#34; data-id=&#34;8ca6ad5eb9c34ba9873158026d9cfc6a&#34; data-ratio=&#34;1.37081659973226&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
&lt;br&gt;
&lt;p&gt;If there is a tester that you need that PurpleTeam doesn&amp;rsquo;t have, you can now create it.&lt;/p&gt;
&lt;h1 id=&#34;environments&#34;&gt;Environments&lt;/h1&gt;
&lt;h2 id=&#34;local&#34;&gt;&lt;code&gt;local&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;local&lt;/code&gt; environment is &lt;a href=&#34;https://github.com/purpleteam-labs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;free and open source&lt;/a&gt;. It is also now an &lt;a href=&#34;https://owasp.org/www-project-purpleteam/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OWASP project&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There&amp;rsquo;s quite a bit of set-up to do&lt;/li&gt;
&lt;li&gt;You need to set-up all the micro-services&lt;/li&gt;
&lt;li&gt;All the set-up should be documented &lt;a href=&#34;https://doc.purpleteam-labs.com/local/local-setup.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;. Documentation &lt;a href=&#34;https://github.com/purpleteam-labs/purpleteam/issues/37&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;will be moving&lt;/a&gt; to a proper doc site soon.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You will need to set-up the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/purpleteam-labs/purpleteam-lambda&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Lambda functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/purpleteam-labs/purpleteam-s2-containers&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Stage 2 containers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/purpleteam-labs/purpleteam-orchestrator&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Orchestrator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Testers (only &lt;a href=&#34;https://github.com/purpleteam-labs/purpleteam-app-scanner&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;app&lt;/a&gt; currently)&lt;/li&gt;
&lt;li&gt;Get the &lt;a href=&#34;https://github.com/purpleteam-labs/purpleteam&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;purpleteam CLI&lt;/a&gt; on your system&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/purpleteam-labs/purpleteam/blob/3f2c97a14c617181a4bf71669a95540b99812e2d/README.md#install&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Install&lt;/a&gt; it, the options are:
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/purpleteam-labs/purpleteam/blob/3f2c97a14c617181a4bf71669a95540b99812e2d/README.md#clone-the-git-repository&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Clone the repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/purpleteam-labs/purpleteam/blob/3f2c97a14c617181a4bf71669a95540b99812e2d/README.md#npm-install-locally&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Local NPM install&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/purpleteam-labs/purpleteam/blob/3f2c97a14c617181a4bf71669a95540b99812e2d/README.md#npm-install-globally&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Global NPM install&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/purpleteam-labs/purpleteam/blob/3f2c97a14c617181a4bf71669a95540b99812e2d/README.md#configure&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Configure it&lt;/a&gt; and create your &lt;a href=&#34;https://doc.purpleteam-labs.com/definitions.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;em&gt;Job&lt;/em&gt;&lt;/a&gt; file&lt;/li&gt;
&lt;li&gt;Run your System under Test (SUT). we use &lt;a href=&#34;https://github.com/purpleteam-labs/purpleteam-iac-sut&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;purpleteam-iac-sut&lt;/a&gt; to build/deploy our cloud SUTs&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/purpleteam-labs/purpleteam/blob/3f2c97a14c617181a4bf71669a95540b99812e2d/README.md#run&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Run&lt;/a&gt; the purpleteam CLI&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;cloud&#34;&gt;&lt;code&gt;cloud&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;cloud&lt;/code&gt; environment costs because PurpleTeam-Labs have to maintain the infrastructure that the SaaS runs on, but is the easiest and quickest to get going.&lt;/p&gt;
&lt;p&gt;All infrastructure set-up is done for you. You just need to set-up the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Get the purpleteam CLI on your system (same as step 5.1 of &lt;code&gt;local&lt;/code&gt;). Configure the CLI and create your Job file (similar to step 5.2 of &lt;code&gt;local&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Run your SUT (same as step 6 of &lt;code&gt;local&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Run the purpleteam CLI (same as step 7 of &lt;code&gt;local&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;architecture-and-tech&#34;&gt;Architecture and Tech&lt;/h1&gt;
&lt;h2 id=&#34;local-1&#34;&gt;&lt;code&gt;local&lt;/code&gt;&lt;/h2&gt;
&lt;!-- .......... following is from owasp project page ................ --&gt;
&lt;p&gt;Redis pub/sub is used to transfer &lt;em&gt;Tester&lt;/em&gt; messages (live update data) from the &lt;a href=&#34;https://doc.purpleteam-labs.com/definitions.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;em&gt;Tester&lt;/em&gt;&lt;/a&gt; micro-services to the &lt;a href=&#34;https://github.com/purpleteam-labs/purpleteam-orchestrator&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Orchestrator&lt;/a&gt;.
The &lt;a href=&#34;https://doc.purpleteam-labs.com/definitions.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;em&gt;Build User&lt;/em&gt;&lt;/a&gt; can configure the &lt;a href=&#34;https://github.com/purpleteam-labs/purpleteam&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;purpleteam CLI&lt;/a&gt; to receive these messages via Server Sent Events (SSE) or Long Polling (LP). The Orchestrator also needs to be configured to use either SSE or LP.
With Long Polling (LP) if the CLI goes off-line at some point during the &lt;em&gt;Test Run&lt;/em&gt; and then comes back on-line, no messages will be lost due to the fact that the Orchestrator persists the messages it&amp;rsquo;s subscribed to back to Redis lists, then pops them off the given lists as a LP request comes in and returns them to the CLI. LP is request-&amp;gt;response, SSE is one way. In saying that, LP can be quite efficient as we are able to batch messages into arrays to be returned.&lt;/p&gt;














&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;
        &lt;img alt=&#34;local architecture&#34; srcset=&#34;
               /media/post/2021/purpleteam_local_2021-01_720w_hucfd65cea1480a6a25157b97b5ad9aa7c_37485_5605e3a82d8ba95fa5762bb48d2ce1e3.png 400w,
               /media/post/2021/purpleteam_local_2021-01_720w_hucfd65cea1480a6a25157b97b5ad9aa7c_37485_6f5f2d43dfb5cdec618bc028f8e5aa0d.png 760w,
               /media/post/2021/purpleteam_local_2021-01_720w_hucfd65cea1480a6a25157b97b5ad9aa7c_37485_1200x1200_fit_lanczos_2.png 1200w&#34;
               src=&#34;https://binarymist.io/media/post/2021/purpleteam_local_2021-01_720w_hucfd65cea1480a6a25157b97b5ad9aa7c_37485_5605e3a82d8ba95fa5762bb48d2ce1e3.png&#34;
               width=&#34;720&#34;
               height=&#34;371&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;h3 id=&#34;orchestrator&#34;&gt;Orchestrator&lt;/h3&gt;
&lt;p&gt;The Orchestrator is responsible for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Organising and supervising the Testers&lt;/li&gt;
&lt;li&gt;Sending real-time Tester messages to the CLI via either SSE or LP&lt;/li&gt;
&lt;li&gt;Packaging and sending the outcomes (test reports, test results) back to the CLI as they become available&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://f1.holisticinfosecforwebdevelopers.com/chap06.html#web-applications-countermeasures-lack-of-input-validation-filtering-and-sanitisation&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Validating, filtering and sanitising&lt;/a&gt; the &lt;em&gt;Build User&lt;/em&gt;&amp;rsquo;s input&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;testers&#34;&gt;Testers&lt;/h3&gt;
&lt;p&gt;Each Tester is responsible for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Obtaining resources, cleaning up and releasing resources once the &lt;em&gt;Test Run&lt;/em&gt; is finished&lt;/li&gt;
&lt;li&gt;Starting and Stopping &lt;a href=&#34;https://github.com/purpleteam-labs/purpleteam-s2-containers&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Stage Two Containers&lt;/a&gt; (hosted on docker-compose-ui) dynamically (via &lt;a href=&#34;https://github.com/purpleteam-labs/purpleteam-lambda&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Lambda Functions&lt;/a&gt; hosted locally via sam cli) based on the number of Test Sessions provided by the Build User in the &lt;a href=&#34;https://doc.purpleteam-labs.com/definitions.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;em&gt;Job&lt;/em&gt;&lt;/a&gt; file which is sent from the CLI to the Orchestrator, then disseminated to the Testers. The following shows two &lt;em&gt;Test Sessions&lt;/em&gt; from a test resource &lt;a href=&#34;https://github.com/purpleteam-labs/purpleteam/blob/3f2c97a14c617181a4bf71669a95540b99812e2d/testResources/jobs/job_0.1.0-alpha.1_local&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;em&gt;Job&lt;/em&gt;&lt;/a&gt; that we use:
&lt;br&gt;&lt;br&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;...
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;included&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; [
{
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;testSession&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;lowPrivUser&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;attributes&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;username&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;user1&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;password&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;User1_123&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;aScannerAttackStrength&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HIGH&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;aScannerAlertThreshold&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;LOW&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;alertThreshold&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;
  },
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;relationships&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;data&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; [{
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;route&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/profile&amp;#34;&lt;/span&gt;
    }]
  }
},
{
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;testSession&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;adminUser&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;attributes&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;username&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;admin&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;password&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Admin_123&amp;#34;&lt;/span&gt;
  },
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;relationships&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;data&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; [{
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;route&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/memos&amp;#34;&lt;/span&gt;
    },
    {
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;route&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/profile&amp;#34;&lt;/span&gt;
    }]
  }
},
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;The actual (app, server, tls, etc) &lt;a href=&#34;https://github.com/purpleteam-labs/purpleteam-app-scanner/blob/e62601b76212f9bde866164fe6f4ad687fb5b458/src/features/app_scan.feature&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;test plan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;sam-cli&#34;&gt;Sam Cli&lt;/h3&gt;
&lt;p&gt;Sam Cli stays running and listening for the &lt;em&gt;Tester&lt;/em&gt; requests to run the lambda functions which start and stop the Stage Two Containers.&lt;/p&gt;
&lt;h3 id=&#34;docker-compose-ui&#34;&gt;docker-compose-ui&lt;/h3&gt;
&lt;p&gt;In &lt;code&gt;local&lt;/code&gt; docker-compose-ui is required to be running in order to start/stop it&amp;rsquo;s hosted (Stage Two) containers (it has access to the hosts Docker socket).&lt;/p&gt;
&lt;!-- end....... following is from owasp project page ................ --&gt;
&lt;h2 id=&#34;cloud-1&#34;&gt;&lt;code&gt;cloud&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;cloud&lt;/code&gt; environment is similar in terms of functionality, a good number of components are quite different though.&lt;/p&gt;
&lt;p&gt;For the &lt;em&gt;Tester&lt;/em&gt; messages only Long Polling (LP) is available due to streaming APIs not being supported by AWS API Gateway. We could have used API Gateway WebSockets for bi-directional comms, but that doesn&amp;rsquo;t support OAuth client-credentials flow, which I had already completed.&lt;/p&gt;
&lt;p&gt;When the CLI makes a request to the back-end (directly to the Orchestrator in &lt;code&gt;local&lt;/code&gt;, but AWS API Gateway in &lt;code&gt;cloud&lt;/code&gt;), first that request is intercepted and a request to the PurpleTeam auth domain is made with: &lt;code&gt;grant_type&lt;/code&gt;, &lt;code&gt;client_id&lt;/code&gt; of the user pool app client, &lt;code&gt;scope&lt;/code&gt;s, &lt;code&gt;client_secret&lt;/code&gt;. Cognito Authorisation server returns an &lt;code&gt;access_token&lt;/code&gt; if all good. The CLI then makes requests with the &lt;code&gt;access_token&lt;/code&gt; to the resource server which in our case is the API Gateway. The resource server/API Gateway validates the &lt;code&gt;access_token&lt;/code&gt; with the User pool. If all good, the original request is allowed to continue on it&amp;rsquo;s way.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Testers&lt;/em&gt; run their lambdas, lambdas tell ECS to spin up and tear down n (where n is the number of &lt;i&gt;Test Session&lt;/i&gt;s) stage 2 containers. I originally used AWS ALB but that didn&amp;rsquo;t support our authentication requirements, so I had to back out and swap it for API Gateway and NLB.&lt;/p&gt;














&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;
        &lt;img alt=&#34;cloud architecture&#34; srcset=&#34;
               /media/post/2021/purpleteam_cloud_2021-01_720w_hu83a716143dd8f79317fec22591f5c2f8_43644_f54df717d7feaa38c5c21a9bdf72f347.png 400w,
               /media/post/2021/purpleteam_cloud_2021-01_720w_hu83a716143dd8f79317fec22591f5c2f8_43644_976493ddd09fb9ce1043500f1bff7bda.png 760w,
               /media/post/2021/purpleteam_cloud_2021-01_720w_hu83a716143dd8f79317fec22591f5c2f8_43644_1200x1200_fit_lanczos_2.png 1200w&#34;
               src=&#34;https://binarymist.io/media/post/2021/purpleteam_cloud_2021-01_720w_hu83a716143dd8f79317fec22591f5c2f8_43644_f54df717d7feaa38c5c21a9bdf72f347.png&#34;
               width=&#34;720&#34;
               height=&#34;371&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;h1 id=&#34;pressures&#34;&gt;Pressures&lt;/h1&gt;
&lt;h2 id=&#34;keeping-nodejs-dedendencies-up-to-date&#34;&gt;Keeping NodeJS Dedendencies up to date&lt;/h2&gt;
&lt;p&gt;The never ending battle of staying on top of a constantly moving NodeJS ecosystem. Never ending security and feature updates.
&lt;a href=&#34;https://github.com/purpleteam-labs/purpleteam/issues/29&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;This issue&lt;/a&gt; has a check list of our last major updates after we finished the IaC for the &lt;code&gt;cloud&lt;/code&gt; environment.&lt;/p&gt;
&lt;h2 id=&#34;forkingadopting-libraries&#34;&gt;Forking/adopting libraries&lt;/h2&gt;
&lt;p&gt;Then there is the forking and/or rewriting of libraries when authors lose interest, no longer maintain or just no longer have the bandwidth.
This must be expected and planned for when consuming free and open source libraries.
Yes it&amp;rsquo;s great to have the head start of being able to just use someone else&amp;rsquo;s code, but nothing is really free, everything ultimately costs.
Just realise that if you are consuming free and open source libraries in your project,
then at some stage you are going to have to dive into their code and either help out, or ultimately end up forking or rewriting.&lt;/p&gt;
&lt;p&gt;Following are some of the libraries we have forked, ported and/or rewritten:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/binarymist/mocksse&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;mocksse&lt;/a&gt; was a rewrite/port of MockEvent. We use this library for mocking Server Sent Events (SSE)&lt;/li&gt;
&lt;li&gt;Cucumber &lt;a href=&#34;https://gitlab.com/purpleteam-labs/purpleteam-app-scanner/-/blob/9be05624afc9a92ebe89da9cc82e16dd856c562d/src/scripts/cucumber-redacted.js&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;functionality&lt;/a&gt; that was &lt;a href=&#34;https://github.com/cucumber/cucumber-js/issues/1489&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;removed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/francescou/docker-compose-ui&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;docker-compose-ui&lt;/a&gt; has been archived. This means we will have to either fork, rewrite, research to see if we can use something else.
This isn&amp;rsquo;t currently urgent&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;competitors&#34;&gt;Competitors&lt;/h2&gt;
&lt;p&gt;When I started developing PurpleTeam, as part of the business plan creation I needed to list my competitors. There was really only one. Now that competitor has mostly gone away and we have several new ones.&lt;/p&gt;
&lt;p&gt;Just to be clear, when I say competitor, I&amp;rsquo;m talking about Dynamic Application Security Tools for the web that can be used natively in any build pipeline.&lt;/p&gt;
&lt;p&gt;Our current competitors are doing things differently to us, with different offerings. We think PurpleTeam has unique aspects that make it stand out from the rest.&lt;/p&gt;
&lt;h1 id=&#34;next-steps&#34;&gt;Next Steps&lt;/h1&gt;
&lt;p&gt;PurpleTeam &lt;code&gt;local&lt;/code&gt; is now an &lt;a href=&#34;https://owasp.org/www-project-purpleteam/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OWASP project&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;consuming-purpleteam&#34;&gt;Consuming PurpleTeam&lt;/h2&gt;
&lt;p&gt;How can you start using PurpleTeam today?&lt;/p&gt;
&lt;p&gt;As discussed in the &lt;a href=&#34;#environments&#34;&gt;Environments&lt;/a&gt; sub section you have a few options&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;local&lt;/code&gt;: set everything up yourself&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cloud&lt;/code&gt;: Sign-up for an account, set-up your test &lt;em&gt;Job&lt;/em&gt;, get the CLI on your system&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can use the purpleteam CLI manually or consume it within your build pipelines.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Manual examples:
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/purpleteam-labs/purpleteam/tree/3f2c97a14c617181a4bf71669a95540b99812e2d#clone-the-git-repository-option&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;bin/purpleteam via npm script&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/purpleteam-labs/purpleteam/tree/3f2c97a14c617181a4bf71669a95540b99812e2d#run-the-binpurpleteam-file-directly&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;bin/purpleteam directly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/purpleteam-labs/purpleteam/tree/3f2c97a14c617181a4bf71669a95540b99812e2d#run-the-purpleteam-cli-directly&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;purpleteam CLI directly&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/purpleteam-labs/purpleteam/tree/3f2c97a14c617181a4bf71669a95540b99812e2d#run-your-app&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Within your NodeJS app or build pipeline&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/purpleteam-labs/purpleteam/tree/3f2c97a14c617181a4bf71669a95540b99812e2d#npm-install-globally-option&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Within your non NodeJS app or build pipelines&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;contributing-to-purpleteam&#34;&gt;Contributing to PurpleTeam&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Is PurpleTeam missing something you need that would otherwise allow you to use it?&lt;/li&gt;
&lt;li&gt;Do you need to add a different kind of &lt;a href=&#34;https://doc.purpleteam-labs.com/definitions.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;em&gt;Tester&lt;/em&gt;&lt;/a&gt;?&lt;/li&gt;
&lt;li&gt;Have you found a bug?&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Ways you can contribute to building &lt;a href=&#34;https://twitter.com/hashtag/owasp?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#owasp&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/purpleteam?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#purpleteam&lt;/a&gt; &lt;a href=&#34;https://t.co/yxdb9XJaIT&#34;&gt;https://t.co/yxdb9XJaIT&lt;/a&gt;&lt;/p&gt;&amp;mdash; PurpleTeam (@purpleteamlabs) &lt;a href=&#34;https://twitter.com/purpleteamlabs/status/1363257338283622400?ref_src=twsrc%5Etfw&#34;&gt;February 20, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;p&gt;As you can see, there are plenty of avenues that you can contribute to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/purpleteam-labs/purpleteam/discussions&#34; target=&#34;_blank&#34;&gt;Github Discussions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://owasp.slack.com/messages/project-purpleteam&#34; target=&#34;_blank&#34;&gt;OWASP purpleteam Slack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/purpleteam-labs/purpleteam/projects/2&#34; target=&#34;_blank&#34;&gt;Project Board&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/purpleteam-labs/purpleteam/issues&#34; target=&#34;_blank&#34;&gt;Submit Issue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/purpleteam-labs/purpleteam/pulls&#34; target=&#34;_blank&#34;&gt;Submit PR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/purpleteam-labs/purpleteam/security/policy&#34; target=&#34;_blank&#34;&gt;Reporting Security Issues&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/purpleteam-labs/purpleteam/projects/1&#34; target=&#34;_blank&#34;&gt;Public Roadmap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/purpleteam-labs/purpleteam/blob/main/CONTRIBUTING.md&#34; target=&#34;_blank&#34;&gt;CONTRIBUTING.md&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PurpleTeam-Labs also has a submission in with Google Summer of Code for students this year. We&amp;rsquo;ve got plenty to work on, so here&amp;rsquo;s hoping!&lt;/p&gt;
&lt;h2 id=&#34;purpleteam-next-steps&#34;&gt;PurpleTeam Next Steps&lt;/h2&gt;
&lt;p&gt;We will be getting started on a documentation site (not just a &lt;a href=&#34;https://doc.purpleteam-labs.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;hosted doc git repo&lt;/a&gt;) soon. We will also be working on a real website.
If you have a Dev Team that is keen to try PurpleTeam out, reach out to us if you need to.
We are always looking for people to work on the codebase. Even if you&amp;rsquo;re a student, it&amp;rsquo;s a great way to learn about security, by coding it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Talk - Building PurpleTeam (a Security Regression Testing SaaS) - From PoC to Alpha</title>
      <link>https://binarymist.io/event/appsecnz-2021-talk-building-purpleteam-a-security-regression-testing-saas-from-poc-to-alpha/</link>
      <pubDate>Fri, 12 Feb 2021 14:25:00 +1300</pubDate>
      <guid>https://binarymist.io/event/appsecnz-2021-talk-building-purpleteam-a-security-regression-testing-saas-from-poc-to-alpha/</guid>
      <description>&lt;p&gt;Let me take you on the journey of trials, errors, and lessons learnt from getting a web app/API security regression testing proof of concept (PoC) to the next stage (alpha release).&lt;/p&gt;
&lt;p&gt;In 2019, I gave a &lt;a href=&#34;https://binarymist.io/event/owaspnzday-2019-talk-security-regression-testing-on-owasp-zap-node-api&#34;&gt;talk at OWASP New Zealand Day&lt;/a&gt; on a security regression testing PoC I had developed based on developer feedback. Since then, on top of a normal day job, I’ve been working on this project with every spare minute of time.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/0RFmweM7bwM&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;br&gt;
&lt;p&gt;Let’s walk through the:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Architecture: How the micro-services hang together and communicate with each other. Design decisions, including backing out of some and redesigning when I got them wrong&lt;/li&gt;
&lt;li&gt;Environments: &lt;code&gt;local&lt;/code&gt;: you set-up all the purpleteam micro-services on your own machine or within your network. &lt;code&gt;cloud&lt;/code&gt;: all set-up is done for you, just create a job file and run it&lt;/li&gt;
&lt;li&gt;Technologies: Micro-services written in NodeJS. Docker containers. Authentication/authorisation in the &lt;code&gt;cloud&lt;/code&gt;. Lambda functions (&lt;code&gt;local&lt;/code&gt; and &lt;code&gt;cloud&lt;/code&gt;). Redis pub/sub and lists, along with Server Sent Events for messaging. Many AWS services. Terraform and Terragrunt for IaC&lt;/li&gt;
&lt;li&gt;Pressures: The never ending battle of keeping your NodeJS dependencies up to date. Forking/adopting libraries when maintainers disappear. Keeping relationships alive. Keeping yourself alive (eating, sleeping, fitness). Dealing with competitors&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;1784d6fdfc3d4fab8ec5a67156387bf3&#34; data-ratio=&#34;1.37081659973226&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
&lt;br&gt;
&lt;p&gt;We will then discuss the &lt;a href=&#34;https://binarymist.io/blog/2021/02/17/purpleteam-at-alpha/#next-steps&#34;&gt;next steps&lt;/a&gt; for PurpleTeam, and how you can start using - and contributing to it if it’s missing something you need.&lt;/p&gt;
&lt;br&gt;
</description>
    </item>
    
    <item>
      <title>Holistic Info-Sec for Web Developers</title>
      <link>https://binarymist.io/publication/holistic-infosec-for-web-developers/</link>
      <pubDate>Fri, 01 Dec 2017 00:00:00 +0000</pubDate>
      <guid>https://binarymist.io/publication/holistic-infosec-for-web-developers/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Haroon Meer on Network Security</title>
      <link>https://binarymist.io/publication/ser-podcast-network-security/</link>
      <pubDate>Tue, 12 Sep 2017 00:00:00 +0000</pubDate>
      <guid>https://binarymist.io/publication/ser-podcast-network-security/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.se-radio.net/team/kim-carter/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;













&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;
        &lt;img alt=&#34;Software Engineering Radio&#34; srcset=&#34;
               /media/publication/se-radio-logo_hua56cba13ba94bffe77c0e5cf633d61a8_4797_39b10f2cd9435d3f006e74f86974b3b4.png 400w,
               /media/publication/se-radio-logo_hua56cba13ba94bffe77c0e5cf633d61a8_4797_9708a0dd6344bd9522595665aa18325d.png 760w,
               /media/publication/se-radio-logo_hua56cba13ba94bffe77c0e5cf633d61a8_4797_1200x1200_fit_lanczos_2.png 1200w&#34;
               src=&#34;https://binarymist.io/media/publication/se-radio-logo_hua56cba13ba94bffe77c0e5cf633d61a8_4797_39b10f2cd9435d3f006e74f86974b3b4.png&#34;
               width=&#34;584&#34;
               height=&#34;80&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;show-outline&#34;&gt;Show Outline&lt;/h1&gt;
&lt;h2 id=&#34;basic-questions&#34;&gt;Basic Questions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;What is &lt;a href=&#34;https://f1.holisticinfosecforwebdevelopers.com/chap04.html#network&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;network security&lt;/a&gt;? What is application security?&lt;/li&gt;
&lt;li&gt;Just as with any other form of security, the first thing we need to think about is, what’s valuable to us in regards to network security, what are we attempting to protect and why?&lt;/li&gt;
&lt;li&gt;One of the comments I received recently was “&lt;a href=&#34;https://f1.holisticinfosecforwebdevelopers.com/chap05.html#cloud-countermeasures-shared-responsibility-model-csp-customer-responsibility&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;as a software engineer, do I really care about physical network security&lt;/a&gt;” Why should Software Engineers care?&lt;/li&gt;
&lt;li&gt;What’s changed with computer network security over the last five to ten years?&lt;/li&gt;
&lt;li&gt;Has this shifted the reliance that your average attacker used to have on network security exploitation skills to other areas such as cloud services, application security, and of course people, and how so?&lt;/li&gt;
&lt;li&gt;According to FBI investigators, the likely avenue of infiltration of the Yahoo internal network was with a spear phishing email to a semi-privileged unsuspecting/inadvertent Yahoo employee.
The successful spear phish allowed the attackers direct access to Yahoo&amp;rsquo;s internal network…
What are your thoughts about the fact that the attacker just about always still needs a network in order to access their target, whether the initial foothold be &lt;a href=&#34;https://f0.holisticinfosecforwebdevelopers.com/chap07.html#physical&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;physical&lt;/a&gt;, &lt;a href=&#34;https://f0.holisticinfosecforwebdevelopers.com/chap08.html#people&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;people&lt;/a&gt;, &lt;a href=&#34;https://f1.holisticinfosecforwebdevelopers.com/chap03.html#vps&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;VPS&lt;/a&gt;s, &lt;a href=&#34;https://f1.holisticinfosecforwebdevelopers.com/chap04.html#network&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;network&lt;/a&gt; components, &lt;a href=&#34;https://binarymist.io/publication/cloud-security/&#34;&gt;cloud&lt;/a&gt; resources, &lt;a href=&#34;https://f2.holisticinfosecforwebdevelopers.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;mobile or IoT&lt;/a&gt; devices?&lt;/li&gt;
&lt;li&gt;In high security environments, unlike Yahoo, what I’ve found is that many of the common application security defects and attacks don’t work, and the attacker has to resort to attacking hosts, networks, physical premises and of course people, as in social engineering them. Can you explain your experience around how high security environments differ from the average or low security environments?&lt;/li&gt;
&lt;li&gt;What do Software Engineers now need to understanding about computer network technologies in order to mitigate attackers using them as a channel to assist exploiting areas of a business and gaining access to their assets?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;riskshttpsf1holisticinfosecforwebdeveloperscomchap04htmlleanpub-auto-ssm-identify-risks-1&#34;&gt;&lt;a href=&#34;https://f1.holisticinfosecforwebdevelopers.com/chap04.html#leanpub-auto-ssm-identify-risks-1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Risks&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Let’s talk about some of the ways an attacker can get access to an organisation’s prized possessions.&lt;/p&gt;
&lt;h3 id=&#34;fortress--candy-bar-mentalityhttpsf1holisticinfosecforwebdeveloperscomchap04htmlnetwork-identify-risks-fortress-mentality&#34;&gt;&lt;a href=&#34;https://f1.holisticinfosecforwebdevelopers.com/chap04.html#network-identify-risks-fortress-mentality&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Fortress / Candy Bar Mentality&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Let’s discuss the Fortress or Candy Bar mentality.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This is where organisations believe that all of their attackers are on the outside of the organisation, and those on the inside are trustworthy. What are your thoughts around this?&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;IBM X-Force - Cyber Security Intelligence Index researches a large number of organisations each year, and they’ve extracted some interesting data:&lt;/p&gt;
&lt;p&gt;2014&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;55% of all attacks were carried out by insiders&lt;/li&gt;
&lt;li&gt;31.5% were malicious inside actors&lt;/li&gt;
&lt;li&gt;23.5% were inadvertent inside actors&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2015&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;60% of all attacks were carried out by insiders&lt;/li&gt;
&lt;li&gt;44.5% were malicious inside actors&lt;/li&gt;
&lt;li&gt;15.5% were inadvertent inside actors&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2016&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;30% of all attacks were carried out by insiders&lt;/li&gt;
&lt;li&gt;7% were malicious inside actors&lt;/li&gt;
&lt;li&gt;23% were inadvertent inside actors&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;The Yahoo data breach and many others every day confirm that a large percentage of all security breaches come from within the organisations walls…&lt;br&gt;
Do you think that this is an indicator that our workers are succumbing to an increased number of social engineering attacks by outside attackers attempting to get their payloads inside the organisation’s networks?&lt;/li&gt;
&lt;li&gt;What are your thoughts around establishing a &lt;a href=&#34;https://www.theregister.co.uk/2016/04/06/googles_beyondcorp_security_policy/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;perimeterless network&lt;/a&gt; culture, where all components are treated as though they are directly accessible from the Internet?&lt;/li&gt;
&lt;li&gt;How do we go about achieving this&lt;/li&gt;
&lt;li&gt;For our listeners, can you define what command and control is?&lt;/li&gt;
&lt;li&gt;How do we stop insiders and outsiders connecting to our network access points and proliferating malware, C2 (define C2) clients, etc onto our corporate networks?&lt;/li&gt;
&lt;li&gt;How can we stop our transient staff from picking up malware at home or on the road and then propagating it on our corporate networks?&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;segmentationhttpsf1holisticinfosecforwebdeveloperscomchap04htmlnetwork-identify-risks-lack-of-segmentation&#34;&gt;&lt;a href=&#34;https://f1.holisticinfosecforwebdevelopers.com/chap04.html#network-identify-risks-lack-of-segmentation&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Segmentation&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Creating perimeterless networks can be evolutionary. Until we get to that point, segmentation can help us by allowing us to harden sections of our networks at a time. It also provides us with levels of isolation for critical services.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Can you explain what network segmentation is, and what are some of the risks likely to occur if well thought out segmentation is not implemented?&lt;/li&gt;
&lt;li&gt;Apparently most of our IoT devices need to have internet access, one of the problems here is that there is little to no thought to building security into the components and the devices as a whole. How would we apply network segmentation to these devices, would it improve the security issues we have with IoT, if so, how?&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;visibility&#34;&gt;Visibility&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;If you don’t have visibility as to what’s happening on your network at all levels, then chances are things are happening that you don’t want happening. There are known attacks that target each of the network layers. What are some of the attacks that we need visibility on?&lt;/li&gt;
&lt;li&gt;What are some of the techniques and practises for creating visibility on the different levels?&lt;/li&gt;
&lt;li&gt;Where aboustwhere can we set-up network logging?&lt;/li&gt;
&lt;li&gt;How do we make sure those logs are reliable and have not been tampered with?&lt;/li&gt;
&lt;li&gt;What are &lt;a href=&#34;https://f1.holisticinfosecforwebdevelopers.com/chap04.html#leanpub-auto-lack-of-network-intrusion-detection-systems-nids&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;NIDS&lt;/a&gt;, how do they work, &lt;a href=&#34;https://f1.holisticinfosecforwebdevelopers.com/chap04.html#network-countermeasures-lack-of-visibility-nids&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;what do they give&lt;/a&gt; us in terms of visibility?&lt;/li&gt;
&lt;li&gt;Can you give an explanation of the differences between the signature-based and anomaly-based detection techniques? Maybe with some pros and cons of each?&lt;/li&gt;
&lt;li&gt;What are some of the well known NIDS?&lt;/li&gt;
&lt;li&gt;Where would I set a NIDS up?&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;spoofing&#34;&gt;Spoofing&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Can you explain what spoofing is and how it works?&lt;/li&gt;
&lt;li&gt;What are the different types of spoofing attacks?&lt;br&gt;
(IP, ARP, DNS, Referrer, EMail Address, Website)&lt;/li&gt;
&lt;li&gt;Often spoofing is used as a component to a larger attack, can you explain how it might fit into a larger attack?&lt;br&gt;
(website spoof as part of a phish)
(ARP and DNS often combined with other spoofs)&lt;/li&gt;
&lt;li&gt;What are some of the countermeasures we could put in place to mitigate the different types of spoofing attacks?&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;data-exfiltration-infiltrationhttpsf1holisticinfosecforwebdeveloperscomchap04htmlnetwork-identify-risks-data-exfiltration-infiltration&#34;&gt;&lt;a href=&#34;https://f1.holisticinfosecforwebdevelopers.com/chap04.html#network-identify-risks-data-exfiltration-infiltration&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Data Exfiltration, Infiltration&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;What is data infiltration, exfiltration?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What are some of the infiltration, exfiltration techniques and tools commonly used?&lt;br&gt;
(Dropbox, physical, mobile phone data, DNS/SSH)&lt;/li&gt;
&lt;li&gt;Let’s say you’re hired as a penetration tester to hack a security conscious organisation and steal their data, a bank for example. The organisation has no public internet facing application that has access to the internal organisations data. The only means of egress is via a very restrictive proxy. Assuming we know where the data is, how would we go about exfiltrating the data?&lt;br&gt;
(DNS tunnelling)&lt;/li&gt;
&lt;li&gt;What are some of the countermeasures we could put in place to mitigate the different techniques for infiltration and exfiltration?&lt;/li&gt;
&lt;li&gt;What could Yahoo have done to:
&lt;ol&gt;
&lt;li&gt;Slow down the exfiltration of 1 billion user accounts in 2013 &amp;amp; 500 million user accounts in 2014?&lt;/li&gt;
&lt;li&gt;Protect the secrets, namely MD5 passwords that were exfiltrated in 2013?&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;trusting-the-loading-of-untrusted-web-resourceshttpsf1holisticinfosecforwebdeveloperscomchap04htmlnetwork-identify-risks-wrongfully-trusting-the-loading-of-untrusted-web-resources&#34;&gt;&lt;a href=&#34;https://f1.holisticinfosecforwebdevelopers.com/chap04.html#network-identify-risks-wrongfully-trusting-the-loading-of-untrusted-web-resources&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Trusting the Loading of Untrusted Web Resources&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;A very common technique for attackers wishing to get their malicious scripts into the end users browser is by intercepting the request and swapping parts of the response with their malicious scripts. What are some of the evils an attacker may be able to have executed in the end user’s browser?&lt;/li&gt;
&lt;li&gt;What are some countermeasures to help &lt;a href=&#34;https://f1.holisticinfosecforwebdevelopers.com/chap04.html#network-countermeasures-wrongfully-trusting-the-loading-of-untrusted-web-resources&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;stop the loading of untrusted web resources&lt;/a&gt; and how do they work?&lt;br&gt;
(&lt;a href=&#34;https://f1.holisticinfosecforwebdevelopers.com/chap04.html#network-countermeasures-wrongfully-trusting-the-loading-of-untrusted-web-resources-csp&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CSP&lt;/a&gt;, &lt;a href=&#34;https://f1.holisticinfosecforwebdevelopers.com/chap04.html#network-countermeasures-wrongfully-trusting-the-loading-of-untrusted-web-resources-sri&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SRI&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;tls-downgradehttpsf1holisticinfosecforwebdeveloperscomchap04htmlnetwork-identify-risks-tls-downgrade&#34;&gt;&lt;a href=&#34;https://f1.holisticinfosecforwebdevelopers.com/chap04.html#network-identify-risks-tls-downgrade&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TLS Downgrade&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;A fairly common attack with TLS is to attempt a downgrade, what is a TLS downgrade and how does it work?&lt;/li&gt;
&lt;li&gt;What are some of the mitigations available to help &lt;a href=&#34;https://f1.holisticinfosecforwebdevelopers.com/chap04.html#network-countermeasures-tls-downgrade&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;stopping a downgrade&lt;/a&gt;?&lt;br&gt;
(&lt;a href=&#34;https://f1.holisticinfosecforwebdevelopers.com/chap04.html#network-countermeasures-tls-downgrade-hsts&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;HSTS&lt;/a&gt;, &lt;a href=&#34;https://f1.holisticinfosecforwebdevelopers.com/chap04.html#network-countermeasures-tls-downgrade-hsts-preload&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;HSTS Preload&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;shift-from-netsec-to-appsechttpsf1holisticinfosecforwebdeveloperscomchap06htmlweb-applications-cloudsec-soceng&#34;&gt;Shift from NetSec to &lt;a href=&#34;https://f1.holisticinfosecforwebdevelopers.com/chap06.html#web-applications&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AppSec&lt;/a&gt;, CloudSec, SocEng&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The most effective targeted attack techniques today are still the simple &lt;a href=&#34;https://f0.holisticinfosecforwebdevelopers.com/chap08.html#people-identify-risks-weak-password-strategies&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;password stealing&lt;/a&gt;, &lt;a href=&#34;https://f0.holisticinfosecforwebdevelopers.com/chap08.html#people-identify-risks-spear-phishing&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;spear phishing&lt;/a&gt; (as with Yahoo), web shells, social media and &lt;a href=&#34;https://f1.holisticinfosecforwebdevelopers.com/chap03.html#vps-identify-risks-powershell-exploitation-via-office-documents-co-nishang&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;weaponised documents&lt;/a&gt;. Most of which have a reliance on network vulnerabilities somewhere. What are the network security vulnerabilities that allow these types of attacks?&lt;/li&gt;
&lt;li&gt;Another incident that affected Yahoo involved the attackers forging cookies, rather than requiring passwords as a way to break into user accounts, 32 million user accounts were affected using this technique. This was due to the fact that the attacker had the cookie creation code that didn&amp;rsquo;t even need a password, so this sounds like defective code? Application security?&lt;/li&gt;
&lt;li&gt;What other types of networks do you think we as Software Engineers should be concerned about in order to mitigate attacks via these mediums?&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Talk - The Art of Exploitation</title>
      <link>https://binarymist.io/event/js-remote-conf-2017-the-art-of-exploitation/</link>
      <pubDate>Wed, 15 Mar 2017 14:15:00 +1300</pubDate>
      <guid>https://binarymist.io/event/js-remote-conf-2017-the-art-of-exploitation/</guid>
      <description>
&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/IVLpmCtiPZ0&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;br&gt;
&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;d1298f1dcafb4876b471055aa39bea42&#34; data-ratio=&#34;1.33159947984395&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
&lt;blockquote&gt;
&lt;p&gt;Some of the PowerShell plays from Kim&amp;rsquo;s second &lt;a href=&#34;https://f1.holisticinfosecforwebdevelopers.com/chap03.html#vps-identify-risks-powershell&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;book&lt;/a&gt;:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/a01IJzqYD8I&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;br&gt;
</description>
    </item>
    
    <item>
      <title>Talk - The Art of Exploitation</title>
      <link>https://binarymist.io/event/nz-js-con-2017-the-art-of-exploitation/</link>
      <pubDate>Thu, 09 Mar 2017 16:00:00 +1300</pubDate>
      <guid>https://binarymist.io/event/nz-js-con-2017-the-art-of-exploitation/</guid>
      <description>
&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/IVLpmCtiPZ0&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;br&gt;
&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;d1298f1dcafb4876b471055aa39bea42&#34; data-ratio=&#34;1.33159947984395&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
&lt;blockquote&gt;
&lt;p&gt;Some of the PowerShell plays from Kim&amp;rsquo;s second &lt;a href=&#34;https://f1.holisticinfosecforwebdevelopers.com/chap03.html#vps-identify-risks-powershell&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;book&lt;/a&gt;:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/a01IJzqYD8I&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;br&gt;
</description>
    </item>
    
    <item>
      <title>Workshop - Windows Exploitation and Persistence with PowerShell</title>
      <link>https://binarymist.io/event/isig-2017-workshop-windows-exploitation-and-persistence-with-ps/</link>
      <pubDate>Wed, 25 Jan 2017 19:30:00 +1300</pubDate>
      <guid>https://binarymist.io/event/isig-2017-workshop-windows-exploitation-and-persistence-with-ps/</guid>
      <description>&lt;p&gt;The common payload takes the user supplied shellcode and overwrites the first 0x1000 bytes of the calling instance of PowerShell, creates a thread to execute within the virtual address space of the calling PowerShell instance and starts it.&lt;/p&gt;
&lt;p&gt;All delivery and persistence techniques ensure AV bypass of shellcode.&lt;/p&gt;
&lt;p&gt;Kim has dissected and will explain how the virus and payload works.&lt;/p&gt;
&lt;p&gt;We will look at delivery mediums (virus):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Compiled C executable&lt;/li&gt;
&lt;li&gt;Office document (take your pick) C/- Nishang&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Persistence mediums:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Meterpreter (busted by AV)&lt;/li&gt;
&lt;li&gt;PowerSploit&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Bring your pentesting devices if you want to do this workshop style, and we can do hands on.&lt;/p&gt;
&lt;h3 id=&#34;video-0&#34;&gt;Video 0&lt;/h3&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/a01IJzqYD8I&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h3 id=&#34;video-1&#34;&gt;Video 1&lt;/h3&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/al9RX40QuXU&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;br&gt;
</description>
    </item>
    
    <item>
      <title>Talk - Agile Security for Web Developers</title>
      <link>https://binarymist.io/event/agilenz-2016-agile-security-for-web-developers/</link>
      <pubDate>Tue, 29 Nov 2016 16:00:00 +1300</pubDate>
      <guid>https://binarymist.io/event/agilenz-2016-agile-security-for-web-developers/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Talk - Agile Security for Web Developers</title>
      <link>https://binarymist.io/event/agile-professionals-network-2016-agile-security-for-web-developers/</link>
      <pubDate>Thu, 18 Aug 2016 18:00:00 +1200</pubDate>
      <guid>https://binarymist.io/event/agile-professionals-network-2016-agile-security-for-web-developers/</guid>
      <description>&lt;br&gt;
&lt;h2 id=&#34;what-others-have-said&#34;&gt;What others have said&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.meetup.com/Christchurch-Agile-Professionals-Network/events/231738713/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;













&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;
        &lt;img alt=&#34;What others say about kims talk&#34; srcset=&#34;
               /media/talk/what-others-say-2016-apn_hu1c68402a0a89da5d60d9b4b42d46350d_9846_49ccf19b3fd89c47bb3c3a9525f5cea7.png 400w,
               /media/talk/what-others-say-2016-apn_hu1c68402a0a89da5d60d9b4b42d46350d_9846_5e75bd6448d7d68959f11e95518dcb3f.png 760w,
               /media/talk/what-others-say-2016-apn_hu1c68402a0a89da5d60d9b4b42d46350d_9846_1200x1200_fit_lanczos_2.png 1200w&#34;
               src=&#34;https://binarymist.io/media/talk/what-others-say-2016-apn_hu1c68402a0a89da5d60d9b4b42d46350d_9846_49ccf19b3fd89c47bb3c3a9525f5cea7.png&#34;
               width=&#34;760&#34;
               height=&#34;152&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;
</description>
    </item>
    
    <item>
      <title>Talk - Agile Security for Web Developers</title>
      <link>https://binarymist.io/event/code-camp-chch-2016-agile-security-for-web-developers/</link>
      <pubDate>Sat, 18 Jun 2016 10:00:00 +1200</pubDate>
      <guid>https://binarymist.io/event/code-camp-chch-2016-agile-security-for-web-developers/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Security Review, Penetration Testing</title>
      <link>https://binarymist.io/project/service-security-review-penetration-testing/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate>
      <guid>https://binarymist.io/project/service-security-review-penetration-testing/</guid>
      <description>&lt;h4 id=&#34;situation&#34;&gt;Situation&lt;/h4&gt;
&lt;p&gt;Your software project is at the stage where you would like some verification that it is going to be able to resist attacks from your likely attackers.&lt;/p&gt;
&lt;p&gt;You have deployed your project to the Cloud and need some confirmation that the infrastructure is configured correctly so that your attackers can not compromise your customers.&lt;/p&gt;
&lt;p&gt;Docker containers can be a god send for creating micro-service architectures, but often Docker environments are insecure by default.&lt;/p&gt;
&lt;p&gt;Your Software Engineers are building networks by way of infrastructure as code (IaC). These networks need security review and sometimes penetration testing.&lt;/p&gt;
&lt;h4 id=&#34;we-can-do-better&#34;&gt;We can do better&lt;/h4&gt;
&lt;p&gt;Would you like peace of mind that your software project is going to be able to withstand the likely attacks from your adversaries?&lt;/p&gt;
&lt;p&gt;Achieving and maintaining a level of security with your cloud configuration, security rules and settings can be a daunting task. Would you like to be able to relax and be confident that this is taken care of?&lt;/p&gt;
&lt;p&gt;Securing your micro-service and Docker environments is not for the faint hearted, this is an area that Kim has a wealth of experience in. You too can share the same knowledge that your micro-service and Docker environments are &lt;a href=&#34;https://binarymist.io/publication/docker-security/&#34;&gt;well secured&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With the knowledge and experience that we have with cloud environments and tools such as Terraform, Ansible, etc, you can rest assured that the networks your Engineers are creating are configured correctly, and will resist the attempts of your attackers.&lt;/p&gt;
&lt;h4 id=&#34;how-we-can-help&#34;&gt;How we can help&lt;/h4&gt;
&lt;p&gt;Although we advocate bringing the security focus &lt;a href=&#34;https://binarymist.io/project/service-development-team-security-implementation/&#34;&gt;up front&lt;/a&gt; where it&amp;rsquo;s the cheapest to implement, we understand that this is a journey that takes time. Ultimately our aim is to help you get there, but in the interim, we can work with you by reviewing, testing and establishing a solid security stature across your market offerings.&lt;/p&gt;
&lt;p&gt;We can review, penetration test, evaluate costs and trade-offs, provide a custom report outlining the defects and effective mitigations. Then work with your development team(s) to help them understand the issues and how to apply the mitigations themselves, thus aiding recognition of future defects as they&amp;rsquo;re introduced, saving large amounts of rework. We can also simply fix the defects for you if that&amp;rsquo;s your preference.&lt;/p&gt;
&lt;p&gt;We can traverse the minefield of your cloud environment with you. Locate, document, and work with your Engineers helping them to rectify the security issues in your cloud deployments, or apply the necessary remedies for you and your teams.&lt;/p&gt;
&lt;p&gt;Network security is an area that Kim has been actively engaged in designing, building and breaking for many years. We can work with you supplying valuable knowledge and experience to your project.&lt;/p&gt;
&lt;br&gt;
&lt;blockquote&gt;
&lt;p&gt;Let us review, test, and provide the peace of mind that your market offerings will withstand the attacks from your adversaries&amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;
&lt;hr&gt;
&lt;h1 id=&#34;reserve-your-consultation&#34;&gt;Reserve Your Consultation&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;Currently we have availability for select new clients.&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a class=&#34;btn btn-outline-primary&#34; href=&#34;https://binarymist.io/#contact&#34;&gt;&lt;b&gt;Reserve Your Confidential Consultation&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;Due to the sensitive nature of these engagements, they are not usually added to our portfolio, but you can see&amp;hellip;&lt;/p&gt;
&lt;h2 id=&#34;what-our-customers-are-saying&#34;&gt;What our customers are saying&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Stefan Streichsbier&lt;/p&gt;
&lt;img class=&#34;testimonial-img-bordered&#34; src=&#34;../testimonial-stefan-streichsbier/featured.jpg&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://binarymist.io/project/portfolio-numisec&#34;&gt;Numisec Pte. Ltd&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I&amp;rsquo;ve met Kim at DevSecCon Singapore in 2017 where he gave a well-received &lt;a href=&#34;https://binarymist.io/event/devseccon-asia-2017-workshop-developing-a-high-perf-security-focussed-agile-team/&#34;&gt;workshop&lt;/a&gt;. A few months later we had a project where his top-notch strong &lt;strong&gt;Node.js security&lt;/strong&gt; code review skills were required and this gave us the chance to work together closely.&lt;/p&gt;
&lt;p&gt;Over a 2 week period he was doing security code reviews of containerized Node.js &lt;strong&gt;microservices&lt;/strong&gt; in a very thorough way. We communicated well and progressed quickly. Kim has a very broad yet deep understanding of modern application security that comes from years of experience. I can recommend Kim to anyone who needs an &lt;a href=&#34;https://f1.holisticinfosecforwebdevelopers.com/chap06.html#web-applications&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;application security&lt;/a&gt; expert and wants a professional second opinion on the security posture of an application.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;
&lt;p&gt;Kim has spent significant effort in researching &lt;a href=&#34;https://binarymist.io/publication/docker-security/&#34;&gt;Docker security&lt;/a&gt;, how to determine insecure environments, configurations, how to provide countermeasures, and has &lt;a href=&#34;https://f1.holisticinfosecforwebdevelopers.com/chap03.html#vps-identify-risks-docker&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;written&lt;/a&gt; on the topic &lt;a href=&#34;https://f1.holisticinfosecforwebdevelopers.com/chap03.html#vps-countermeasures-docker&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;extensively&lt;/a&gt;. Kim has also liaised with and &lt;a href=&#34;https://binarymist.io/publication/ser-podcast-docker-security/&#34;&gt;interviewed&lt;/a&gt; the Docker Security Team Lead, and is well equipped to address and rectify any security issues you may have with Docker environments.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    BinaryMist project leveraging Docker and Terraform to create free and secure networking components:
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/binarymist/aws-docker-host&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;img src=&#34;https://github.com/binarymist/aws-docker-host/raw/master/Logo.png&#34; alt=&#34;AWS Docker Host&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Kim has also detailed some of his network knowledge in the &lt;a href=&#34;https://f1.holisticinfosecforwebdevelopers.com/chap04.html#network&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Network chapter&lt;/a&gt; of his second book, along with &lt;a href=&#34;https://binarymist.io/publication/ser-podcast-network-security/&#34;&gt;interview&lt;/a&gt; of network security guru Haroon Meer.&lt;/p&gt;
&lt;p&gt;Because Kim has spent many years in development and engineering, as well as performing security reviews and penetration tests, he brings a unique and holistic view of what is required from both sides (defence and attack), being able to work with your team(s) to provide effective and realistic simulations of real-world attacks, at the same time, coaching your developers what to look for.&lt;/p&gt;
&lt;br&gt;
&lt;hr&gt;
&lt;h1 id=&#34;reserve-your-consultation-1&#34;&gt;Reserve Your Consultation&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;Currently we have availability for select new clients.&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a class=&#34;btn btn-outline-primary&#34; href=&#34;https://binarymist.io/#contact&#34;&gt;&lt;b&gt;Reserve Your Confidential Consultation&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;Due to the nature of this type of work, we can only take on one new client per month.&lt;/p&gt;
&lt;br&gt;
</description>
    </item>
    
    <item>
      <title>TL-WN722N on Kali VM on Linux Host</title>
      <link>https://binarymist.io/blog/2015/09/03/tl-wn722n-on-kali-vm-on-linux-host/</link>
      <pubDate>Thu, 03 Sep 2015 00:00:00 +1200</pubDate>
      <guid>https://binarymist.io/blog/2015/09/03/tl-wn722n-on-kali-vm-on-linux-host/</guid>
      <description>&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;TL-WN722N on Kali VM on Linux Host&lt;/title&gt;
    &lt;link rel=&#34;canonical&#34; href=&#34;https://binarymist.wordpress.com/2015/09/03/tl-wn722n-on-kali-vm-on-linux-host/&#34;/&gt;
    &lt;meta http-equiv=&#34;content-type&#34; content=&#34;text/html; charset=utf-8&#34;/&gt;
    &lt;meta http-equiv=&#34;refresh&#34; content=&#34;3; url=https://binarymist.wordpress.com/2015/09/03/tl-wn722n-on-kali-vm-on-linux-host/&#34;/&gt;
  &lt;/head&gt;
&lt;/html&gt;
</description>
    </item>
    
    <item>
      <title>Talk - 0wn1ng The Web</title>
      <link>https://binarymist.io/event/wdcnz-2015-0wn1ng-the-web/</link>
      <pubDate>Thu, 23 Jul 2015 15:10:00 +1200</pubDate>
      <guid>https://binarymist.io/event/wdcnz-2015-0wn1ng-the-web/</guid>
      <description>&lt;p&gt;New advances in technology look shiny… until we stop believing the hype, open our minds and start poking at them. Let me show you what happens when we start poking.&lt;/p&gt;
&lt;h3 id=&#34;presentation-video&#34;&gt;Presentation Video&lt;/h3&gt;
&lt;br&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/lsx07BR7Xm0&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;br&gt;
&lt;h3 id=&#34;slide-deck&#34;&gt;Slide Deck&lt;/h3&gt;
&lt;br&gt;
&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;8d03e8bd71154a2c94b6b8a33e9e2436&#34; data-ratio=&#34;1.33159947984395&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
&lt;br&gt;
&lt;p&gt;The presentation is basically the process I take to carry out a small client penetration testing assignment, but with a focus on why and how web developers should be doing the same within their teams. It goes through:&lt;/p&gt;
&lt;p&gt;Why we even care about breaking our or a clients code and/or system(s)&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;no-room&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Reconnaissance (information gathering), tools and tips&lt;/li&gt;
&lt;li&gt;Vulnerability scanning, tools and tips&lt;/li&gt;
&lt;li&gt;Vulnerability searching, tools and tips&lt;/li&gt;
&lt;li&gt;Exploitation, where to start, how to start, tools (and why) and tips&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    No Room Left!
  &lt;/div&gt;
&lt;/div&gt;














&lt;figure  id=&#34;figure-standing-room-only&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;
        &lt;img alt=&#34;Kim Carter WDCNZ&#34; srcset=&#34;
               /media/talk/wdcnz-2015-standing-room-only_hucff3617e3fe90aa5ee036e213f166232_190924_01e990f1972fb78cd274ba5c3a52932a.jpg 400w,
               /media/talk/wdcnz-2015-standing-room-only_hucff3617e3fe90aa5ee036e213f166232_190924_cd1082591c178282df2689ecf8c0aa0d.jpg 760w,
               /media/talk/wdcnz-2015-standing-room-only_hucff3617e3fe90aa5ee036e213f166232_190924_1200x1200_fit_q90_lanczos.jpg 1200w&#34;
               src=&#34;https://binarymist.io/media/talk/wdcnz-2015-standing-room-only_hucff3617e3fe90aa5ee036e213f166232_190924_01e990f1972fb78cd274ba5c3a52932a.jpg&#34;
               width=&#34;760&#34;
               height=&#34;507&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Standing room only
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Demo 1: Exploiting an XSS vulnerable web app and what you can get from it. The whole reason being here is to be able to show your employer / boss / client and why they need to do something about it. After seeing how easy it is and what you can do, few will deny that it just needs to be fixed.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/92AWyUfJDUw&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Discuss countermeasures&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;
&lt;p&gt;Demo 2: Exploiting people with spear phishing, obtaining their credentials by cloning, spoofing a website they frequently login at with the Social Engineer Toolkit&amp;rsquo;s (SET) Credential Harvester.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/tb4o5UCHzSA&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Discuss countermeasures&lt;/li&gt;
&lt;li&gt;doppelganger domains (domains that look like the real thing but are fakes)&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;
&lt;p&gt;Demo 3: Add ARP and DNS spoofing to the mix. Now when a victim browsers to a website that they like to spend time at, they will be visiting our spoofed website. We add the Browser Exploitation Framework (BeEF) hook.js to the cloned website. This hook converts the victims browser into a zombie that continually polls the BeEF comms server requesting commands to execute on the victims machine. This is the window of time we use to install a root-kit and pwn the victims machine.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/ymnqTrnF85M&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Discuss countermeasures&lt;/li&gt;
&lt;li&gt;Discuss what we can do with BeEF&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;
&lt;p&gt;Demo 4: Again we clone and host a website we know the victim likes to visit with SET. We use a couple of Metasploit attack methods and exploit memory injection. Then select a collection of payloads to deliver via shell code injection. Encrypt the payloads and configure the reverse shells. launch Metasploit and watch the reverse shells connect. Attempt to escalate privileges to system account. anti-virus (AV) stops us.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/WSwqNb_94No&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Demo 5: We use Veil-Evasion to get around AV by creating our payload. We encrypt the payload with Hyperion using a weak 128-bit AES key, which decrypts itself by brute force at the time of execution on the victims machine. We use Metasploit to deliver our psexec exploit that we created with Veil-Evasion and Hyperion. We watch the attackers reverse shell connect straight to the system account.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/1EvwwYiMrV4&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Discuss countermeasures&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
</description>
    </item>
    
    <item>
      <title>Workshop - Holistic Info-Sec for Web Developers</title>
      <link>https://binarymist.io/event/campjs-2015-workshop-holistic-infosec-for-web-developers/</link>
      <pubDate>Sun, 24 May 2015 13:00:00 +1200</pubDate>
      <guid>https://binarymist.io/event/campjs-2015-workshop-holistic-infosec-for-web-developers/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    This was the very first workshop performed as Kim&amp;rsquo;s &lt;a href=&#34;https://holisticinfosecforwebdevelopers.com/&#34;&gt;book series&lt;/a&gt; was just getting started.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;We will also look at other tried and tested practices and processes for reducing security defects early. That is every Sprint for each Product Backlog Item (PBI). As an architect, engineer and security specialist, Kim will uncover how to identify the lowest hanging fruit (for the attackers) by taking a holistic approach (a 30,000′ view), then honing in on the areas with the highest security ratings, based on a tried and tested threat modelling process that allows you to discover and prioritise the defects most likely to be compromised by attackers of your systems.&lt;/p&gt;
&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;0e1b9d60c2b84ca99bd4824fc9366f54&#34; data-ratio=&#34;1.33159947984395&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
&lt;br&gt;
&lt;p&gt;We are going to look at automating (Security Test (Behaviour) Driven Development (STDD/SBDD)) some of the traditional manual based penetration testing methods often performed after go live and bringing them forward into parallel with your development cycles (Sprints).
Thus empowering Developers to do what was once only performed by deeply specialised security consultancies at the end of the project. Dramatically increasing the confidence we as developers have in what we are delivering, thus reducing the cost of change due to defects being found as they are introduced rather than at go live. Trainee Requirements:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Laptop or something able to run the following&lt;/li&gt;
&lt;li&gt;Some virtualisation software able to run an ISO. I.E. VirtualBox or VMWare&lt;/li&gt;
&lt;li&gt;Test tools required
&lt;ul&gt;
&lt;li&gt;Kali Linux (physical or bootable USB stick or VM)
&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
