<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Content tagged as &#39;Windows&#39; on BinaryMist</title>
    <link>https://binarymist.io/tags/windows/</link>
    <description>Recent content in Content tagged as &#39;Windows&#39; on BinaryMist</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018 BinaryMist Ltd &lt;/br&gt;Following images are used under Creative Commons: [1](https://www.flickr.com/photos/ravefinity/12180959354/in/photostream/) &lt;/br&gt;[Privacy](/publication/privacy/)</copyright>
    <lastBuildDate>Fri, 01 Jan 2016 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://binarymist.io/tags/windows/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Software Engineer Interview Process and Questions</title>
      <link>https://binarymist.io/blog/2013/04/27/software-engineer-interview-process-and-questions/</link>
      <pubDate>Sat, 27 Apr 2013 00:00:00 +1200</pubDate>
      
      <guid>https://binarymist.io/blog/2013/04/27/software-engineer-interview-process-and-questions/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;A short time ago, I was tasked with finding the right software engineer/s for the organisation I was working for. I settled on a process, a set of background questions,  a set of practical programming exercises and a set of verbal questions. Later on I cut the set of verbal questions down to a quicker set. In this post, I’ll be going over the process and the full set of verbal questions. In a subsequent post I’ll go over the quicker set.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Decent Console for Windows</title>
      <link>https://binarymist.io/blog/2013/01/19/a-decent-console-for-windows/</link>
      <pubDate>Sat, 19 Jan 2013 00:00:00 +1300</pubDate>
      
      <guid>https://binarymist.io/blog/2013/01/19/a-decent-console-for-windows/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;On *nix we’re kind of spoilt when it comes to the CLI experience. The console I use most in a GUI environment is the great terminator.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>OpenSSH from Linux to Windows 7 via tunneled RDP</title>
      <link>https://binarymist.io/blog/2011/12/27/openssh-from-linux-to-windows-7-via-tunneled-rdp/</link>
      <pubDate>Tue, 27 Dec 2011 00:00:00 +1300</pubDate>
      
      <guid>https://binarymist.io/blog/2011/12/27/openssh-from-linux-to-windows-7-via-tunneled-rdp/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;In this article I’ll go over getting Kali Linux installed and set-up. I’ll go over a few of the packages in a low level of detail (due to the share number of them) that come out of the box. On top of that I’ll also go over a few programmes I like to install separately. In a subsequent article I’d like to continue with additional programmes that come with Kali Linux as there are just to many to cover in one go.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Quick walk through, of my UPS library</title>
      <link>https://binarymist.io/blog/2011/08/04/quick-walk-through-of-my-ups-library/</link>
      <pubDate>Thu, 04 Aug 2011 00:00:00 +1200</pubDate>
      
      <guid>https://binarymist.io/blog/2011/08/04/quick-walk-through-of-my-ups-library/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;Part three of a three part series.&lt;/p&gt;

&lt;p&gt;On setting up a UPS solution, to enable clean shutdown of vital network components. In this post, we’ll be reviewing the library that performs the shutting down of our servers.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Preparing APC Smart-UPS 1500 clients</title>
      <link>https://binarymist.io/blog/2011/07/26/preparing-apc-smart-ups-1500-clients/</link>
      <pubDate>Tue, 26 Jul 2011 00:00:00 +1200</pubDate>
      
      <guid>https://binarymist.io/blog/2011/07/26/preparing-apc-smart-ups-1500-clients/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;Part two of a three part series.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Garbage Collection in dot NET 4.0</title>
      <link>https://binarymist.io/blog/2010/10/17/garbage-collection-in-dot-net-4.0/</link>
      <pubDate>Sun, 17 Oct 2010 00:00:00 +1300</pubDate>
      
      <guid>https://binarymist.io/blog/2010/10/17/garbage-collection-in-dot-net-4.0/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;Coverage on what&amp;rsquo;s new in the .NET 4.0 garbage collector.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Metadata Exchange options for WCF</title>
      <link>https://binarymist.io/blog/2010/09/05/metadata-exchange-options-for-wcf/</link>
      <pubDate>Sun, 05 Sep 2010 00:00:00 +1200</pubDate>
      
      <guid>https://binarymist.io/blog/2010/09/05/metadata-exchange-options-for-wcf/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;There are two options for publishing metadata from a WCF service. By default, the services metadata is not published. In order to make the services information about itself public, you must do either of the following.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Installation of SSH on 64bit Windows 7 to tunnel RDP</title>
      <link>https://binarymist.io/blog/2010/08/26/installation-of-ssh-on-64bit-windows-7-to-tunnel-rdp/</link>
      <pubDate>Thu, 26 Aug 2010 00:00:00 +1200</pubDate>
      
      <guid>https://binarymist.io/blog/2010/08/26/installation-of-ssh-on-64bit-windows-7-to-tunnel-rdp/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;This post covers two scenarios.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Message Inspection in WCF</title>
      <link>https://binarymist.io/blog/2010/06/14/message-inspection-in-wcf/</link>
      <pubDate>Mon, 14 Jun 2010 00:00:00 +1200</pubDate>
      
      <guid>https://binarymist.io/blog/2010/06/14/message-inspection-in-wcf/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;Message Inspectors can be a very usefull tool in diagnosing problems between WCF services and clients. The messages that are transferred between clients/services can be intercepted and operations performed on them. We’ve used this at work in conjunction with a tool called SaopUI to capture the SOAP messages and fire them at our service. This can be usefull for load testing, concurrency testing scenarios amongst others.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Duplex communication and callbacks in WCF</title>
      <link>https://binarymist.io/blog/2010/05/23/duplex-communication-and-callbacks-in-wcf/</link>
      <pubDate>Sun, 23 May 2010 00:00:00 +1200</pubDate>
      
      <guid>https://binarymist.io/blog/2010/05/23/duplex-communication-and-callbacks-in-wcf/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;I was reading in the book Enterprise Integration Patterns that my dev manager bought for the team, on the Message Endpoint pattern on the way home from work a few days ago.&lt;/p&gt;

&lt;p&gt;“A Message Endpoint can be used to send messages or receive them, but one instance does not do both” From my experience, this wasn’t necessarily true. So I decided to confirm my suspicion.
The following is a mix of what I read and tested out.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Logical vs Physical Addresses in WCF</title>
      <link>https://binarymist.io/blog/2010/04/18/logical-vs-physical-addresses-in-wcf/</link>
      <pubDate>Sun, 18 Apr 2010 00:00:00 +1200</pubDate>
      
      <guid>https://binarymist.io/blog/2010/04/18/logical-vs-physical-addresses-in-wcf/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;In this example, I share a listenUri between two endpoints.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Built-in MSMQ Bindings</title>
      <link>https://binarymist.io/blog/2010/04/05/built-in-msmq-bindings/</link>
      <pubDate>Mon, 05 Apr 2010 00:00:00 +1200</pubDate>
      
      <guid>https://binarymist.io/blog/2010/04/05/built-in-msmq-bindings/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;NetMsmqBinding&lt;/code&gt; only works if you have WCF on both sides of the Queue-to-Queue transfer. &lt;code&gt;MsmqIntegrationBinding&lt;/code&gt; is targeted toward existing MSMQ applications that use COM, native C++ APIs or the types defined in the &lt;code&gt;System.Messaging&lt;/code&gt; namespace (as stated by MSDN).&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>