<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Content tagged as &#39;Architecture&#39; on BinaryMist</title>
    <link>https://binarymist.io/tags/architecture/</link>
    <description>Recent content in Content tagged as &#39;Architecture&#39; on BinaryMist</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018 BinaryMist Ltd &lt;/br&gt;Following images are used under Creative Commons: [1](https://www.flickr.com/photos/ravefinity/12180959354/in/photostream/) &lt;/br&gt;[Privacy](/publication/privacy/)</copyright>
    <lastBuildDate>Fri, 01 Jan 2016 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://binarymist.io/tags/architecture/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Neil Ford on Success Skills for Architects</title>
      <link>https://binarymist.io/publication/ser-podcast-success-skills-for-architects/</link>
      <pubDate>Wed, 12 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://binarymist.io/publication/ser-podcast-success-skills-for-architects/</guid>
      <description>Neal Ford of ThoughtWorks chats with SE Radio’s Kim Carter about the skills required to be a successful software architect.</description>
    </item>
    
    <item>
      <title>Software Engineer Interview Quick Question Set</title>
      <link>https://binarymist.io/blog/2013/05/11/software-engineer-interview-quick-question-set/</link>
      <pubDate>Sat, 11 May 2013 00:00:00 +1200</pubDate>
      
      <guid>https://binarymist.io/blog/2013/05/11/software-engineer-interview-quick-question-set/</guid>
      <description>Redirects to legacy blog post.</description>
    </item>
    
    <item>
      <title>Software Engineer Interview Process and Questions</title>
      <link>https://binarymist.io/blog/2013/04/27/software-engineer-interview-process-and-questions/</link>
      <pubDate>Sat, 27 Apr 2013 00:00:00 +1200</pubDate>
      
      <guid>https://binarymist.io/blog/2013/04/27/software-engineer-interview-process-and-questions/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;A short time ago, I was tasked with finding the right software engineer/s for the organisation I was working for. I settled on a process, a set of background questions,  a set of practical programming exercises and a set of verbal questions. Later on I cut the set of verbal questions down to a quicker set. In this post, I’ll be going over the process and the full set of verbal questions. In a subsequent post I’ll go over the quicker set.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Moving to TDD</title>
      <link>https://binarymist.io/blog/2012/12/01/moving-to-tdd/</link>
      <pubDate>Sat, 01 Dec 2012 00:00:00 +1300</pubDate>
      
      <guid>https://binarymist.io/blog/2012/12/01/moving-to-tdd/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;The first thing to clear up is that TDD is not primarily about testing, but rather it forces the developer to write code that is testable (the fact the code has tests written for it and running regularly is a side effect, albeit a very positive one).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Keeping your events thread safe</title>
      <link>https://binarymist.io/blog/2012/03/11/keeping-your-events-thread-safe/</link>
      <pubDate>Sun, 11 Mar 2012 00:00:00 +1300</pubDate>
      
      <guid>https://binarymist.io/blog/2012/03/11/keeping-your-events-thread-safe/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;An area I’ve noticed where engineers often forget to think about synchronization is when firing events. It seems to be a common misconception, that all that is needed to keep synchronisation, is to check the delegate (technically a &lt;code&gt;MulticastDelegate&lt;/code&gt;, or in architectural terms the publisher of the publish-subscribe pattern (more commonly known as the observer pattern)) for null.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LSP, DbC and dot NET’s support part 2</title>
      <link>https://binarymist.io/blog/2010/10/12/lsp-dbc-and-dot-nets-support-part-2/</link>
      <pubDate>Tue, 12 Oct 2010 00:00:00 +1300</pubDate>
      
      <guid>https://binarymist.io/blog/2010/10/12/lsp-dbc-and-dot-nets-support-part-2/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;Part two.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LSP, DbC and dot NET’s support, part 1</title>
      <link>https://binarymist.io/blog/2010/10/11/lsp-dbc-and-dot-nets-support-part-1/</link>
      <pubDate>Mon, 11 Oct 2010 00:00:00 +1300</pubDate>
      
      <guid>https://binarymist.io/blog/2010/10/11/lsp-dbc-and-dot-nets-support-part-1/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;Part one.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Discussion on Class Construction Techniques</title>
      <link>https://binarymist.io/blog/2010/10/10/discussion-on-class-construction-techniques/</link>
      <pubDate>Sun, 10 Oct 2010 00:00:00 +1300</pubDate>
      
      <guid>https://binarymist.io/blog/2010/10/10/discussion-on-class-construction-techniques/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;I had a discussion with some work colleges a short while ago, around a couple of different techniques of constructing a class object. The two approaches involved in the discussion where&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>