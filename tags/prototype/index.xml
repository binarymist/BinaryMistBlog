<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Content tagged as &#39;Prototype&#39; on BinaryMist</title>
    <link>https://binarymist.io/tags/prototype/</link>
    <description>Recent content in Content tagged as &#39;Prototype&#39; on BinaryMist</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018 BinaryMist Ltd &lt;/br&gt;Following images are used under Creative Commons: [1](https://www.flickr.com/photos/ravefinity/12180959354/in/photostream/) &lt;/br&gt;[Privacy](/publication/privacy/)</copyright>
    <lastBuildDate>Fri, 01 Jan 2016 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://binarymist.io/tags/prototype/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Node.js Asynchronicity and Callback Nesting</title>
      <link>https://binarymist.io/blog/2014/07/26/node.js-asynchronicity-and-callback-nesting/</link>
      <pubDate>Sat, 26 Jul 2014 00:00:00 +1200</pubDate>
      
      <guid>https://binarymist.io/blog/2014/07/26/node.js-asynchronicity-and-callback-nesting/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;AKA callback hell, temple of doom, often the functions that are nested are anonymous and often they are implicit closures. When it comes to asynchronicity in JavaScript, callbacks are our bread and butter. In saying that, often the best way to use them is by abstracting them behind more elegant APIs.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Exploring JavaScript Prototypes</title>
      <link>https://binarymist.io/blog/2014/06/28/exploring-javascript-prototypes/</link>
      <pubDate>Sat, 28 Jun 2014 00:00:00 +1200</pubDate>
      
      <guid>https://binarymist.io/blog/2014/06/28/exploring-javascript-prototypes/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;My intention with this post is to arm our developers with enough information around JavaScript prototypes to know when they are the right tool for the job as opposed to other constructs when considering how to create polymorphic JavaScript thatâ€™s performant and easy to maintain.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>JavaScript Object Creation Patterns</title>
      <link>https://binarymist.io/blog/2013/07/06/javascript-object-creation-patterns/</link>
      <pubDate>Sat, 06 Jul 2013 00:00:00 +1200</pubDate>
      
      <guid>https://binarymist.io/blog/2013/07/06/javascript-object-creation-patterns/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;What are the differences in creating an object by way of simple function invocation, vs using a constructor vs creating an object using the object literal notation vs function application?&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>