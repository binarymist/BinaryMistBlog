<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Content tagged as &#39;Dot-Net&#39; on BinaryMist</title>
    <link>https://binarymist.io/tags/dot-net/</link>
    <description>Recent content in Content tagged as &#39;Dot-Net&#39; on BinaryMist</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018 BinaryMist Ltd &lt;/br&gt;Following images are used under Creative Commons: [1](https://www.flickr.com/photos/ravefinity/12180959354/in/photostream/) &lt;/br&gt;[Privacy](/publication/privacy/)</copyright>
    <lastBuildDate>Fri, 01 Jan 2016 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://binarymist.io/tags/dot-net/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Holistic Info-Sec for Web Developers</title>
      <link>https://binarymist.io/publication/holistic-infosec-for-web-developers/</link>
      <pubDate>Fri, 01 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://binarymist.io/publication/holistic-infosec-for-web-developers/</guid>
      <description>A three part book series focused on lifting the security knowledge of Software Developers, Engineers, and their teams, so that they can continuously deliver secure technical solutions on time and within budget, without nasty surprises.&lt;br&gt;&lt;br&gt;First book is complete, second book is content complete and currently in technical review.</description>
    </item>
    
    <item>
      <title>Automating Specification by Example for .NET Web Applications</title>
      <link>https://binarymist.io/blog/2014/02/22/automating-specification-by-example-for-.net-web-applications/</link>
      <pubDate>Sat, 22 Feb 2014 00:00:00 +1300</pubDate>
      
      <guid>https://binarymist.io/blog/2014/02/22/automating-specification-by-example-for-.net-web-applications/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;It’s my intention that the following details will help you create a system that automates “Specification by Example”.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Evaluation of dot Net Mocking libraries</title>
      <link>https://binarymist.io/blog/2013/12/14/evaluation-of-dot-net-mocking-libraries/</link>
      <pubDate>Sat, 14 Dec 2013 00:00:00 +1300</pubDate>
      
      <guid>https://binarymist.io/blog/2013/12/14/evaluation-of-dot-net-mocking-libraries/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;I’ve recently undertaken another round of evaluating .NET mocking (fake/substitute/dummy/stub/ or what ever you want to call them now) libraries. Interestingly the landscape has changed quite a bit since last time I went through this exercise, which was about two years ago. The outcome of the previous investigation is at the bottom of this post.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Software Engineer Interview Quick Question Set</title>
      <link>https://binarymist.io/blog/2013/05/11/software-engineer-interview-quick-question-set/</link>
      <pubDate>Sat, 11 May 2013 00:00:00 +1200</pubDate>
      
      <guid>https://binarymist.io/blog/2013/05/11/software-engineer-interview-quick-question-set/</guid>
      <description>Redirects to legacy blog post.</description>
    </item>
    
    <item>
      <title>Software Engineer Interview Process and Questions</title>
      <link>https://binarymist.io/blog/2013/04/27/software-engineer-interview-process-and-questions/</link>
      <pubDate>Sat, 27 Apr 2013 00:00:00 +1200</pubDate>
      
      <guid>https://binarymist.io/blog/2013/04/27/software-engineer-interview-process-and-questions/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;A short time ago, I was tasked with finding the right software engineer/s for the organisation I was working for. I settled on a process, a set of background questions,  a set of practical programming exercises and a set of verbal questions. Later on I cut the set of verbal questions down to a quicker set. In this post, I’ll be going over the process and the full set of verbal questions. In a subsequent post I’ll go over the quicker set.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sanitising User Input from Browser part 2</title>
      <link>https://binarymist.io/blog/2012/11/16/sanitising-user-input-from-browser-part-2/</link>
      <pubDate>Fri, 16 Nov 2012 00:00:00 +1300</pubDate>
      
      <guid>https://binarymist.io/blog/2012/11/16/sanitising-user-input-from-browser-part-2/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;Untrusted data (data entered by a user), should always be treated as though it contains attack code. This data should not be sent anywhere without taking the necessary steps to detect and neutralise the malicious code.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>C Sharp Dot NET Coding Standards and Guidelines</title>
      <link>https://binarymist.io/blog/2012/08/12/c-sharp-dot-net-coding-standards-and-guidelines/</link>
      <pubDate>Sun, 12 Aug 2012 00:00:00 +1200</pubDate>
      
      <guid>https://binarymist.io/blog/2012/08/12/c-sharp-dot-net-coding-standards-and-guidelines/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;This is the current set of coding standards and guidelines I use when I’m coding in the C#.NET language. I thought it would be good to share so others could get use out of them also, and maybe start a discussion as to amendments / changes they see that could be useful?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Handful of Singletons in C Sharp</title>
      <link>https://binarymist.io/blog/2012/07/14/a-handful-of-singletons-in-c-sharp/</link>
      <pubDate>Sat, 14 Jul 2012 00:00:00 +1200</pubDate>
      
      <guid>https://binarymist.io/blog/2012/07/14/a-handful-of-singletons-in-c-sharp/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;Recently I was involved in an interview where I was queried on the Singleton Creational design pattern. I thought I’d share what I came up with. In order of preference from most to least used.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Keeping your events thread safe</title>
      <link>https://binarymist.io/blog/2012/03/11/keeping-your-events-thread-safe/</link>
      <pubDate>Sun, 11 Mar 2012 00:00:00 +1300</pubDate>
      
      <guid>https://binarymist.io/blog/2012/03/11/keeping-your-events-thread-safe/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;An area I’ve noticed where engineers often forget to think about synchronization is when firing events. It seems to be a common misconception, that all that is needed to keep synchronisation, is to check the delegate (technically a &lt;code&gt;MulticastDelegate&lt;/code&gt;, or in architectural terms the publisher of the publish-subscribe pattern (more commonly known as the observer pattern)) for null.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Quick walk through, of my UPS library</title>
      <link>https://binarymist.io/blog/2011/08/04/quick-walk-through-of-my-ups-library/</link>
      <pubDate>Thu, 04 Aug 2011 00:00:00 +1200</pubDate>
      
      <guid>https://binarymist.io/blog/2011/08/04/quick-walk-through-of-my-ups-library/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;Part three of a three part series.&lt;/p&gt;

&lt;p&gt;On setting up a UPS solution, to enable clean shutdown of vital network components. In this post, we’ll be reviewing the library that performs the shutting down of our servers.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Preparing APC Smart-UPS 1500 clients</title>
      <link>https://binarymist.io/blog/2011/07/26/preparing-apc-smart-ups-1500-clients/</link>
      <pubDate>Tue, 26 Jul 2011 00:00:00 +1200</pubDate>
      
      <guid>https://binarymist.io/blog/2011/07/26/preparing-apc-smart-ups-1500-clients/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;Part two of a three part series.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using PSCredentials</title>
      <link>https://binarymist.io/blog/2011/06/02/using-pscredentials/</link>
      <pubDate>Thu, 02 Jun 2011 00:00:00 +1200</pubDate>
      
      <guid>https://binarymist.io/blog/2011/06/02/using-pscredentials/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;I’ve been working on a small project that shuts down machines attached by network and of course power feed to an APC Smart-UPS. The code that was shutting down the guests required authentication to be passed to the receiving services.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Garbage Collection in dot NET 4.0</title>
      <link>https://binarymist.io/blog/2010/10/17/garbage-collection-in-dot-net-4.0/</link>
      <pubDate>Sun, 17 Oct 2010 00:00:00 +1300</pubDate>
      
      <guid>https://binarymist.io/blog/2010/10/17/garbage-collection-in-dot-net-4.0/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;Coverage on what&amp;rsquo;s new in the .NET 4.0 garbage collector.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LSP, DbC and dot NET’s support part 2</title>
      <link>https://binarymist.io/blog/2010/10/12/lsp-dbc-and-dot-nets-support-part-2/</link>
      <pubDate>Tue, 12 Oct 2010 00:00:00 +1300</pubDate>
      
      <guid>https://binarymist.io/blog/2010/10/12/lsp-dbc-and-dot-nets-support-part-2/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;Part two.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LSP, DbC and dot NET’s support, part 1</title>
      <link>https://binarymist.io/blog/2010/10/11/lsp-dbc-and-dot-nets-support-part-1/</link>
      <pubDate>Mon, 11 Oct 2010 00:00:00 +1300</pubDate>
      
      <guid>https://binarymist.io/blog/2010/10/11/lsp-dbc-and-dot-nets-support-part-1/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;Part one.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Metadata Exchange options for WCF</title>
      <link>https://binarymist.io/blog/2010/09/05/metadata-exchange-options-for-wcf/</link>
      <pubDate>Sun, 05 Sep 2010 00:00:00 +1200</pubDate>
      
      <guid>https://binarymist.io/blog/2010/09/05/metadata-exchange-options-for-wcf/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;There are two options for publishing metadata from a WCF service. By default, the services metadata is not published. In order to make the services information about itself public, you must do either of the following.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Message Inspection in WCF</title>
      <link>https://binarymist.io/blog/2010/06/14/message-inspection-in-wcf/</link>
      <pubDate>Mon, 14 Jun 2010 00:00:00 +1200</pubDate>
      
      <guid>https://binarymist.io/blog/2010/06/14/message-inspection-in-wcf/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;Message Inspectors can be a very usefull tool in diagnosing problems between WCF services and clients. The messages that are transferred between clients/services can be intercepted and operations performed on them. We’ve used this at work in conjunction with a tool called SaopUI to capture the SOAP messages and fire them at our service. This can be usefull for load testing, concurrency testing scenarios amongst others.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Duplex communication and callbacks in WCF</title>
      <link>https://binarymist.io/blog/2010/05/23/duplex-communication-and-callbacks-in-wcf/</link>
      <pubDate>Sun, 23 May 2010 00:00:00 +1200</pubDate>
      
      <guid>https://binarymist.io/blog/2010/05/23/duplex-communication-and-callbacks-in-wcf/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;I was reading in the book Enterprise Integration Patterns that my dev manager bought for the team, on the Message Endpoint pattern on the way home from work a few days ago.&lt;/p&gt;

&lt;p&gt;“A Message Endpoint can be used to send messages or receive them, but one instance does not do both” From my experience, this wasn’t necessarily true. So I decided to confirm my suspicion.
The following is a mix of what I read and tested out.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Logical vs Physical Addresses in WCF</title>
      <link>https://binarymist.io/blog/2010/04/18/logical-vs-physical-addresses-in-wcf/</link>
      <pubDate>Sun, 18 Apr 2010 00:00:00 +1200</pubDate>
      
      <guid>https://binarymist.io/blog/2010/04/18/logical-vs-physical-addresses-in-wcf/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;In this example, I share a listenUri between two endpoints.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Built-in MSMQ Bindings</title>
      <link>https://binarymist.io/blog/2010/04/05/built-in-msmq-bindings/</link>
      <pubDate>Mon, 05 Apr 2010 00:00:00 +1200</pubDate>
      
      <guid>https://binarymist.io/blog/2010/04/05/built-in-msmq-bindings/</guid>
      <description>&lt;p&gt;Redirects to legacy blog post.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;NetMsmqBinding&lt;/code&gt; only works if you have WCF on both sides of the Queue-to-Queue transfer. &lt;code&gt;MsmqIntegrationBinding&lt;/code&gt; is targeted toward existing MSMQ applications that use COM, native C++ APIs or the types defined in the &lt;code&gt;System.Messaging&lt;/code&gt; namespace (as stated by MSDN).&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>